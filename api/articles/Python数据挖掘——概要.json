{"title":"Python数据挖掘——概要","slug":"Python数据挖掘——概要","date":"2019-01-04T15:30:00.000Z","updated":"2022-09-30T06:56:37.164Z","comments":true,"path":"api/articles/Python数据挖掘——概要.json","excerpt":null,"covers":["https://user-gold-cdn.xitu.io/2018/9/6/165acaff8aac01cf?w=605&amp;h=362&amp;f=png&amp;s=12159","https://user-gold-cdn.xitu.io/2018/9/6/165ad72a029f3d22?w=605&amp;h=362&amp;f=png&amp;s=12159","https://user-gold-cdn.xitu.io/2018/9/6/165af852e320fea3?w=300&amp;h=30&amp;f=png&amp;s=500","https://user-gold-cdn.xitu.io/2018/9/6/165af7c0321440e0?w=605&amp;h=356&amp;f=png&amp;s=15230","https://user-gold-cdn.xitu.io/2018/9/6/165af8375b661141?w=846&amp;h=99&amp;f=png&amp;s=23089","https://user-gold-cdn.xitu.io/2018/9/6/165af84b783a086b?w=596&amp;h=356&amp;f=png&amp;s=15492","https://user-gold-cdn.xitu.io/2018/9/6/165af8eebd55abee?w=155&amp;h=57&amp;f=png&amp;s=2367","https://user-gold-cdn.xitu.io/2018/9/7/165b211e1adf40e8?w=353&amp;h=48&amp;f=png&amp;s=3937","https://user-gold-cdn.xitu.io/2018/9/7/165b29dfceee4ae8?w=704&amp;h=68&amp;f=png&amp;s=6525","https://user-gold-cdn.xitu.io/2018/9/7/165b2a5756a5a4a3?w=533&amp;h=189&amp;f=png&amp;s=25601","https://user-gold-cdn.xitu.io/2018/9/7/165b2bdd4a7cd845?w=128&amp;h=62&amp;f=png&amp;s=1391","https://user-gold-cdn.xitu.io/2018/9/7/165b2bc6bd1995f7?w=95&amp;h=47&amp;f=png&amp;s=1114","https://user-gold-cdn.xitu.io/2018/9/13/165d1d0e453e3047?w=173&amp;h=99&amp;f=png&amp;s=5152","https://user-gold-cdn.xitu.io/2018/9/7/165b33cfd31f1d8a?w=648&amp;h=257&amp;f=png&amp;s=58602","https://user-gold-cdn.xitu.io/2018/9/7/165b4596a0bf0e1f?w=399&amp;h=128&amp;f=png&amp;s=17472","https://user-gold-cdn.xitu.io/2018/9/7/165b456e6ef82636?w=276&amp;h=74&amp;f=png&amp;s=9386","https://user-gold-cdn.xitu.io/2018/9/9/165bd05c5b75f331?w=320&amp;h=116&amp;f=png&amp;s=12784","https://user-gold-cdn.xitu.io/2018/9/10/165c3bc0f875a4f2?w=468&amp;h=193&amp;f=png&amp;s=13889","https://user-gold-cdn.xitu.io/2018/9/12/165cb97ac388a376?w=308&amp;h=47&amp;f=png&amp;s=2796","https://user-gold-cdn.xitu.io/2018/9/13/165d1ff2e5208d1e?w=1546&amp;h=38&amp;f=png&amp;s=11379","https://user-gold-cdn.xitu.io/2018/9/12/165cb8547529dd0e?w=109&amp;h=53&amp;f=png&amp;s=2600","https://user-gold-cdn.xitu.io/2018/9/12/165cb83cfc13aaf1?w=152&amp;h=60&amp;f=png&amp;s=4167","https://user-gold-cdn.xitu.io/2018/9/12/165cb98290a241b9?w=308&amp;h=47&amp;f=png&amp;s=2796","https://user-gold-cdn.xitu.io/2018/9/12/165cba5c9f486819?w=308&amp;h=31&amp;f=png&amp;s=2113","https://user-gold-cdn.xitu.io/2018/9/12/165cdb16135ada50?w=621&amp;h=73&amp;f=png&amp;s=19581","https://user-gold-cdn.xitu.io/2018/9/12/165cdba3f27220e1?w=321&amp;h=39&amp;f=png&amp;s=8091","https://user-gold-cdn.xitu.io/2018/9/12/165cdc1436948f7a?w=364&amp;h=230&amp;f=png&amp;s=48409","https://user-gold-cdn.xitu.io/2018/9/12/165cdc3fca61705f?w=275&amp;h=154&amp;f=png&amp;s=10722","https://user-gold-cdn.xitu.io/2018/9/20/165f5eafc5c036a9?w=145&amp;h=202&amp;f=png&amp;s=6769","https://oceaneyes.top/img/zhishigroup.jpg","https://oceaneyes.top/img/alipay.jpg","https://oceaneyes.top/img/wechatpay.jpg"],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"一数据挖掘过程\">一、数据挖掘过程</h2>\n<p>1.数据选择</p>\n<p>分析业务需求后，选择应用于需求业务相关的数据：业务原始数据、公开的数据集、也可通过爬虫采集网站结构化的数据。明确业务需求并选择好针对性的数据是数据挖掘的先决条件。</p>\n<p>2.数据预处理</p>\n<p>通常选择好的数据会有噪音，不完整等缺陷，需要对数据进行清洗，缺失项处理，集成，转换以及归纳：\npython字符串处理（相当方便）、正则式匹配、pandas、beautifulsoup处理Html标签等等工具。</p>\n<p>3.特征工程/数据转换</p>\n<p>根据选择的算法，对预处理好的数据提取特征，并转换为特定数据挖掘算法的分析模型。</p>\n<p>4.数据挖掘</p>\n<p>使用选择好的数据挖掘算法对数据进行处理后得到信息。</p>\n<p>5.解释与评价</p>\n<p>对数据挖掘后的信息加以分析解释，并应用于实际的工作领域。</p>\n<h2 id=\"二数据挖掘常用算法简介\">二、数据挖掘常用算法简介</h2>\n<h3 id=\"关联分析算法\">1.关联分析算法</h3>\n<p>关联规则在于找出具有最小支持度阈值和最小置信度阈值的不同域的数据之间的关联。在关联规则的分析算法研究中，算法的效率是核心的问题。\n经典的算法有：Apriori算法，AprioriTid算法，FP-growth算法；</p>\n<h3 id=\"分类算法\">2.分类算法</h3>\n<p>决策树算法：以树形结构表示分类或者决策集合，产生规则或者发现规律。主要有ID3算法，C4.5算法，\nSLIQ算法， SPRINT算法， RainForest算法；</p>\n<p>朴素Bayes分类算法：利用Bayes定理概率统计的方法，选择其中概率比较大的类别进行分类；</p>\n<p>CBA(Classification Based on\nAssociation)算法：基于关联规则的分类算法；</p>\n<p>MIND(Mining in Database)算法\n：采用数据库中用户定义的函数(user-definedfunction，简称UDF)来实现分类的算法；</p>\n<p>神经网络分类算法：利用训练集对多个神经的网络进行训练，并用训练好的模型对样本进行分类；</p>\n<p>粗集理论：粗集理论的特点是不需要预先给定某些特征或属性的数量描述，而是直接从给定问题出发，通过不可分辨关系和不可分辨类确定问题的近似域,从而找出问题中的内在规律；</p>\n<p>遗传算法：遗传算法是模拟生物进化过程，利用复制(选择)、交叉(重组)和变异(突变)3个基本方法优化求解的技术；</p>\n<h3 id=\"聚类算法\">3.聚类算法</h3>\n<p>聚类分析与分类不同，聚类分析处理的数据对象的类是未知的。聚类分析就是将对象集合分组为由类似的对象组成\n的多个簇的过程。分为3类方法：</p>\n<p>Ipartitioning method(划分方法)\n给定1个N个对象或者元组的数据库，1个划分方法构建数据的K个划分，每1个划分表示1个聚簇，并且K&lt;N。经典算法是K-MEAN(K平均值)；</p>\n<p>hierarchical method(层次方法)\n对给定数据对象集合进行层次的分解，经典算法是BIRTH算法；</p>\n<p>grid based method(基于网格的方法)\n这种方法采用一个多分辨率的网格数据结构。将空间量化为有限数目的单元，这些单元形成了网格结构，所有聚类分析都在网格上进行。常用的算法有STING，SkWAVECLUSTER和\nCLIQUE；</p>\n<h3 id=\"小结\">小结</h3>\n<p>随着数据量的日益积累以及数据库种类的多样化，各种数据挖掘方法作用范围有限，都有局限性，因此采用单一方法难以得到决策所需的各种知识。但它们的有机组合具有互补性，多方法融合将成为数据挖掘算法的发展趋势。</p>\n<h2 id=\"三数据挖掘算法实现\">三、数据挖掘算法实现</h2>\n<h3 id=\"相关知识\">1、相关知识</h3>\n<h4 id=\"距离度量在数据挖掘中需要明确样本数据相似度通常可以计算样本间的距离如下为常用距离度量的介绍\">(1)距离度量：在数据挖掘中需要明确样本数据相似度，通常可以计算样本间的距离，如下为常用距离度量的介绍。</h4>\n<p>样本数据以： <img src=\"https://user-gold-cdn.xitu.io/2018/9/6/165acaff8aac01cf?w=605&amp;h=362&amp;f=png&amp;s=12159\" alt=\"样本数据\"></p>\n<figure>\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/6/165ad72a029f3d22?w=605&amp;h=362&amp;f=png&amp;s=12159\" alt=\"坐标\">\n<figcaption aria-hidden=\"true\">坐标</figcaption>\n</figure>\n<p><strong>曼哈顿距离：</strong>\n也称曼哈顿街区距离，就如从街区的一个十字路口点到另一个十字路口点的距离，\n二维空间（多维空间按同理扩展）用公式表示为 <img src=\"https://user-gold-cdn.xitu.io/2018/9/6/165af852e320fea3?w=300&amp;h=30&amp;f=png&amp;s=500\" alt=\"img\"></p>\n<figure>\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/6/165af7c0321440e0?w=605&amp;h=356&amp;f=png&amp;s=15230\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p><strong>欧氏距离</strong>：表示为点到点的距离。二维空间（多维空间按同理扩展）的公式表示为\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/6/165af8375b661141?w=846&amp;h=99&amp;f=png&amp;s=23089\" alt=\"img\"></p>\n<figure>\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/6/165af84b783a086b?w=596&amp;h=356&amp;f=png&amp;s=15492\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p><strong>闵可夫斯基距离</strong>：是一组距离方法的概括，当 p=1\n既是曼哈顿距离，当 p=2\n既是欧氏距离。当p越大，单一维度的差值对整体的影响就越大。 <img src=\"https://user-gold-cdn.xitu.io/2018/9/6/165af8eebd55abee?w=155&amp;h=57&amp;f=png&amp;s=2367\" alt=\"img\"></p>\n<p>闵可夫斯基距离（包括欧氏距离，曼哈顿距离）的优缺点：</p>\n<p>优点：应用广泛。</p>\n<p>缺点：无法考虑各分量的单位以及各分量分布（方差，期望）的差异性。（其中个分量的单位差异可以使用数据的标准化来消除，下面会有介绍。）</p>\n<p><strong>余弦相关系数</strong>：样本数据视为向量，通过两向量间的夹角余弦值确认相关性，数值范围[-1，1]。\n-1表示负相关，0表示无关，1表示正相关。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/7/165b211e1adf40e8?w=353&amp;h=48&amp;f=png&amp;s=3937\" alt=\"img\"> 余弦相关系数的优缺点：</p>\n<p>优点：余弦相似度与向量的幅值无关，只与向量的方向相关，在文档相似度（TF-IDF）和图片相似性（histogram）计算上都有它的身影；\n而且在样本数值稀疏的时候仍可以使用。</p>\n<p>缺点：余弦相似度受到向量的平移影响，上式如果将 x 平移到 x+1,\n余弦值就会改变。(可以理解为受样本的起始标准的影响，接下来介绍的皮尔逊相关系数可以消除这个影响)</p>\n<p><strong>皮尔逊相关系数</strong>：计算出了样本向量间的相关性，数值范围[-1，1]。\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/7/165b29dfceee4ae8?w=704&amp;h=68&amp;f=png&amp;s=6525\" alt=\"img\"></p>\n<p>考虑计算的遍历的次数，有一个替代公式可以近似计算皮尔逊相关系数：</p>\n<figure>\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/7/165b2a5756a5a4a3?w=533&amp;h=189&amp;f=png&amp;s=25601\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>皮尔逊相关系数优点：可消除每个分量标准不同（分数膨胀）的影响，具有平移不变性和尺度不变性。</p>\n<h4 id=\"数据标准化参考文章\">(2)数据标准化：<a href=\"https://blog.csdn.net/zenghaitao0128/article/details/78361038\">参考文章</a></h4>\n<p>各分量计算距离而各分量的单位尺度差异很大，可以使用数据标准化消除不同分量间单位尺度的影响，，加速模型收敛的效率，常用的方法有三种：</p>\n<p><strong>min-max\n标准化</strong>：将数值范围缩放到（0,1）,但没有改变数据分布。max为样本最大值，min为样本最小值。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/7/165b2bdd4a7cd845?w=128&amp;h=62&amp;f=png&amp;s=1391\" alt=\"img\"> <strong>z-score 标准化</strong>：将数值范围缩放到0附近,\n经过处理的数据符合标准正态分布。u是平均值，σ是标准差。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/7/165b2bc6bd1995f7?w=95&amp;h=47&amp;f=png&amp;s=1114\" alt=\"img\">\n<strong>修正的标准z-score</strong>：修正后可以减少样本数据异常值的影响。将z-score标准化公式中的均值改为中位数，将标准差改为绝对偏差。\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/13/165d1d0e453e3047?w=173&amp;h=99&amp;f=png&amp;s=5152\" alt=\"img\"> 其中asd绝对偏差：u为中位数，card(x)为样本个数 <img src=\"https://user-gold-cdn.xitu.io/2018/9/13/165d19a89ad874e4?w=231&amp;h=75&amp;f=png&amp;s=8321\" alt=\"img\"></p>\n<h4 id=\"算法的效果评估\">(3) 算法的效果评估：</h4>\n<p>十折交叉验证：将数据集随机分割成十个等份，每次用9份数据做训练集，1份数据做测试集，如此迭代10次。十折交叉验证的关键在于较平均地分为10份。</p>\n<p>N折交叉验证又称为留一法：用几乎所有的数据进行训练，然后留一个数据进行测试，并迭代每一数据测试。留一法的优点是：确定性。</p>\n<h3 id=\"协同过滤推荐算法\">2、协同过滤推荐算法</h3>\n<h4 id=\"代码实现数据集及参考论文-电影推荐基于用户物品的协同过滤算法\">代码实现、数据集及参考论文\n<a href=\"https://github.com/liaoyongyu/datamining/tree/master/recommendation_algorithms\">电影推荐——基于用户、物品的协同过滤算法</a></h4>\n<pre><code>...\n示例：\nr = Recommendor()\n\nprint(&quot;items base协同推荐 slope one&quot;)\n#items base协同推荐算法 Slope one\nr.slope_one_recommendation(&#39;lyy&#39;)\n\nprint(&quot;items base协同推荐 cos&quot;)\n#items base协同推荐算法  修正余弦相似度 \nr.cos_recommendation(&#39;lyy&#39;)\n\nprint(&quot;users base协同推荐&quot;)\n#userbase协同推荐算法 \nr.user_base_recommendation(&quot;lyy&quot;)</code></pre>\n<h4 id=\"基于用户的协同推荐算法\">(1)基于用户的协同推荐算法</h4>\n<p>这个方法是利用相似用户的喜好来进行推荐：如果要推荐一个乐队给你，会查找一个和你类似的用户，然后将他喜欢的乐队推荐给你。</p>\n<p>算法的关键在于找到相似的用户，迭代计算你与每个用户对相同乐队的评分距离，来确定谁是你最相似的用户，距离计算可以用曼哈顿距离，皮尔斯相关系数等等。\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/7/165b33cfd31f1d8a?w=648&amp;h=257&amp;f=png&amp;s=58602\" alt=\"img\"> 基于用户的协同推荐算法算法的缺点：</p>\n<p>扩展性：随着用户数量的增加，其计算量也会增加。这种算法在只有几千个用户的情况下能够工作得很好，但达到一百万个用户时就会出现瓶颈。稀疏性：大多数推荐系统中，物品的数量要远大于用户的数量，因此用户仅仅对一小部分物品进行了评价，这就造成了数据的稀疏性。比如亚马逊有上百万本书，但用户只评论了很少一部分，于是就很难找到两个相似的用户了。</p>\n<h4 id=\"基于物品的协同推荐算法\">(2)基于物品的协同推荐算法</h4>\n<p>基于用户的协同过滤是通过计算用户之间的距离找出最相似的用户（需要将所有的评价数据在读取在内存中处理进行推荐），并将相似用户评价过的物品推荐给目标用户。而基于物品的协同过滤则是找出最相似的物品（通过构建一个物品的相似度模型来做推荐），再结合用户的评价来给出推荐结果。</p>\n<p>基于物品的协同推荐算法常用有如下两种：</p>\n<h4 id=\"修正余弦相似度算法\">修正余弦相似度算法：</h4>\n<p>以物品的评分作为物品的属性值，通过对比物品i,j的工有的用户相对评分的计算相关性s(i,j)。与皮尔逊相关系数的原理相同，共有用户对物品的每一评分R(u,j)，R(u,i)需要减去该用户评分的平均值R(`u)而消除分数膨胀。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/7/165b4596a0bf0e1f?w=399&amp;h=128&amp;f=png&amp;s=17472\" alt=\"img\">\n修正余弦相似度的优点：通过构建物品模型的方式，扩展性好，占用内存小；消除分数膨胀的影响；</p>\n<p>修正余弦相似度的缺点：稀疏性，需要基于用户的评分数据；</p>\n<h4 id=\"slope-one推荐算法\">Slope One推荐算法：</h4>\n<p>第一步，计算平均差值：</p>\n<p>dev(i,j)为遍历所有共有物品i，j的共有用户u的评分平均差异。</p>\n<p>card(Sj,i(X))则表示同时评价过物品j和i的用户数。 <img src=\"https://user-gold-cdn.xitu.io/2018/9/7/165b456e6ef82636?w=276&amp;h=74&amp;f=png&amp;s=9386\" alt=\"slopeone\"></p>\n<p>第二歩，使用加权的Slope One算法：</p>\n<p>PWS1(u)j表示我们将预测用户u对物品j的评分。</p>\n<p>求合集i属于S(u)-j,用户u所含的所有物品i（除了j以外）。</p>\n<p>dev(i,j)为遍历所有共有物品i，j的共有用户u的评分平均差异。</p>\n<p>C(ji)也就是card(Sj,i(X))表示同时评价过物品j和i的用户数。 <img src=\"https://user-gold-cdn.xitu.io/2018/9/9/165bd05c5b75f331?w=320&amp;h=116&amp;f=png&amp;s=12784\" alt=\"img\"></p>\n<p>Slope\nOne算法优点：算法简单；扩展性好，只需要更新共有属性的用户评价，而不需要重新载入整个数据集。</p>\n<p>Slope One算法的缺点：稀疏性，需要基于用户的评分数据；</p>\n<h3 id=\"分类算法-1\">3、分类算法</h3>\n<h4 id=\"基于物品特征值的knn分类算法\">(1)基于物品特征值的KNN分类算法</h4>\n<h4 id=\"代码实现-鸢尾花knn分类算法\">代码实现 <a href=\"https://github.com/liaoyongyu/datamining/tree/master/classify/KNN/\">鸢尾花KNN分类算法</a></h4>\n<pre><code>...\n\n # KNN算法\n    def knn(self, oj_list):\n        weight_dict = &#123;&quot;Iris-setosa&quot;:0.0, &quot;Iris-versicolor&quot;:0.0, &quot;Iris-virginica&quot;:0.0&#125;\n        for atuple in oj_list:\n            weight_dict[atuple[1]] += (1.0 / atuple[0])\n        rel_class = [(key, value) for key, value in weight_dict.items()]\n        #print(sorted(rel_class, key=lambda x:x[1], reverse=True))\n        rel_class = sorted(rel_class, key=lambda x:x[1], reverse=True)[0][0]\n        return rel_class\n        \n...</code></pre>\n<p>前面我们讨论的协同推荐算法需要在用户产生的各种数据上面进行分析，因此也称为社会化过滤算法，而这种算法通常有数据的稀疏性，算法可扩展性以及依赖于用户的数据的缺点，而基于物品特征值分类算法可以改善这些问题。算法分为两步：</p>\n<p>第一步、选取特征值</p>\n<p>算法的关键在于挑取有代表区分意义的特征及分值。以Iris花的示例，选取花萼长度，\n花萼宽度，花瓣长度，花瓣宽度特征值。</p>\n<figure>\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/10/165c3bc0f875a4f2?w=468&amp;h=193&amp;f=png&amp;s=13889\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>第二歩、计算距离</p>\n<p>比如计算测试集与训练集特征值之间的曼哈顿距离，得到k个最近邻后并通过加权后的结果预测分类。</p>\n<p>KNN分类算法的缺点：无法对分类结果的置信度进行量化；是被动学习的算法，每次测试需要需要遍历所有的训练集后才能分类。</p>\n<h4 id=\"贝叶斯分类算法\">(2)贝叶斯分类算法</h4>\n<h4 id=\"代码实现-区分新闻类别朴素贝叶斯分类算法\">代码实现 <a href=\"https://github.com/liaoyongyu/datamining/blob/master/classify/Bayes/\">区分新闻类别朴素贝叶斯分类算法</a></h4>\n<pre><code>...\ndef train_data(self):\n        #训练组的条件概率\n        for word in self.vocabulary:\n            for category,value in self.prob.items():\n                if word not in self.prob[category]:\n                    count = 0\n                else :\n                    count = self.prob[category][word]\n                #优化条件概率公式\n                self.prob[category][word] = (count + 1) / (self.total[category] + len(self.vocabulary)) \n                \n...</code></pre>\n<p>贝叶斯分类算法是基于概率的分类算法。相比于KNN分类算法，它是主动学习的算法，它会根据训练集建立一个模型，并用这个模型对新样本进行分类，速度也会快很多。\n贝叶斯分类算法的理论基础是基于条件概率的公式（应用于现实中P(X|Y&amp;Z)不直观得出，而P(Y|X)*P(Z|X)比较直观得出），并假设已存在的子事件(y,z...实际应用中会有多个)间是相互独立的（因此也称为朴素贝叶斯），当y，z事件假设为独立便有：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/12/165cb97ac388a376?w=308&amp;h=47&amp;f=png&amp;s=2796\" alt=\"img\"> 如下举例推测买牛奶和有机食品，再会买绿茶的概率：</p>\n<figure>\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/13/165d1ff2e5208d1e?w=1546&amp;h=38&amp;f=png&amp;s=11379\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>第一步：计算先验概率及条件概率</p>\n<p>先验概率：为单独事件发生的概率，如P(买绿茶)，P(有机食品)</p>\n<p>条件概率（后验概率）：y事件已经发生，观察y数据集后得出x发生的概率。如P(买有机食品|买绿茶)，通过以下公式计算（nc表示y数据集下x的发生频数，n为y数据集的总数）：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/12/165cb8547529dd0e?w=109&amp;h=53&amp;f=png&amp;s=2600\" alt=\"img\"> 上式存在一个缺陷，当一个条件概率\nP(y|x)为0时，整体的预测结果P(x) <em>P(y|x)</em>\nP(z|x)只能为0，这样便不能更全面地预测。</p>\n<p>修正后的条件概率：（公式摘自Tom\nMitchell《机器学习》。m是一个常数，表示等效样本大小。决定常数m的方法有很多，我们这里可以使用预测结果的类别来作为m，比如投票有赞成和否决两种类别，所以m就为2。p则是相应的先验概率，比如说赞成概率是0.5，那p(赞成)就是0.5。）：</p>\n<figure>\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/12/165cb83cfc13aaf1?w=152&amp;h=60&amp;f=png&amp;s=4167\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>第二歩：根据贝叶斯公式做出预测</p>\n<figure>\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/12/165cb98290a241b9?w=308&amp;h=47&amp;f=png&amp;s=2796\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>由公式计算比较y&amp;z事件发生下，不同x事件发生的概率差异，如得出P（x=喜欢），P（x=不喜欢）\n的概率大小，预测为概率比较大的事件。\n因为P(y)*p(z)在上式都一样，因此公式可以简化为计算概率最大项而预测分类：\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/12/165cba5c9f486819?w=308&amp;h=31&amp;f=png&amp;s=2113\" alt=\"img\"></p>\n<p>贝叶斯算法的优点：能够给出分类结果的置信度；它是一种主动学习算法，速度更快。</p>\n<p>贝叶斯算法的缺点：需要特定格式；数值型数据需要转换为类别计算概率或用高斯分布计算概率；</p>\n<h4 id=\"逻辑回归分类算法\">(2)逻辑回归分类算法</h4>\n<h4 id=\"代码实现-区分猫的图片\">代码实现 <a href=\"https://github.com/liaoyongyu/datamining/tree/master/classify/NeutralNetwork\">区分猫的图片</a></h4>\n<p>注：逻辑回归分类算法待后续加入网络层，更新为神经网络分类算法。</p>\n<pre><code>...\n# cost函数，计算梯度\ndef propagate(w, b, X, Y):\n    m = X.shape[1]      \n    A = sigmoid(np.dot(w.T, X) + b)            \n    cost = -1 / m * np.sum(Y * np.log(A) + (1 - Y) * np.log(1 - A))        \n    dw = 1 / m * np.dot(X, (A - Y).T)  \n    db = 1 / m * np.sum(A - Y) \n...    </code></pre>\n<p>逻辑回归分类算法实现了输入特征向量X，而输出Y（范围0~1）预测X的分类。</p>\n<p>第一步，得到关于X线性回归函数</p>\n<p>可以通过线性回归得到WX +\nb，其中W是权重，b是偏差值。但不能用本式表述预测的值，因为输出Y的值需要在（0~1）区间；</p>\n<p>第二歩，通过激活函数转换</p>\n<p>激活函数的特点是可以将线性函数转换为非线性函数，并且有输出值有限，可微分，单调性的特点。本例使用sigmoid，使输出为预测值Y=sigmoid（WX+b）；</p>\n<p>第三歩，构建Cost函数</p>\n<p>训练W，b更好的预测真实的类别需要构建Cost代价函数，y^为sigmoid(WX+b)的预测分类值，y为实际分类值（0或者1）：</p>\n<figure>\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/12/165cdb16135ada50?w=621&amp;h=73&amp;f=png&amp;s=19581\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>其中L(y^,y)称为损失函数 <img src=\"https://user-gold-cdn.xitu.io/2018/9/12/165cdba3f27220e1?w=321&amp;h=39&amp;f=png&amp;s=8091\" alt=\"img\">\n训练的目的就是为了让L(y<sup>,y)足够小，也就是当y实际分类值为1时，y</sup>要尽量偏向1。y实际分类值为0时，y^尽量小接近0。</p>\n<p>第四步，梯度下降得到Cost函数的极小值</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/12/165cdc1436948f7a?w=364&amp;h=230&amp;f=png&amp;s=48409\" alt=\"img\">\n通过对W,b两个参数求偏导，不断迭代往下坡的的位置移动（对w，b值往极小值方向做优化，其中α为学习率控制下降的幅度），全局最优解也就是代价函数（成本函数）J\n(w,b)这个凸函数的极小值点。 <img src=\"https://user-gold-cdn.xitu.io/2018/9/12/165cdc3fca61705f?w=275&amp;h=154&amp;f=png&amp;s=10722\" alt=\"img\"> 第五步、通过训练好的W,b预测分类。 <img src=\"https://user-gold-cdn.xitu.io/2018/9/12/165cd7df7fd9b48c?w=1036&amp;h=804&amp;f=png&amp;s=175335\" alt=\"img\"></p>\n<h3 id=\"聚类算法-1\">4、聚类算法</h3>\n<h4 id=\"层次聚类\">(1)层次聚类</h4>\n<h4 id=\"代码实现-狗的种类层次聚类\">代码实现 <a href=\"https://github.com/liaoyongyu/datamining/tree/master/cluster/hierarchical%20method\">狗的种类层次聚类</a></h4>\n<p>层次聚类将每条数据都当作是一个分类，每次迭代的时候合并距离最近的两个分类，直到剩下一个分类为止。</p>\n<h4 id=\"k-means聚类\">(2)K-means++聚类</h4>\n<h4 id=\"代码实现-kmean聚类\">代码实现 <a href=\"https://github.com/liaoyongyu/datamining/blob/master/cluster/Ipartitioning%20method/kmeanpp.py\">Kmean++聚类</a></h4>\n<p>注：Kmean算法与Kmean++区别在于初始的中心点是直接随机选取k各点。</p>\n<pre><code>        ...\n        #kmean初始化随机k个中心点\n        #random.seed(1)\n        #center = [[self.data[i][r] for i in range(1, len((self.data)))]  \n                  #for r in random.sample(range(len(self.data)), k)]\n            \n        # Kmean ++ 初始化基于距离份量随机选k个中心点\n        # 1.随机选择一个点\n        center = []\n        center.append(random.choice(range(len(self.data[0]))))\n        # 2.根据距离的概率选择其他中心点\n        for i in range(self.k - 1):\n            weights = [self.distance_closest(self.data[0][x], center) \n                     for x in range(len(self.data[0])) if x not in center]\n            dp = [x for x in range(len(self.data[0])) if x not in center]\n            total = sum(weights)\n            #基于距离设定权重\n            weights = [weight/total for weight in weights]\n            num = random.random()\n            x = -1\n            i = 0\n            while i &lt; num :\n                x += 1\n                i += weights[x]\n            center.append(dp[x])\n        ... </code></pre>\n<p>k-means++算法可概括为：</p>\n<p>（1）基于各点到中心点得距离分量，依次随机选取到k个元素作为中心点：\n先随机选择一个点。重复以下步骤，直到选完k个点。</p>\n<p>计算每个数据点dp(n)到各个中心点的距离（D），选取最小的值D(dp)； <img src=\"https://user-gold-cdn.xitu.io/2018/9/20/165f5eafc5c036a9?w=145&amp;h=202&amp;f=png&amp;s=6769\" alt=\"img\"> 根据D(dp)距离所占的份量来随机选取下一个点作为中心点。 <img src=\"https://user-gold-cdn.xitu.io/2018/9/20/165f5eb1eb0f4f7e?w=150&amp;h=233&amp;f=png&amp;s=9001\" alt=\"img\"></p>\n<p>（2）根据各点到中心点的距离分类；</p>\n<p>（3）计算各个分类新的中心点。 重复(2、3)，直至满足条件。</p>\n<p>原文转自 https://segmentfault.com/a/1190000017808525</p>\n<hr>\n<h3 id=\"about-me\">About ME</h3>\n<h5 id=\"读书城南-在未来面前我们都是孩子\">👋 读书城南，🤔\n在未来面前，我们都是孩子～</h5>\n<ul>\n<li>📙\n一个热衷于探索学习新方向、新事物的智能产品经理，闲暇时间喜欢coding💻、画图🎨、音乐🎵、学习ing~</li>\n</ul>\n<h5 id=\"social-media\">👋 Social Media</h5>\n<ul>\n<li><p>🛠️ Blog: <a href=\"http://oceaneyes.top\">http://oceaneyes.top</a></p></li>\n<li><p>⚡ PM导航: <a href=\"https://pmhub.oceangzy.top\">https://pmhub.oceangzy.top</a></p></li>\n<li><p>☘️ CNBLOG: <a href=\"https://www.cnblogs.com/oceaneyes-gzy/\">https://www.cnblogs.com/oceaneyes-gzy/</a></p></li>\n<li><p>🌱 AI PRJ自己部署的一些算法demo: <a href=\"http://ai.oceangzy.top/\">http://ai.oceangzy.top/</a></p></li>\n<li><p>📫 Email: 1450136519@qq.com</p></li>\n<li><p>💬 WeChat: <a href=\"https://oceaneyes.top/img/wechatqrcode.jpg\">OCEANGZY</a></p></li>\n<li><p>💬 公众号: <a href=\"https://oceaneyes.top/img/wechatgzh.jpeg\">UncleJoker-GZY</a></p></li>\n</ul>\n<h5 id=\"加入小组\">👋 加入小组~</h5>\n<p><img src=\"https://oceaneyes.top/img/zhishigroup.jpg\" title=\"加入组织\" alt width=\"240\"></p>\n<h5 id=\"感谢打赏\">👋 感谢打赏~</h5>\n<p><img src=\"https://oceaneyes.top/img/alipay.jpg\" title=\"支付宝打赏\" alt width=\"140\">\n<img src=\"https://oceaneyes.top/img/wechatpay.jpg\" title=\"微信打赏\" alt width=\"140\"></p>\n","more":"<h2 id=\"一数据挖掘过程\">一、数据挖掘过程</h2>\n<p>1.数据选择</p>\n<p>分析业务需求后，选择应用于需求业务相关的数据：业务原始数据、公开的数据集、也可通过爬虫采集网站结构化的数据。明确业务需求并选择好针对性的数据是数据挖掘的先决条件。</p>\n<p>2.数据预处理</p>\n<p>通常选择好的数据会有噪音，不完整等缺陷，需要对数据进行清洗，缺失项处理，集成，转换以及归纳：\npython字符串处理（相当方便）、正则式匹配、pandas、beautifulsoup处理Html标签等等工具。</p>\n<p>3.特征工程/数据转换</p>\n<p>根据选择的算法，对预处理好的数据提取特征，并转换为特定数据挖掘算法的分析模型。</p>\n<p>4.数据挖掘</p>\n<p>使用选择好的数据挖掘算法对数据进行处理后得到信息。</p>\n<p>5.解释与评价</p>\n<p>对数据挖掘后的信息加以分析解释，并应用于实际的工作领域。</p>\n<h2 id=\"二数据挖掘常用算法简介\">二、数据挖掘常用算法简介</h2>\n<h3 id=\"关联分析算法\">1.关联分析算法</h3>\n<p>关联规则在于找出具有最小支持度阈值和最小置信度阈值的不同域的数据之间的关联。在关联规则的分析算法研究中，算法的效率是核心的问题。\n经典的算法有：Apriori算法，AprioriTid算法，FP-growth算法；</p>\n<h3 id=\"分类算法\">2.分类算法</h3>\n<p>决策树算法：以树形结构表示分类或者决策集合，产生规则或者发现规律。主要有ID3算法，C4.5算法，\nSLIQ算法， SPRINT算法， RainForest算法；</p>\n<p>朴素Bayes分类算法：利用Bayes定理概率统计的方法，选择其中概率比较大的类别进行分类；</p>\n<p>CBA(Classification Based on\nAssociation)算法：基于关联规则的分类算法；</p>\n<p>MIND(Mining in Database)算法\n：采用数据库中用户定义的函数(user-definedfunction，简称UDF)来实现分类的算法；</p>\n<p>神经网络分类算法：利用训练集对多个神经的网络进行训练，并用训练好的模型对样本进行分类；</p>\n<p>粗集理论：粗集理论的特点是不需要预先给定某些特征或属性的数量描述，而是直接从给定问题出发，通过不可分辨关系和不可分辨类确定问题的近似域,从而找出问题中的内在规律；</p>\n<p>遗传算法：遗传算法是模拟生物进化过程，利用复制(选择)、交叉(重组)和变异(突变)3个基本方法优化求解的技术；</p>\n<h3 id=\"聚类算法\">3.聚类算法</h3>\n<p>聚类分析与分类不同，聚类分析处理的数据对象的类是未知的。聚类分析就是将对象集合分组为由类似的对象组成\n的多个簇的过程。分为3类方法：</p>\n<p>Ipartitioning method(划分方法)\n给定1个N个对象或者元组的数据库，1个划分方法构建数据的K个划分，每1个划分表示1个聚簇，并且K&lt;N。经典算法是K-MEAN(K平均值)；</p>\n<p>hierarchical method(层次方法)\n对给定数据对象集合进行层次的分解，经典算法是BIRTH算法；</p>\n<p>grid based method(基于网格的方法)\n这种方法采用一个多分辨率的网格数据结构。将空间量化为有限数目的单元，这些单元形成了网格结构，所有聚类分析都在网格上进行。常用的算法有STING，SkWAVECLUSTER和\nCLIQUE；</p>\n<h3 id=\"小结\">小结</h3>\n<p>随着数据量的日益积累以及数据库种类的多样化，各种数据挖掘方法作用范围有限，都有局限性，因此采用单一方法难以得到决策所需的各种知识。但它们的有机组合具有互补性，多方法融合将成为数据挖掘算法的发展趋势。</p>\n<h2 id=\"三数据挖掘算法实现\">三、数据挖掘算法实现</h2>\n<h3 id=\"相关知识\">1、相关知识</h3>\n<h4 id=\"距离度量在数据挖掘中需要明确样本数据相似度通常可以计算样本间的距离如下为常用距离度量的介绍\">(1)距离度量：在数据挖掘中需要明确样本数据相似度，通常可以计算样本间的距离，如下为常用距离度量的介绍。</h4>\n<p>样本数据以： <img src=\"https://user-gold-cdn.xitu.io/2018/9/6/165acaff8aac01cf?w=605&amp;h=362&amp;f=png&amp;s=12159\" alt=\"样本数据\"></p>\n<figure>\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/6/165ad72a029f3d22?w=605&amp;h=362&amp;f=png&amp;s=12159\" alt=\"坐标\">\n<figcaption aria-hidden=\"true\">坐标</figcaption>\n</figure>\n<p><strong>曼哈顿距离：</strong>\n也称曼哈顿街区距离，就如从街区的一个十字路口点到另一个十字路口点的距离，\n二维空间（多维空间按同理扩展）用公式表示为 <img src=\"https://user-gold-cdn.xitu.io/2018/9/6/165af852e320fea3?w=300&amp;h=30&amp;f=png&amp;s=500\" alt=\"img\"></p>\n<figure>\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/6/165af7c0321440e0?w=605&amp;h=356&amp;f=png&amp;s=15230\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p><strong>欧氏距离</strong>：表示为点到点的距离。二维空间（多维空间按同理扩展）的公式表示为\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/6/165af8375b661141?w=846&amp;h=99&amp;f=png&amp;s=23089\" alt=\"img\"></p>\n<figure>\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/6/165af84b783a086b?w=596&amp;h=356&amp;f=png&amp;s=15492\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p><strong>闵可夫斯基距离</strong>：是一组距离方法的概括，当 p=1\n既是曼哈顿距离，当 p=2\n既是欧氏距离。当p越大，单一维度的差值对整体的影响就越大。 <img src=\"https://user-gold-cdn.xitu.io/2018/9/6/165af8eebd55abee?w=155&amp;h=57&amp;f=png&amp;s=2367\" alt=\"img\"></p>\n<p>闵可夫斯基距离（包括欧氏距离，曼哈顿距离）的优缺点：</p>\n<p>优点：应用广泛。</p>\n<p>缺点：无法考虑各分量的单位以及各分量分布（方差，期望）的差异性。（其中个分量的单位差异可以使用数据的标准化来消除，下面会有介绍。）</p>\n<p><strong>余弦相关系数</strong>：样本数据视为向量，通过两向量间的夹角余弦值确认相关性，数值范围[-1，1]。\n-1表示负相关，0表示无关，1表示正相关。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/7/165b211e1adf40e8?w=353&amp;h=48&amp;f=png&amp;s=3937\" alt=\"img\"> 余弦相关系数的优缺点：</p>\n<p>优点：余弦相似度与向量的幅值无关，只与向量的方向相关，在文档相似度（TF-IDF）和图片相似性（histogram）计算上都有它的身影；\n而且在样本数值稀疏的时候仍可以使用。</p>\n<p>缺点：余弦相似度受到向量的平移影响，上式如果将 x 平移到 x+1,\n余弦值就会改变。(可以理解为受样本的起始标准的影响，接下来介绍的皮尔逊相关系数可以消除这个影响)</p>\n<p><strong>皮尔逊相关系数</strong>：计算出了样本向量间的相关性，数值范围[-1，1]。\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/7/165b29dfceee4ae8?w=704&amp;h=68&amp;f=png&amp;s=6525\" alt=\"img\"></p>\n<p>考虑计算的遍历的次数，有一个替代公式可以近似计算皮尔逊相关系数：</p>\n<figure>\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/7/165b2a5756a5a4a3?w=533&amp;h=189&amp;f=png&amp;s=25601\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>皮尔逊相关系数优点：可消除每个分量标准不同（分数膨胀）的影响，具有平移不变性和尺度不变性。</p>\n<h4 id=\"数据标准化参考文章\">(2)数据标准化：<a href=\"https://blog.csdn.net/zenghaitao0128/article/details/78361038\">参考文章</a></h4>\n<p>各分量计算距离而各分量的单位尺度差异很大，可以使用数据标准化消除不同分量间单位尺度的影响，，加速模型收敛的效率，常用的方法有三种：</p>\n<p><strong>min-max\n标准化</strong>：将数值范围缩放到（0,1）,但没有改变数据分布。max为样本最大值，min为样本最小值。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/7/165b2bdd4a7cd845?w=128&amp;h=62&amp;f=png&amp;s=1391\" alt=\"img\"> <strong>z-score 标准化</strong>：将数值范围缩放到0附近,\n经过处理的数据符合标准正态分布。u是平均值，σ是标准差。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/7/165b2bc6bd1995f7?w=95&amp;h=47&amp;f=png&amp;s=1114\" alt=\"img\">\n<strong>修正的标准z-score</strong>：修正后可以减少样本数据异常值的影响。将z-score标准化公式中的均值改为中位数，将标准差改为绝对偏差。\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/13/165d1d0e453e3047?w=173&amp;h=99&amp;f=png&amp;s=5152\" alt=\"img\"> 其中asd绝对偏差：u为中位数，card(x)为样本个数 <img src=\"https://user-gold-cdn.xitu.io/2018/9/13/165d19a89ad874e4?w=231&amp;h=75&amp;f=png&amp;s=8321\" alt=\"img\"></p>\n<h4 id=\"算法的效果评估\">(3) 算法的效果评估：</h4>\n<p>十折交叉验证：将数据集随机分割成十个等份，每次用9份数据做训练集，1份数据做测试集，如此迭代10次。十折交叉验证的关键在于较平均地分为10份。</p>\n<p>N折交叉验证又称为留一法：用几乎所有的数据进行训练，然后留一个数据进行测试，并迭代每一数据测试。留一法的优点是：确定性。</p>\n<h3 id=\"协同过滤推荐算法\">2、协同过滤推荐算法</h3>\n<h4 id=\"代码实现数据集及参考论文-电影推荐基于用户物品的协同过滤算法\">代码实现、数据集及参考论文\n<a href=\"https://github.com/liaoyongyu/datamining/tree/master/recommendation_algorithms\">电影推荐——基于用户、物品的协同过滤算法</a></h4>\n<pre><code>...\n示例：\nr = Recommendor()\n\nprint(&quot;items base协同推荐 slope one&quot;)\n#items base协同推荐算法 Slope one\nr.slope_one_recommendation(&#39;lyy&#39;)\n\nprint(&quot;items base协同推荐 cos&quot;)\n#items base协同推荐算法  修正余弦相似度 \nr.cos_recommendation(&#39;lyy&#39;)\n\nprint(&quot;users base协同推荐&quot;)\n#userbase协同推荐算法 \nr.user_base_recommendation(&quot;lyy&quot;)</code></pre>\n<h4 id=\"基于用户的协同推荐算法\">(1)基于用户的协同推荐算法</h4>\n<p>这个方法是利用相似用户的喜好来进行推荐：如果要推荐一个乐队给你，会查找一个和你类似的用户，然后将他喜欢的乐队推荐给你。</p>\n<p>算法的关键在于找到相似的用户，迭代计算你与每个用户对相同乐队的评分距离，来确定谁是你最相似的用户，距离计算可以用曼哈顿距离，皮尔斯相关系数等等。\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/7/165b33cfd31f1d8a?w=648&amp;h=257&amp;f=png&amp;s=58602\" alt=\"img\"> 基于用户的协同推荐算法算法的缺点：</p>\n<p>扩展性：随着用户数量的增加，其计算量也会增加。这种算法在只有几千个用户的情况下能够工作得很好，但达到一百万个用户时就会出现瓶颈。稀疏性：大多数推荐系统中，物品的数量要远大于用户的数量，因此用户仅仅对一小部分物品进行了评价，这就造成了数据的稀疏性。比如亚马逊有上百万本书，但用户只评论了很少一部分，于是就很难找到两个相似的用户了。</p>\n<h4 id=\"基于物品的协同推荐算法\">(2)基于物品的协同推荐算法</h4>\n<p>基于用户的协同过滤是通过计算用户之间的距离找出最相似的用户（需要将所有的评价数据在读取在内存中处理进行推荐），并将相似用户评价过的物品推荐给目标用户。而基于物品的协同过滤则是找出最相似的物品（通过构建一个物品的相似度模型来做推荐），再结合用户的评价来给出推荐结果。</p>\n<p>基于物品的协同推荐算法常用有如下两种：</p>\n<h4 id=\"修正余弦相似度算法\">修正余弦相似度算法：</h4>\n<p>以物品的评分作为物品的属性值，通过对比物品i,j的工有的用户相对评分的计算相关性s(i,j)。与皮尔逊相关系数的原理相同，共有用户对物品的每一评分R(u,j)，R(u,i)需要减去该用户评分的平均值R(`u)而消除分数膨胀。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/7/165b4596a0bf0e1f?w=399&amp;h=128&amp;f=png&amp;s=17472\" alt=\"img\">\n修正余弦相似度的优点：通过构建物品模型的方式，扩展性好，占用内存小；消除分数膨胀的影响；</p>\n<p>修正余弦相似度的缺点：稀疏性，需要基于用户的评分数据；</p>\n<h4 id=\"slope-one推荐算法\">Slope One推荐算法：</h4>\n<p>第一步，计算平均差值：</p>\n<p>dev(i,j)为遍历所有共有物品i，j的共有用户u的评分平均差异。</p>\n<p>card(Sj,i(X))则表示同时评价过物品j和i的用户数。 <img src=\"https://user-gold-cdn.xitu.io/2018/9/7/165b456e6ef82636?w=276&amp;h=74&amp;f=png&amp;s=9386\" alt=\"slopeone\"></p>\n<p>第二歩，使用加权的Slope One算法：</p>\n<p>PWS1(u)j表示我们将预测用户u对物品j的评分。</p>\n<p>求合集i属于S(u)-j,用户u所含的所有物品i（除了j以外）。</p>\n<p>dev(i,j)为遍历所有共有物品i，j的共有用户u的评分平均差异。</p>\n<p>C(ji)也就是card(Sj,i(X))表示同时评价过物品j和i的用户数。 <img src=\"https://user-gold-cdn.xitu.io/2018/9/9/165bd05c5b75f331?w=320&amp;h=116&amp;f=png&amp;s=12784\" alt=\"img\"></p>\n<p>Slope\nOne算法优点：算法简单；扩展性好，只需要更新共有属性的用户评价，而不需要重新载入整个数据集。</p>\n<p>Slope One算法的缺点：稀疏性，需要基于用户的评分数据；</p>\n<h3 id=\"分类算法-1\">3、分类算法</h3>\n<h4 id=\"基于物品特征值的knn分类算法\">(1)基于物品特征值的KNN分类算法</h4>\n<h4 id=\"代码实现-鸢尾花knn分类算法\">代码实现 <a href=\"https://github.com/liaoyongyu/datamining/tree/master/classify/KNN/\">鸢尾花KNN分类算法</a></h4>\n<pre><code>...\n\n # KNN算法\n    def knn(self, oj_list):\n        weight_dict = &#123;&quot;Iris-setosa&quot;:0.0, &quot;Iris-versicolor&quot;:0.0, &quot;Iris-virginica&quot;:0.0&#125;\n        for atuple in oj_list:\n            weight_dict[atuple[1]] += (1.0 / atuple[0])\n        rel_class = [(key, value) for key, value in weight_dict.items()]\n        #print(sorted(rel_class, key=lambda x:x[1], reverse=True))\n        rel_class = sorted(rel_class, key=lambda x:x[1], reverse=True)[0][0]\n        return rel_class\n        \n...</code></pre>\n<p>前面我们讨论的协同推荐算法需要在用户产生的各种数据上面进行分析，因此也称为社会化过滤算法，而这种算法通常有数据的稀疏性，算法可扩展性以及依赖于用户的数据的缺点，而基于物品特征值分类算法可以改善这些问题。算法分为两步：</p>\n<p>第一步、选取特征值</p>\n<p>算法的关键在于挑取有代表区分意义的特征及分值。以Iris花的示例，选取花萼长度，\n花萼宽度，花瓣长度，花瓣宽度特征值。</p>\n<figure>\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/10/165c3bc0f875a4f2?w=468&amp;h=193&amp;f=png&amp;s=13889\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>第二歩、计算距离</p>\n<p>比如计算测试集与训练集特征值之间的曼哈顿距离，得到k个最近邻后并通过加权后的结果预测分类。</p>\n<p>KNN分类算法的缺点：无法对分类结果的置信度进行量化；是被动学习的算法，每次测试需要需要遍历所有的训练集后才能分类。</p>\n<h4 id=\"贝叶斯分类算法\">(2)贝叶斯分类算法</h4>\n<h4 id=\"代码实现-区分新闻类别朴素贝叶斯分类算法\">代码实现 <a href=\"https://github.com/liaoyongyu/datamining/blob/master/classify/Bayes/\">区分新闻类别朴素贝叶斯分类算法</a></h4>\n<pre><code>...\ndef train_data(self):\n        #训练组的条件概率\n        for word in self.vocabulary:\n            for category,value in self.prob.items():\n                if word not in self.prob[category]:\n                    count = 0\n                else :\n                    count = self.prob[category][word]\n                #优化条件概率公式\n                self.prob[category][word] = (count + 1) / (self.total[category] + len(self.vocabulary)) \n                \n...</code></pre>\n<p>贝叶斯分类算法是基于概率的分类算法。相比于KNN分类算法，它是主动学习的算法，它会根据训练集建立一个模型，并用这个模型对新样本进行分类，速度也会快很多。\n贝叶斯分类算法的理论基础是基于条件概率的公式（应用于现实中P(X|Y&amp;Z)不直观得出，而P(Y|X)*P(Z|X)比较直观得出），并假设已存在的子事件(y,z...实际应用中会有多个)间是相互独立的（因此也称为朴素贝叶斯），当y，z事件假设为独立便有：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/12/165cb97ac388a376?w=308&amp;h=47&amp;f=png&amp;s=2796\" alt=\"img\"> 如下举例推测买牛奶和有机食品，再会买绿茶的概率：</p>\n<figure>\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/13/165d1ff2e5208d1e?w=1546&amp;h=38&amp;f=png&amp;s=11379\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>第一步：计算先验概率及条件概率</p>\n<p>先验概率：为单独事件发生的概率，如P(买绿茶)，P(有机食品)</p>\n<p>条件概率（后验概率）：y事件已经发生，观察y数据集后得出x发生的概率。如P(买有机食品|买绿茶)，通过以下公式计算（nc表示y数据集下x的发生频数，n为y数据集的总数）：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/12/165cb8547529dd0e?w=109&amp;h=53&amp;f=png&amp;s=2600\" alt=\"img\"> 上式存在一个缺陷，当一个条件概率\nP(y|x)为0时，整体的预测结果P(x) <em>P(y|x)</em>\nP(z|x)只能为0，这样便不能更全面地预测。</p>\n<p>修正后的条件概率：（公式摘自Tom\nMitchell《机器学习》。m是一个常数，表示等效样本大小。决定常数m的方法有很多，我们这里可以使用预测结果的类别来作为m，比如投票有赞成和否决两种类别，所以m就为2。p则是相应的先验概率，比如说赞成概率是0.5，那p(赞成)就是0.5。）：</p>\n<figure>\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/12/165cb83cfc13aaf1?w=152&amp;h=60&amp;f=png&amp;s=4167\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>第二歩：根据贝叶斯公式做出预测</p>\n<figure>\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/12/165cb98290a241b9?w=308&amp;h=47&amp;f=png&amp;s=2796\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>由公式计算比较y&amp;z事件发生下，不同x事件发生的概率差异，如得出P（x=喜欢），P（x=不喜欢）\n的概率大小，预测为概率比较大的事件。\n因为P(y)*p(z)在上式都一样，因此公式可以简化为计算概率最大项而预测分类：\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/12/165cba5c9f486819?w=308&amp;h=31&amp;f=png&amp;s=2113\" alt=\"img\"></p>\n<p>贝叶斯算法的优点：能够给出分类结果的置信度；它是一种主动学习算法，速度更快。</p>\n<p>贝叶斯算法的缺点：需要特定格式；数值型数据需要转换为类别计算概率或用高斯分布计算概率；</p>\n<h4 id=\"逻辑回归分类算法\">(2)逻辑回归分类算法</h4>\n<h4 id=\"代码实现-区分猫的图片\">代码实现 <a href=\"https://github.com/liaoyongyu/datamining/tree/master/classify/NeutralNetwork\">区分猫的图片</a></h4>\n<p>注：逻辑回归分类算法待后续加入网络层，更新为神经网络分类算法。</p>\n<pre><code>...\n# cost函数，计算梯度\ndef propagate(w, b, X, Y):\n    m = X.shape[1]      \n    A = sigmoid(np.dot(w.T, X) + b)            \n    cost = -1 / m * np.sum(Y * np.log(A) + (1 - Y) * np.log(1 - A))        \n    dw = 1 / m * np.dot(X, (A - Y).T)  \n    db = 1 / m * np.sum(A - Y) \n...    </code></pre>\n<p>逻辑回归分类算法实现了输入特征向量X，而输出Y（范围0~1）预测X的分类。</p>\n<p>第一步，得到关于X线性回归函数</p>\n<p>可以通过线性回归得到WX +\nb，其中W是权重，b是偏差值。但不能用本式表述预测的值，因为输出Y的值需要在（0~1）区间；</p>\n<p>第二歩，通过激活函数转换</p>\n<p>激活函数的特点是可以将线性函数转换为非线性函数，并且有输出值有限，可微分，单调性的特点。本例使用sigmoid，使输出为预测值Y=sigmoid（WX+b）；</p>\n<p>第三歩，构建Cost函数</p>\n<p>训练W，b更好的预测真实的类别需要构建Cost代价函数，y^为sigmoid(WX+b)的预测分类值，y为实际分类值（0或者1）：</p>\n<figure>\n<img src=\"https://user-gold-cdn.xitu.io/2018/9/12/165cdb16135ada50?w=621&amp;h=73&amp;f=png&amp;s=19581\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>其中L(y^,y)称为损失函数 <img src=\"https://user-gold-cdn.xitu.io/2018/9/12/165cdba3f27220e1?w=321&amp;h=39&amp;f=png&amp;s=8091\" alt=\"img\">\n训练的目的就是为了让L(y<sup>,y)足够小，也就是当y实际分类值为1时，y</sup>要尽量偏向1。y实际分类值为0时，y^尽量小接近0。</p>\n<p>第四步，梯度下降得到Cost函数的极小值</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/12/165cdc1436948f7a?w=364&amp;h=230&amp;f=png&amp;s=48409\" alt=\"img\">\n通过对W,b两个参数求偏导，不断迭代往下坡的的位置移动（对w，b值往极小值方向做优化，其中α为学习率控制下降的幅度），全局最优解也就是代价函数（成本函数）J\n(w,b)这个凸函数的极小值点。 <img src=\"https://user-gold-cdn.xitu.io/2018/9/12/165cdc3fca61705f?w=275&amp;h=154&amp;f=png&amp;s=10722\" alt=\"img\"> 第五步、通过训练好的W,b预测分类。 <img src=\"https://user-gold-cdn.xitu.io/2018/9/12/165cd7df7fd9b48c?w=1036&amp;h=804&amp;f=png&amp;s=175335\" alt=\"img\"></p>\n<h3 id=\"聚类算法-1\">4、聚类算法</h3>\n<h4 id=\"层次聚类\">(1)层次聚类</h4>\n<h4 id=\"代码实现-狗的种类层次聚类\">代码实现 <a href=\"https://github.com/liaoyongyu/datamining/tree/master/cluster/hierarchical%20method\">狗的种类层次聚类</a></h4>\n<p>层次聚类将每条数据都当作是一个分类，每次迭代的时候合并距离最近的两个分类，直到剩下一个分类为止。</p>\n<h4 id=\"k-means聚类\">(2)K-means++聚类</h4>\n<h4 id=\"代码实现-kmean聚类\">代码实现 <a href=\"https://github.com/liaoyongyu/datamining/blob/master/cluster/Ipartitioning%20method/kmeanpp.py\">Kmean++聚类</a></h4>\n<p>注：Kmean算法与Kmean++区别在于初始的中心点是直接随机选取k各点。</p>\n<pre><code>        ...\n        #kmean初始化随机k个中心点\n        #random.seed(1)\n        #center = [[self.data[i][r] for i in range(1, len((self.data)))]  \n                  #for r in random.sample(range(len(self.data)), k)]\n            \n        # Kmean ++ 初始化基于距离份量随机选k个中心点\n        # 1.随机选择一个点\n        center = []\n        center.append(random.choice(range(len(self.data[0]))))\n        # 2.根据距离的概率选择其他中心点\n        for i in range(self.k - 1):\n            weights = [self.distance_closest(self.data[0][x], center) \n                     for x in range(len(self.data[0])) if x not in center]\n            dp = [x for x in range(len(self.data[0])) if x not in center]\n            total = sum(weights)\n            #基于距离设定权重\n            weights = [weight/total for weight in weights]\n            num = random.random()\n            x = -1\n            i = 0\n            while i &lt; num :\n                x += 1\n                i += weights[x]\n            center.append(dp[x])\n        ... </code></pre>\n<p>k-means++算法可概括为：</p>\n<p>（1）基于各点到中心点得距离分量，依次随机选取到k个元素作为中心点：\n先随机选择一个点。重复以下步骤，直到选完k个点。</p>\n<p>计算每个数据点dp(n)到各个中心点的距离（D），选取最小的值D(dp)； <img src=\"https://user-gold-cdn.xitu.io/2018/9/20/165f5eafc5c036a9?w=145&amp;h=202&amp;f=png&amp;s=6769\" alt=\"img\"> 根据D(dp)距离所占的份量来随机选取下一个点作为中心点。 <img src=\"https://user-gold-cdn.xitu.io/2018/9/20/165f5eb1eb0f4f7e?w=150&amp;h=233&amp;f=png&amp;s=9001\" alt=\"img\"></p>\n<p>（2）根据各点到中心点的距离分类；</p>\n<p>（3）计算各个分类新的中心点。 重复(2、3)，直至满足条件。</p>\n<p>原文转自 https://segmentfault.com/a/1190000017808525</p>\n<hr>\n<h3 id=\"about-me\">About ME</h3>\n<h5 id=\"读书城南-在未来面前我们都是孩子\">👋 读书城南，🤔\n在未来面前，我们都是孩子～</h5>\n<ul>\n<li>📙\n一个热衷于探索学习新方向、新事物的智能产品经理，闲暇时间喜欢coding💻、画图🎨、音乐🎵、学习ing~</li>\n</ul>\n<h5 id=\"social-media\">👋 Social Media</h5>\n<ul>\n<li><p>🛠️ Blog: <a href=\"http://oceaneyes.top\">http://oceaneyes.top</a></p></li>\n<li><p>⚡ PM导航: <a href=\"https://pmhub.oceangzy.top\">https://pmhub.oceangzy.top</a></p></li>\n<li><p>☘️ CNBLOG: <a href=\"https://www.cnblogs.com/oceaneyes-gzy/\">https://www.cnblogs.com/oceaneyes-gzy/</a></p></li>\n<li><p>🌱 AI PRJ自己部署的一些算法demo: <a href=\"http://ai.oceangzy.top/\">http://ai.oceangzy.top/</a></p></li>\n<li><p>📫 Email: 1450136519@qq.com</p></li>\n<li><p>💬 WeChat: <a href=\"https://oceaneyes.top/img/wechatqrcode.jpg\">OCEANGZY</a></p></li>\n<li><p>💬 公众号: <a href=\"https://oceaneyes.top/img/wechatgzh.jpeg\">UncleJoker-GZY</a></p></li>\n</ul>\n<h5 id=\"加入小组\">👋 加入小组~</h5>\n<p><img src=\"https://oceaneyes.top/img/zhishigroup.jpg\" title=\"加入组织\" alt width=\"240\"></p>\n<h5 id=\"感谢打赏\">👋 感谢打赏~</h5>\n<p><img src=\"https://oceaneyes.top/img/alipay.jpg\" title=\"支付宝打赏\" alt width=\"140\">\n<img src=\"https://oceaneyes.top/img/wechatpay.jpg\" title=\"微信打赏\" alt width=\"140\"></p>\n","categories":[{"name":"Artificial Intelligence","path":"api/categories/Artificial Intelligence.json"},{"name":"Data Mining","path":"api/categories/Data Mining.json"}],"tags":[{"name":"Python3","path":"api/tags/Python3.json"},{"name":"Data Mining","path":"api/tags/Data Mining.json"}]}