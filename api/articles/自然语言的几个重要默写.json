{"title":"自然语言的几个重要模型-学习记录","slug":"自然语言的几个重要默写","date":"2020-12-25T15:30:00.000Z","updated":"2022-09-30T06:56:37.204Z","comments":true,"path":"api/articles/自然语言的几个重要默写.json","excerpt":null,"covers":["https://pic2.zhimg.com/80/v2-6d3c95a028c3c39ef914578c28761f4d_720w.jpg","https://pic1.zhimg.com/80/v2-c867b8b44ac1523c5bcd57892d82c410_720w.jpg","https://pic4.zhimg.com/80/v2-f0cefee0daa2b03db7ab82d6041255db_720w.jpg","https://pic2.zhimg.com/80/v2-4722529b9d834e3f33d9c69c357a131d_720w.jpg","https://pic2.zhimg.com/80/v2-091d6c59f1470d69b02e5706c6e8826d_720w.jpg","https://pic3.zhimg.com/80/v2-1b198e023a6d37e62007f2194968345a_720w.jpg","https://pic3.zhimg.com/80/v2-018ad2fb5cedbac69995091a3382aa26_720w.jpg","https://pic4.zhimg.com/80/v2-3d0a76f2a08c1e63a6b5e83363f449b7_720w.jpg","https://pic2.zhimg.com/80/v2-458a9f90e229afda50492fe07e820e25_720w.jpg","https://pic1.zhimg.com/80/v2-d86bb49f50f76ffc04a0d35efb362358_720w.jpg","https://pic1.zhimg.com/80/v2-626705b15c5ecde49eb8423f380da928_720w.jpg","https://pic4.zhimg.com/80/v2-6f091d417fdc6eeeafa7c520b5c8a8d7_720w.jpg","https://pic1.zhimg.com/80/v2-d9060c49cb9fc6fca8d3dfe18e1ee460_720w.jpg","https://pic2.zhimg.com/80/v2-d62fd9134fd608aa3ca44883dadf84c1_720w.jpg","https://pic2.zhimg.com/80/v2-3d4f17d18143c6851357f27124bcab15_720w.jpg","https://pic2.zhimg.com/80/v2-7ff59c3d2c7f98cc8013d6ab12905ecd_720w.jpg","https://pic2.zhimg.com/80/v2-faf5e9f13cb1c4335f51171ae2ddd1d1_720w.jpg","https://pic3.zhimg.com/80/v2-c86d61bb43209f2d2a109f7b7351624a_720w.jpg","https://pic4.zhimg.com/80/v2-5e91252408d0539d2090815f2084638f_720w.jpg","https://oceaneyes.top/img/zhishigroup.jpg","https://oceaneyes.top/img/alipay.jpg","https://oceaneyes.top/img/wechatpay.jpg"],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"自然语言的几个重要模型-学习记录\">自然语言的几个重要模型-学习记录</h2>\n<ul>\n<li>循环神经网络 (序列模型序列依赖问题)</li>\n<li>双向循环神经网络（输入序列正向和反向依赖问题）</li>\n<li>深度双向循环神经网络</li>\n<li>LSTM（梯度消失问题）</li>\n<li>GRU</li>\n<li>text CNN（一维卷积和池化）</li>\n<li>seq2seq（序列到序列问题）</li>\n<li>Attention（decoder对encoder输入序列注意力问题，从输入获取可用信息）</li>\n<li>Transform（对输入的序列分成q检索项 k键项\nv值项进行计算，矩阵并行计算）</li>\n<li>语言预训练方法ELMO （使用双向rnn组合中间层权重）</li>\n<li>语言预训练方法BERT ERNIE （使用transform\nencoder部分无需标签，ERNIE主要处理中文场景按词mask）</li>\n<li>语言预训练方法GPT （使用transform decoder部分）</li>\n</ul>\n<h3 id=\"循环神经网络\">1.循环神经网络</h3>\n<figure>\n<img src=\"https://pic2.zhimg.com/80/v2-6d3c95a028c3c39ef914578c28761f4d_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<ul>\n<li>使用隐藏层保留之前时间步的信息</li>\n<li><strong>梯度裁剪</strong>\n处理梯度爆炸问题，即超出阈值怎重置为阈值。因为在RNN中目标函数有关隐藏状态的梯度会因为时间步数较大或时间步较小而变大。</li>\n</ul>\n<h3 id=\"双向循环神经网络\">2.双向循环神经网络</h3>\n<figure>\n<img src=\"https://pic1.zhimg.com/80/v2-c867b8b44ac1523c5bcd57892d82c410_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p><em>（橘色的实线和虚线分别是前向传递和后向传递的过程 ）</em></p>\n<ul>\n<li>通常RNN输入序列是按顺序输入，但此时就会丢失从后往前的数据。双向RNN就是前后各有一个网络，对各自输出的向量进行整合。</li>\n</ul>\n<h3 id=\"深度双向循环神经网络\">3.深度双向循环神经网络</h3>\n<figure>\n<img src=\"https://pic4.zhimg.com/80/v2-f0cefee0daa2b03db7ab82d6041255db_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<ul>\n<li>叠加多层双向RNN</li>\n</ul>\n<h3 id=\"lstm\">4.LSTM</h3>\n<figure>\n<img src=\"https://pic2.zhimg.com/80/v2-4722529b9d834e3f33d9c69c357a131d_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<figure>\n<img src=\"https://pic2.zhimg.com/80/v2-091d6c59f1470d69b02e5706c6e8826d_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<ul>\n<li>包含了三个门，输入门 输出门 遗忘门</li>\n<li>缓解了梯度消失的问题</li>\n</ul>\n<h3 id=\"gru\">5.GRU</h3>\n<figure>\n<img src=\"https://pic3.zhimg.com/80/v2-1b198e023a6d37e62007f2194968345a_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<ul>\n<li>包含重置门和更新门</li>\n<li>缓解了梯度消失的问题</li>\n</ul>\n<h3 id=\"textcnn\">6.textCNN</h3>\n<figure>\n<img src=\"https://pic3.zhimg.com/80/v2-018ad2fb5cedbac69995091a3382aa26_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p><em>如上图输入每个单词用5维词向量表示，即输入的通道是5. 输入宽度是7.\n红色框卷积核宽是4\n所以得到的输出向量长度是7-4+1=4，再对通道做池化得到最后的向量进行拼接\n再使用全连接层进行业务逻辑处理例如分类</em></p>\n<ul>\n<li>使用一维卷积来捕获位置相近词的关联</li>\n<li>时序最大池化层</li>\n</ul>\n<h3 id=\"seq2seq\">7.seq2seq</h3>\n<figure>\n<img src=\"https://pic4.zhimg.com/80/v2-3d0a76f2a08c1e63a6b5e83363f449b7_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<ul>\n<li>序列到序列模型\n使用Encoder编码器生成序列到向量。Decoder解码器从向量生成文本</li>\n<li>encoder的输出是c=f(h1,\nh2...)，在计算y输出时使用了相同的背景变量c。（但例如在翻译场景输出是关联到输入的某个词的，所以引入了带注意力机制的seq2seq）</li>\n<li>输出y是一个概率模型（例如输出y1可能有 “越”\n50%可能性、“跃”10%可能性、......）选择哪一个值有三种方式。</li>\n<li>贪婪搜索 只取概率最大的\n，但是这种情况并非能取到全局最优解。因为前几个词选择直接影响到后面几个词。</li>\n<li>穷举搜索 量太大了。。</li>\n<li>束搜索 束宽k 每次取前k个 最后在候选取分最高得。</li>\n</ul>\n<h3 id=\"attention注意力机制\">8.Attention注意力机制</h3>\n<figure>\n<img src=\"https://pic2.zhimg.com/80/v2-458a9f90e229afda50492fe07e820e25_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<figure>\n<img src=\"https://pic1.zhimg.com/80/v2-d86bb49f50f76ffc04a0d35efb362358_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<ul>\n<li>如上图可以看出decoder的输出受到上一时刻输出、上一时刻隐含层变量和当前时间步背景向量影响。背景向量即所有编码器隐含层的加权平均得到。ci即为背景向量。</li>\n<li>ci最终是由解码器在i-1时刻的隐藏状态和编码器在j时刻的隐藏状态得到，具体怎么组合原文中提供了三种方法（第一种类似直接求内积..）：</li>\n</ul>\n<figure>\n<img src=\"https://pic1.zhimg.com/80/v2-626705b15c5ecde49eb8423f380da928_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<ul>\n<li>得到了输入所需要得<strong>上一时刻输出、上一时刻隐含层变量和当前时间步背景向量</strong>后，接下来就是如何组合这三个输入得到输出。使用门控循环单元进行组合。</li>\n</ul>\n<h3 id=\"transform\">9.Transform</h3>\n<p>变换器模型不同于RNN的架构（下一步计算都依赖前一步的输出，无法并行）。使用矩阵运算得到计算效率更高的模型。</p>\n<figure>\n<img src=\"https://pic4.zhimg.com/80/v2-6f091d417fdc6eeeafa7c520b5c8a8d7_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>最终的公式：</p>\n<figure>\n<img src=\"https://pic1.zhimg.com/80/v2-d9060c49cb9fc6fca8d3dfe18e1ee460_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<ul>\n<li>由上图得到对于输入x分别通过三个不同的矩阵得到q（检索项）k（键值项）v（值项）。q1项分别与其他几个键值项点乘再得到所有q1计算得到的值求softmax，再和v值项相乘求和。同样得得到q2、q3、q4得出结果。该计算得过程是并行的。</li>\n<li>多头注意力机制即每个x输入将会输出多组q k\nv如下图，计算规则基本一致。</li>\n</ul>\n<figure>\n<img src=\"https://pic2.zhimg.com/80/v2-d62fd9134fd608aa3ca44883dadf84c1_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<ul>\n<li>通过上述描述可以看出在计算过程中没有词的位置信息。所以在进行x-&gt;a的变换过程中，将a增加位置信息编码。</li>\n<li>完整Transform</li>\n</ul>\n<figure>\n<img src=\"https://pic2.zhimg.com/80/v2-3d4f17d18143c6851357f27124bcab15_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<h3 id=\"语言模型预训练方法elmo\">10.语言模型预训练方法ELMO</h3>\n<figure>\n<img src=\"https://pic2.zhimg.com/80/v2-7ff59c3d2c7f98cc8013d6ab12905ecd_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<ul>\n<li>elmo使用双向rnn对文本进行训练得到中间层向量抽取后进行组合。组合的参数也是学出来了。原论文中r'n'n部分使用lstm实现</li>\n</ul>\n<h3 id=\"语言模型预训练方法bert\">11.语言模型预训练方法BERT</h3>\n<ul>\n<li>Bert使用transform的encoder部分，所以可以进行无标签学习</li>\n<li>bert训练方法一\n有15%的字会被MASK隐藏，这样学出来的被遮挡的词就会有相似的词向量。</li>\n</ul>\n<figure>\n<img src=\"https://pic2.zhimg.com/80/v2-faf5e9f13cb1c4335f51171ae2ddd1d1_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<ul>\n<li>bert训练方法二 句子是否是相邻的判断。用SEP进行链接</li>\n</ul>\n<figure>\n<img src=\"https://pic3.zhimg.com/80/v2-c86d61bb43209f2d2a109f7b7351624a_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<ul>\n<li>ERNIE\n由上述可以看出Bert是对字进行MASK，对于中文场景进行的词MASK更合理，如下图。目前百度paddlepaddle已经发布开源版本。</li>\n</ul>\n<figure>\n<img src=\"https://pic4.zhimg.com/80/v2-5e91252408d0539d2090815f2084638f_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<h3 id=\"语言模型预训练方法gpt\">12.语言模型预训练方法GPT</h3>\n<ul>\n<li>使用transform的decoder部分。</li>\n<li>目前最大模型是1.5G 但是没有release最终版本</li>\n</ul>\n<h3 id=\"词向量计算相关模型word2vec和glove-fasttext\">13.词向量计算相关模型word2vec和glove\nfasttext</h3>\n<hr>\n<h3 id=\"about-me\">About ME</h3>\n<h5 id=\"读书城南-在未来面前我们都是孩子\">👋 读书城南，🤔\n在未来面前，我们都是孩子～</h5>\n<ul>\n<li>📙\n一个热衷于探索学习新方向、新事物的智能产品经理，闲暇时间喜欢coding💻、画图🎨、音乐🎵、学习ing~</li>\n</ul>\n<h5 id=\"social-media\">👋 Social Media</h5>\n<ul>\n<li><p>🛠️ Blog: <a href=\"http://oceaneyes.top\">http://oceaneyes.top</a></p></li>\n<li><p>⚡ PM导航: <a href=\"https://pmhub.oceangzy.top\">https://pmhub.oceangzy.top</a></p></li>\n<li><p>☘️ CNBLOG: <a href=\"https://www.cnblogs.com/oceaneyes-gzy/\">https://www.cnblogs.com/oceaneyes-gzy/</a></p></li>\n<li><p>🌱 AI PRJ自己部署的一些算法demo: <a href=\"http://ai.oceangzy.top/\">http://ai.oceangzy.top/</a></p></li>\n<li><p>📫 Email: 1450136519@qq.com</p></li>\n<li><p>💬 WeChat: <a href=\"https://oceaneyes.top/img/wechatqrcode.jpg\">OCEANGZY</a></p></li>\n<li><p>💬 公众号: <a href=\"https://oceaneyes.top/img/wechatgzh.jpeg\">UncleJoker-GZY</a></p></li>\n</ul>\n<h5 id=\"加入小组\">👋 加入小组~</h5>\n<p><img src=\"https://oceaneyes.top/img/zhishigroup.jpg\" title=\"加入组织\" alt width=\"240\"></p>\n<h5 id=\"感谢打赏\">👋 感谢打赏~</h5>\n<p><img src=\"https://oceaneyes.top/img/alipay.jpg\" title=\"支付宝打赏\" alt width=\"140\">\n<img src=\"https://oceaneyes.top/img/wechatpay.jpg\" title=\"微信打赏\" alt width=\"140\"></p>\n","more":"<h2 id=\"自然语言的几个重要模型-学习记录\">自然语言的几个重要模型-学习记录</h2>\n<ul>\n<li>循环神经网络 (序列模型序列依赖问题)</li>\n<li>双向循环神经网络（输入序列正向和反向依赖问题）</li>\n<li>深度双向循环神经网络</li>\n<li>LSTM（梯度消失问题）</li>\n<li>GRU</li>\n<li>text CNN（一维卷积和池化）</li>\n<li>seq2seq（序列到序列问题）</li>\n<li>Attention（decoder对encoder输入序列注意力问题，从输入获取可用信息）</li>\n<li>Transform（对输入的序列分成q检索项 k键项\nv值项进行计算，矩阵并行计算）</li>\n<li>语言预训练方法ELMO （使用双向rnn组合中间层权重）</li>\n<li>语言预训练方法BERT ERNIE （使用transform\nencoder部分无需标签，ERNIE主要处理中文场景按词mask）</li>\n<li>语言预训练方法GPT （使用transform decoder部分）</li>\n</ul>\n<h3 id=\"循环神经网络\">1.循环神经网络</h3>\n<figure>\n<img src=\"https://pic2.zhimg.com/80/v2-6d3c95a028c3c39ef914578c28761f4d_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<ul>\n<li>使用隐藏层保留之前时间步的信息</li>\n<li><strong>梯度裁剪</strong>\n处理梯度爆炸问题，即超出阈值怎重置为阈值。因为在RNN中目标函数有关隐藏状态的梯度会因为时间步数较大或时间步较小而变大。</li>\n</ul>\n<h3 id=\"双向循环神经网络\">2.双向循环神经网络</h3>\n<figure>\n<img src=\"https://pic1.zhimg.com/80/v2-c867b8b44ac1523c5bcd57892d82c410_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p><em>（橘色的实线和虚线分别是前向传递和后向传递的过程 ）</em></p>\n<ul>\n<li>通常RNN输入序列是按顺序输入，但此时就会丢失从后往前的数据。双向RNN就是前后各有一个网络，对各自输出的向量进行整合。</li>\n</ul>\n<h3 id=\"深度双向循环神经网络\">3.深度双向循环神经网络</h3>\n<figure>\n<img src=\"https://pic4.zhimg.com/80/v2-f0cefee0daa2b03db7ab82d6041255db_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<ul>\n<li>叠加多层双向RNN</li>\n</ul>\n<h3 id=\"lstm\">4.LSTM</h3>\n<figure>\n<img src=\"https://pic2.zhimg.com/80/v2-4722529b9d834e3f33d9c69c357a131d_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<figure>\n<img src=\"https://pic2.zhimg.com/80/v2-091d6c59f1470d69b02e5706c6e8826d_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<ul>\n<li>包含了三个门，输入门 输出门 遗忘门</li>\n<li>缓解了梯度消失的问题</li>\n</ul>\n<h3 id=\"gru\">5.GRU</h3>\n<figure>\n<img src=\"https://pic3.zhimg.com/80/v2-1b198e023a6d37e62007f2194968345a_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<ul>\n<li>包含重置门和更新门</li>\n<li>缓解了梯度消失的问题</li>\n</ul>\n<h3 id=\"textcnn\">6.textCNN</h3>\n<figure>\n<img src=\"https://pic3.zhimg.com/80/v2-018ad2fb5cedbac69995091a3382aa26_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p><em>如上图输入每个单词用5维词向量表示，即输入的通道是5. 输入宽度是7.\n红色框卷积核宽是4\n所以得到的输出向量长度是7-4+1=4，再对通道做池化得到最后的向量进行拼接\n再使用全连接层进行业务逻辑处理例如分类</em></p>\n<ul>\n<li>使用一维卷积来捕获位置相近词的关联</li>\n<li>时序最大池化层</li>\n</ul>\n<h3 id=\"seq2seq\">7.seq2seq</h3>\n<figure>\n<img src=\"https://pic4.zhimg.com/80/v2-3d0a76f2a08c1e63a6b5e83363f449b7_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<ul>\n<li>序列到序列模型\n使用Encoder编码器生成序列到向量。Decoder解码器从向量生成文本</li>\n<li>encoder的输出是c=f(h1,\nh2...)，在计算y输出时使用了相同的背景变量c。（但例如在翻译场景输出是关联到输入的某个词的，所以引入了带注意力机制的seq2seq）</li>\n<li>输出y是一个概率模型（例如输出y1可能有 “越”\n50%可能性、“跃”10%可能性、......）选择哪一个值有三种方式。</li>\n<li>贪婪搜索 只取概率最大的\n，但是这种情况并非能取到全局最优解。因为前几个词选择直接影响到后面几个词。</li>\n<li>穷举搜索 量太大了。。</li>\n<li>束搜索 束宽k 每次取前k个 最后在候选取分最高得。</li>\n</ul>\n<h3 id=\"attention注意力机制\">8.Attention注意力机制</h3>\n<figure>\n<img src=\"https://pic2.zhimg.com/80/v2-458a9f90e229afda50492fe07e820e25_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<figure>\n<img src=\"https://pic1.zhimg.com/80/v2-d86bb49f50f76ffc04a0d35efb362358_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<ul>\n<li>如上图可以看出decoder的输出受到上一时刻输出、上一时刻隐含层变量和当前时间步背景向量影响。背景向量即所有编码器隐含层的加权平均得到。ci即为背景向量。</li>\n<li>ci最终是由解码器在i-1时刻的隐藏状态和编码器在j时刻的隐藏状态得到，具体怎么组合原文中提供了三种方法（第一种类似直接求内积..）：</li>\n</ul>\n<figure>\n<img src=\"https://pic1.zhimg.com/80/v2-626705b15c5ecde49eb8423f380da928_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<ul>\n<li>得到了输入所需要得<strong>上一时刻输出、上一时刻隐含层变量和当前时间步背景向量</strong>后，接下来就是如何组合这三个输入得到输出。使用门控循环单元进行组合。</li>\n</ul>\n<h3 id=\"transform\">9.Transform</h3>\n<p>变换器模型不同于RNN的架构（下一步计算都依赖前一步的输出，无法并行）。使用矩阵运算得到计算效率更高的模型。</p>\n<figure>\n<img src=\"https://pic4.zhimg.com/80/v2-6f091d417fdc6eeeafa7c520b5c8a8d7_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>最终的公式：</p>\n<figure>\n<img src=\"https://pic1.zhimg.com/80/v2-d9060c49cb9fc6fca8d3dfe18e1ee460_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<ul>\n<li>由上图得到对于输入x分别通过三个不同的矩阵得到q（检索项）k（键值项）v（值项）。q1项分别与其他几个键值项点乘再得到所有q1计算得到的值求softmax，再和v值项相乘求和。同样得得到q2、q3、q4得出结果。该计算得过程是并行的。</li>\n<li>多头注意力机制即每个x输入将会输出多组q k\nv如下图，计算规则基本一致。</li>\n</ul>\n<figure>\n<img src=\"https://pic2.zhimg.com/80/v2-d62fd9134fd608aa3ca44883dadf84c1_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<ul>\n<li>通过上述描述可以看出在计算过程中没有词的位置信息。所以在进行x-&gt;a的变换过程中，将a增加位置信息编码。</li>\n<li>完整Transform</li>\n</ul>\n<figure>\n<img src=\"https://pic2.zhimg.com/80/v2-3d4f17d18143c6851357f27124bcab15_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<h3 id=\"语言模型预训练方法elmo\">10.语言模型预训练方法ELMO</h3>\n<figure>\n<img src=\"https://pic2.zhimg.com/80/v2-7ff59c3d2c7f98cc8013d6ab12905ecd_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<ul>\n<li>elmo使用双向rnn对文本进行训练得到中间层向量抽取后进行组合。组合的参数也是学出来了。原论文中r'n'n部分使用lstm实现</li>\n</ul>\n<h3 id=\"语言模型预训练方法bert\">11.语言模型预训练方法BERT</h3>\n<ul>\n<li>Bert使用transform的encoder部分，所以可以进行无标签学习</li>\n<li>bert训练方法一\n有15%的字会被MASK隐藏，这样学出来的被遮挡的词就会有相似的词向量。</li>\n</ul>\n<figure>\n<img src=\"https://pic2.zhimg.com/80/v2-faf5e9f13cb1c4335f51171ae2ddd1d1_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<ul>\n<li>bert训练方法二 句子是否是相邻的判断。用SEP进行链接</li>\n</ul>\n<figure>\n<img src=\"https://pic3.zhimg.com/80/v2-c86d61bb43209f2d2a109f7b7351624a_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<ul>\n<li>ERNIE\n由上述可以看出Bert是对字进行MASK，对于中文场景进行的词MASK更合理，如下图。目前百度paddlepaddle已经发布开源版本。</li>\n</ul>\n<figure>\n<img src=\"https://pic4.zhimg.com/80/v2-5e91252408d0539d2090815f2084638f_720w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<h3 id=\"语言模型预训练方法gpt\">12.语言模型预训练方法GPT</h3>\n<ul>\n<li>使用transform的decoder部分。</li>\n<li>目前最大模型是1.5G 但是没有release最终版本</li>\n</ul>\n<h3 id=\"词向量计算相关模型word2vec和glove-fasttext\">13.词向量计算相关模型word2vec和glove\nfasttext</h3>\n<hr>\n<h3 id=\"about-me\">About ME</h3>\n<h5 id=\"读书城南-在未来面前我们都是孩子\">👋 读书城南，🤔\n在未来面前，我们都是孩子～</h5>\n<ul>\n<li>📙\n一个热衷于探索学习新方向、新事物的智能产品经理，闲暇时间喜欢coding💻、画图🎨、音乐🎵、学习ing~</li>\n</ul>\n<h5 id=\"social-media\">👋 Social Media</h5>\n<ul>\n<li><p>🛠️ Blog: <a href=\"http://oceaneyes.top\">http://oceaneyes.top</a></p></li>\n<li><p>⚡ PM导航: <a href=\"https://pmhub.oceangzy.top\">https://pmhub.oceangzy.top</a></p></li>\n<li><p>☘️ CNBLOG: <a href=\"https://www.cnblogs.com/oceaneyes-gzy/\">https://www.cnblogs.com/oceaneyes-gzy/</a></p></li>\n<li><p>🌱 AI PRJ自己部署的一些算法demo: <a href=\"http://ai.oceangzy.top/\">http://ai.oceangzy.top/</a></p></li>\n<li><p>📫 Email: 1450136519@qq.com</p></li>\n<li><p>💬 WeChat: <a href=\"https://oceaneyes.top/img/wechatqrcode.jpg\">OCEANGZY</a></p></li>\n<li><p>💬 公众号: <a href=\"https://oceaneyes.top/img/wechatgzh.jpeg\">UncleJoker-GZY</a></p></li>\n</ul>\n<h5 id=\"加入小组\">👋 加入小组~</h5>\n<p><img src=\"https://oceaneyes.top/img/zhishigroup.jpg\" title=\"加入组织\" alt width=\"240\"></p>\n<h5 id=\"感谢打赏\">👋 感谢打赏~</h5>\n<p><img src=\"https://oceaneyes.top/img/alipay.jpg\" title=\"支付宝打赏\" alt width=\"140\">\n<img src=\"https://oceaneyes.top/img/wechatpay.jpg\" title=\"微信打赏\" alt width=\"140\"></p>\n","categories":[{"name":"Artificial Intelligence","path":"api/categories/Artificial Intelligence.json"},{"name":"Natural Language Processing","path":"api/categories/Natural Language Processing.json"}],"tags":[{"name":"Artificial Intelligence","path":"api/tags/Artificial Intelligence.json"},{"name":"Natural Language Processing","path":"api/tags/Natural Language Processing.json"}]}