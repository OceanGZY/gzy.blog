{"title":"决策树demo","slug":"决策树demo","date":"2020-12-31T15:19:00.000Z","updated":"2022-09-30T06:56:37.190Z","comments":true,"path":"api/articles/决策树demo.json","excerpt":null,"covers":["/.top//attachment:b820e520-1b96-4c05-ad79-c74b7cbda53f.png","/.top//attachment:5676c0e4-d930-4b1a-9c6d-afb2deaa6efc.png","/.top//attachment:d3b072f3-7a1b-4d05-b262-6a399d408f43.png","https://oceaneyes.top/img/zhishigroup.jpg","https://oceaneyes.top/img/alipay.jpg","https://oceaneyes.top/img/wechatpay.jpg"],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"决策树\">决策树</h2>\n<h3 id=\"决策树的一个重要任务是为了数据中所蕴含的知识信息\">决策树的一个重要任务是为了数据中所蕴含的知识信息</h3>\n<ul>\n<li>决策树可以使用不熟悉的数据集合，并从中提取出一系列规则，在这些机器根据数据集创建规则时，就是机器学习的过程</li>\n<li>k-近邻算法可以完成很多分类任务，但是它最大的缺点就是无法给出数据的内在含义，决策树的主要优势就在于数据形式非常容易理解</li>\n</ul>\n<h4 id=\"决策数的构造\">决策数的构造</h4>\n<ul>\n<li>优点：计算复杂度不高，输出结果易于理解，对中间值对缺失不敏感，可处理不相关特征数据</li>\n<li>缺点：可能会产生过度匹配的问题</li>\n<li>适用数据类型：数值型和 标称型</li>\n</ul>\n<p><strong>构建决策树的第一个问题：当前数据集上哪个特征在划分数据分类时起决定性作用</strong></p>\n<ul>\n<li>为了找到决定性的特征，划分出最好的结果，我们必须评估每个特征。</li>\n<li>完成测试之后，原始数据集就被划分为几个数据子集</li>\n<li>这些数据子集会分布在第一个决策点的所有分支上。如果某个分支下的数据属于同一类型，则当前条件已经正确地划分数据分类，\n无需进一步对数据集进行分割。</li>\n<li>如果数据子集内的数据不属于同一类型，则需要重复划分数据子集的过程</li>\n</ul>\n<p><strong>思路</strong> 检测数据集中的每个子项是否属于同一分类: If so\nreturn 类标签; Else 寻找划分数据集的最好特征 划分数据集 创建分支节点 for\n每个划分的子集 调用函数createBranch并增加返回结果到分支节点中 return\n分支节点</p>\n<p><strong>决策树的一般流程</strong></p>\n<ol type=\"1\">\n<li>收集数据：可使用任何方法</li>\n<li>准备数据：构造算法只适用于标称型数据， 因此数值型数据必须离散化</li>\n<li>分析数据：可使用任何方法，构造树完成后，应检查图形是否符合预期</li>\n<li>训练算法：构造树的数据结构</li>\n<li>测试算法：使用经验树计算错误概率</li>\n<li>使用算法：此步骤可以适用于任何监督学习算法，决策树可以更好地理解数据的内在含义</li>\n</ol>\n<h4 id=\"信息增益information-gain和香农熵熵entropy\">信息增益(information\ngain)和香农熵/熵(entropy)</h4>\n<figure>\n<img src=\"/.top//attachment:b820e520-1b96-4c05-ad79-c74b7cbda53f.png\" alt=\"image.png\">\n<figcaption aria-hidden=\"true\">image.png</figcaption>\n</figure>\n<p>另一个度量集合无序程度的方法是基尼不纯度1(Gini\nimpurity)，简单地说就是从一个数据集中随机选取子项，度量其被错误分类到其他分组里的概率</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> math <span class=\"im\">import</span> log</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> operator</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> calcShannonEnt(dataSet):</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    numEntries <span class=\"op\">=</span> <span class=\"bu\">len</span>(dataSet)</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\"># 为所有可能分类创建字典</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    labelCounts<span class=\"op\">=</span> &#123;&#125;</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> featVec <span class=\"kw\">in</span> dataSet:</span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        currentLabel <span class=\"op\">=</span> featVec[<span class=\"op\">-</span><span class=\"dv\">1</span>]</span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> currentLabel <span class=\"kw\">not</span> <span class=\"kw\">in</span> labelCounts.keys():</span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>            labelCounts[currentLabel] <span class=\"op\">=</span> <span class=\"dv\">0</span></span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        labelCounts[currentLabel] <span class=\"op\">+=</span> <span class=\"dv\">1</span></span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    shannonEnt <span class=\"op\">=</span> <span class=\"fl\">0.0</span></span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> key <span class=\"kw\">in</span> labelCounts:</span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>        prob <span class=\"op\">=</span> <span class=\"bu\">float</span>(labelCounts[key])<span class=\"op\">/</span>numEntries</span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>        shannonEnt <span class=\"op\">-=</span> prob <span class=\"op\">*</span> log(prob,<span class=\"dv\">2</span>)   <span class=\"co\"># 以 2为底求对数</span></span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> shannonEnt     </span></code></pre></div>\n<figure>\n<img src=\"/.top//attachment:5676c0e4-d930-4b1a-9c6d-afb2deaa6efc.png\" alt=\"image.png\">\n<figcaption aria-hidden=\"true\">image.png</figcaption>\n</figure>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> createDataSet():</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    dataSet <span class=\"op\">=</span> [</span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>        [<span class=\"dv\">1</span>,<span class=\"dv\">1</span>,<span class=\"st\">&#39;yes&#39;</span>],</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>        [<span class=\"dv\">1</span>,<span class=\"dv\">1</span>,<span class=\"st\">&#39;yes&#39;</span>],</span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>        [<span class=\"dv\">1</span>,<span class=\"dv\">0</span>,<span class=\"st\">&#39;no&#39;</span>],</span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        [<span class=\"dv\">0</span>,<span class=\"dv\">1</span>,<span class=\"st\">&#39;no&#39;</span>],</span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        [<span class=\"dv\">0</span>,<span class=\"dv\">1</span>,<span class=\"st\">&#39;no&#39;</span>]</span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    ]  </span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    labels <span class=\"op\">=</span> [<span class=\"st\">&#39;no surfacing&#39;</span>,<span class=\"st\">&#39;flippers&#39;</span>]</span>\n<span id=\"cb3-10\"><a href=\"#cb3-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> dataSet ,labels</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>myData, labels <span class=\"op\">=</span> createDataSet()</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>myData</span></code></pre></div>\n<pre><code>[[1, 1, &#39;yes&#39;], [1, 1, &#39;yes&#39;], [1, 0, &#39;no&#39;], [0, 1, &#39;no&#39;], [0, 1, &#39;no&#39;]]</code></pre>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb7-1\"><a href=\"#cb7-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>labels</span></code></pre></div>\n<pre><code>[&#39;no surfacing&#39;, &#39;flippers&#39;]</code></pre>\n<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb9-1\"><a href=\"#cb9-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>calcShannonEnt(myData)</span></code></pre></div>\n<pre><code>0.9709505944546686</code></pre>\n<p>熵越高，则混合的数据也越多</p>\n<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb11-1\"><a href=\"#cb11-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>myData[<span class=\"dv\">0</span>][<span class=\"op\">-</span><span class=\"dv\">1</span>] <span class=\"op\">=</span> <span class=\"st\">&#39;maybe&#39;</span></span>\n<span id=\"cb11-2\"><a href=\"#cb11-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>myData</span></code></pre></div>\n<pre><code>[[1, 1, &#39;maybe&#39;], [1, 1, &#39;yes&#39;], [1, 0, &#39;no&#39;], [0, 1, &#39;no&#39;], [0, 1, &#39;no&#39;]]</code></pre>\n<div class=\"sourceCode\" id=\"cb13\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb13-1\"><a href=\"#cb13-1\" aria-hidden=\"true\" tabindex=\"-1\"></a> calcShannonEnt(myData)</span></code></pre></div>\n<pre><code>1.3709505944546687</code></pre>\n<h4 id=\"划分数据集\">划分数据集</h4>\n<ul>\n<li>分类算法除了需要测量信息熵，还需要划分数据集，\n度量划分数据集的熵，以便判断当前是否正确地划分了数据集</li>\n<li>将对每个特征划分数\n据集的结果计算一次信息熵，然后判断按照哪个特征划分数据集是最好的划分方式</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb15\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb15-1\"><a href=\"#cb15-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># 按照给定特征划分数据集</span></span>\n<span id=\"cb15-2\"><a href=\"#cb15-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># 输入参数： 待划分待数据集、划分数据集的特征、需要返回的特征的值</span></span>\n<span id=\"cb15-3\"><a href=\"#cb15-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> splitDataSet(dataSet,axis,value):</span>\n<span id=\"cb15-4\"><a href=\"#cb15-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    retDataSet <span class=\"op\">=</span> []</span>\n<span id=\"cb15-5\"><a href=\"#cb15-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> featVec <span class=\"kw\">in</span> dataSet:</span>\n<span id=\"cb15-6\"><a href=\"#cb15-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">print</span>(<span class=\"st\">&quot;featVec&quot;</span>,featVec)</span>\n<span id=\"cb15-7\"><a href=\"#cb15-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> featVec[axis] <span class=\"op\">==</span> value:</span>\n<span id=\"cb15-8\"><a href=\"#cb15-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"bu\">print</span>(<span class=\"st\">&quot;axis&quot;</span>,axis,<span class=\"st\">&quot;featVec[axis]&quot;</span>,featVec[axis])</span>\n<span id=\"cb15-9\"><a href=\"#cb15-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>            reducedFeatVec <span class=\"op\">=</span> featVec[:axis]</span>\n<span id=\"cb15-10\"><a href=\"#cb15-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"bu\">print</span>(<span class=\"st\">&quot;axis&quot;</span>,axis,<span class=\"st\">&quot;reducedFeatVec:&quot;</span>,reducedFeatVec)</span>\n<span id=\"cb15-11\"><a href=\"#cb15-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>            reducedFeatVec.extend(featVec[axis<span class=\"op\">+</span><span class=\"dv\">1</span>:])</span>\n<span id=\"cb15-12\"><a href=\"#cb15-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"bu\">print</span>(<span class=\"st\">&quot;featVec[axis+1:]&quot;</span>,featVec[axis<span class=\"op\">+</span><span class=\"dv\">1</span>:])</span>\n<span id=\"cb15-13\"><a href=\"#cb15-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"bu\">print</span>(<span class=\"st\">&quot;axis&quot;</span>,axis,<span class=\"st\">&quot;reducedFeatVec:&quot;</span>,reducedFeatVec)</span>\n<span id=\"cb15-14\"><a href=\"#cb15-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>            retDataSet.append(reducedFeatVec)</span>\n<span id=\"cb15-15\"><a href=\"#cb15-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> retDataSet</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb16\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb16-1\"><a href=\"#cb16-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>myData, labels <span class=\"op\">=</span> createDataSet()</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb17\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb17-1\"><a href=\"#cb17-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>myData</span></code></pre></div>\n<pre><code>[[1, 1, &#39;yes&#39;], [1, 1, &#39;yes&#39;], [1, 0, &#39;no&#39;], [0, 1, &#39;no&#39;], [0, 1, &#39;no&#39;]]</code></pre>\n<div class=\"sourceCode\" id=\"cb19\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb19-1\"><a href=\"#cb19-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>labels</span></code></pre></div>\n<pre><code>[&#39;no surfacing&#39;, &#39;flippers&#39;]</code></pre>\n<div class=\"sourceCode\" id=\"cb21\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb21-1\"><a href=\"#cb21-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>splitDataSet(myData,<span class=\"dv\">0</span>,<span class=\"dv\">1</span>)</span></code></pre></div>\n<pre><code>featVec [1, 1, &#39;yes&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;yes&#39;]\naxis 0 reducedFeatVec: [1, &#39;yes&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;yes&#39;]\naxis 0 reducedFeatVec: [1, &#39;yes&#39;]\nfeatVec [1, 0, &#39;no&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [0, &#39;no&#39;]\naxis 0 reducedFeatVec: [0, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\n\n\n\n\n\n[[1, &#39;yes&#39;], [1, &#39;yes&#39;], [0, &#39;no&#39;]]</code></pre>\n<div class=\"sourceCode\" id=\"cb23\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb23-1\"><a href=\"#cb23-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>splitDataSet(myData,<span class=\"dv\">0</span>,<span class=\"dv\">0</span>)</span></code></pre></div>\n<pre><code>featVec [1, 1, &#39;yes&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\nfeatVec [1, 0, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\naxis 0 featVec[axis] 0\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;no&#39;]\naxis 0 reducedFeatVec: [1, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\naxis 0 featVec[axis] 0\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;no&#39;]\naxis 0 reducedFeatVec: [1, &#39;no&#39;]\n\n\n\n\n\n[[1, &#39;no&#39;], [1, &#39;no&#39;]]</code></pre>\n<div class=\"sourceCode\" id=\"cb25\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb25-1\"><a href=\"#cb25-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># 测试</span></span>\n<span id=\"cb25-2\"><a href=\"#cb25-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>a <span class=\"op\">=</span> [<span class=\"dv\">1</span>,<span class=\"dv\">2</span>,<span class=\"dv\">3</span>]</span>\n<span id=\"cb25-3\"><a href=\"#cb25-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>b <span class=\"op\">=</span> [<span class=\"dv\">4</span>,<span class=\"dv\">5</span>,<span class=\"dv\">6</span>]</span>\n<span id=\"cb25-4\"><a href=\"#cb25-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>a.append(b)</span>\n<span id=\"cb25-5\"><a href=\"#cb25-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>a</span></code></pre></div>\n<pre><code>[1, 2, 3, [4, 5, 6]]</code></pre>\n<div class=\"sourceCode\" id=\"cb27\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb27-1\"><a href=\"#cb27-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># 测试</span></span>\n<span id=\"cb27-2\"><a href=\"#cb27-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>a <span class=\"op\">=</span> [<span class=\"dv\">1</span>,<span class=\"dv\">2</span>,<span class=\"dv\">3</span>]</span>\n<span id=\"cb27-3\"><a href=\"#cb27-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>b <span class=\"op\">=</span> [<span class=\"dv\">4</span>,<span class=\"dv\">5</span>,<span class=\"dv\">6</span>]</span>\n<span id=\"cb27-4\"><a href=\"#cb27-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>a.extend(b)</span>\n<span id=\"cb27-5\"><a href=\"#cb27-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>a</span></code></pre></div>\n<pre><code>[1, 2, 3, 4, 5, 6]</code></pre>\n<div class=\"sourceCode\" id=\"cb29\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb29-1\"><a href=\"#cb29-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">len</span>(myData[<span class=\"dv\">0</span>])<span class=\"op\">-</span><span class=\"dv\">1</span></span></code></pre></div>\n<pre><code>2</code></pre>\n<div class=\"sourceCode\" id=\"cb31\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb31-1\"><a href=\"#cb31-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># 选择最好的数据集划分方式</span></span>\n<span id=\"cb31-2\"><a href=\"#cb31-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> chooseBestFeatureToSplit(dataSet):</span>\n<span id=\"cb31-3\"><a href=\"#cb31-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    numFeatures <span class=\"op\">=</span> <span class=\"bu\">len</span>(dataSet[<span class=\"dv\">0</span>])<span class=\"op\">-</span><span class=\"dv\">1</span>  <span class=\"co\">#特征的个数</span></span>\n<span id=\"cb31-4\"><a href=\"#cb31-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    baseEntropy <span class=\"op\">=</span> calcShannonEnt(dataSet) <span class=\"co\"># 基线熵</span></span>\n<span id=\"cb31-5\"><a href=\"#cb31-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(<span class=\"st\">&quot;baseEntropy:&quot;</span>,baseEntropy)</span>\n<span id=\"cb31-6\"><a href=\"#cb31-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    bestInfoGain <span class=\"op\">=</span> <span class=\"fl\">0.0</span></span>\n<span id=\"cb31-7\"><a href=\"#cb31-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    bestFeature <span class=\"op\">=</span> <span class=\"op\">-</span><span class=\"dv\">1</span></span>\n<span id=\"cb31-8\"><a href=\"#cb31-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\"># 创建唯一的分类标签</span></span>\n<span id=\"cb31-9\"><a href=\"#cb31-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> i <span class=\"kw\">in</span> <span class=\"bu\">range</span>(numFeatures):</span>\n<span id=\"cb31-10\"><a href=\"#cb31-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>        featList <span class=\"op\">=</span> [example[i] <span class=\"cf\">for</span> example <span class=\"kw\">in</span> dataSet]</span>\n<span id=\"cb31-11\"><a href=\"#cb31-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">print</span>(<span class=\"st\">&quot;featList:&quot;</span>,featList)</span>\n<span id=\"cb31-12\"><a href=\"#cb31-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>        uniqueVals <span class=\"op\">=</span>  <span class=\"bu\">set</span>(featList)</span>\n<span id=\"cb31-13\"><a href=\"#cb31-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">print</span>(<span class=\"st\">&quot;uniqueVals:&quot;</span>,uniqueVals)</span>\n<span id=\"cb31-14\"><a href=\"#cb31-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb31-15\"><a href=\"#cb31-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"co\"># 计算每种划分方式的信息熵</span></span>\n<span id=\"cb31-16\"><a href=\"#cb31-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>        newEntropy <span class=\"op\">=</span> <span class=\"fl\">0.0</span></span>\n<span id=\"cb31-17\"><a href=\"#cb31-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">for</span> value <span class=\"kw\">in</span> uniqueVals:</span>\n<span id=\"cb31-18\"><a href=\"#cb31-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>            subDataSet <span class=\"op\">=</span> splitDataSet(dataSet, i ,value)</span>\n<span id=\"cb31-19\"><a href=\"#cb31-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>            prob <span class=\"op\">=</span> <span class=\"bu\">len</span>(subDataSet) <span class=\"op\">/</span> <span class=\"bu\">float</span>(<span class=\"bu\">len</span>(dataSet))</span>\n<span id=\"cb31-20\"><a href=\"#cb31-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>            newEntropy <span class=\"op\">+=</span> prob <span class=\"op\">*</span> calcShannonEnt(subDataSet)</span>\n<span id=\"cb31-21\"><a href=\"#cb31-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>        infoGain <span class=\"op\">=</span> baseEntropy <span class=\"op\">-</span> newEntropy  <span class=\"co\"># 计算信息增益</span></span>\n<span id=\"cb31-22\"><a href=\"#cb31-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">print</span>(<span class=\"st\">&quot;baseEntropy&quot;</span>,baseEntropy,<span class=\"st\">&quot;i:&quot;</span>,i,<span class=\"st\">&quot;newEntropy&quot;</span>,newEntropy,<span class=\"st\">&quot;infoGain&quot;</span>,infoGain)</span>\n<span id=\"cb31-23\"><a href=\"#cb31-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span>(infoGain <span class=\"op\">&gt;</span> bestInfoGain):</span>\n<span id=\"cb31-24\"><a href=\"#cb31-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>            bestInfoGain <span class=\"op\">=</span> infoGain   <span class=\"co\"># 计算最好的信息增益</span></span>\n<span id=\"cb31-25\"><a href=\"#cb31-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>            bestFeature <span class=\"op\">=</span> i</span>\n<span id=\"cb31-26\"><a href=\"#cb31-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> bestFeature</span></code></pre></div>\n<p>函数介绍：选取特征、划分数据集、计算得出最好的划分数据集的特征</p>\n<ul>\n<li>第一个要求是，数据必须是一种由列表元素组成的列表，而且所有的列表元素都要具有相同的数据长度;</li>\n<li>第二个要求是，数据的最后一列或者每个实例的最后一个元素是当前实例的类别标签</li>\n<li>无需限定list中的数据类型，它们既可以是数字也可以是字符串，并不影响实际计算</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb32\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb32-1\"><a href=\"#cb32-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>chooseBestFeatureToSplit(myData)</span></code></pre></div>\n<pre><code>baseEntropy: 0.9709505944546686\nfeatList: [1, 1, 1, 0, 0]\nuniqueVals: &#123;0, 1&#125;\nfeatVec [1, 1, &#39;yes&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\nfeatVec [1, 0, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\naxis 0 featVec[axis] 0\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;no&#39;]\naxis 0 reducedFeatVec: [1, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\naxis 0 featVec[axis] 0\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;no&#39;]\naxis 0 reducedFeatVec: [1, &#39;no&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;yes&#39;]\naxis 0 reducedFeatVec: [1, &#39;yes&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;yes&#39;]\naxis 0 reducedFeatVec: [1, &#39;yes&#39;]\nfeatVec [1, 0, &#39;no&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [0, &#39;no&#39;]\naxis 0 reducedFeatVec: [0, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\nbaseEntropy 0.9709505944546686 i: 0 newEntropy 0.5509775004326937 infoGain 0.4199730940219749\nfeatList: [1, 1, 0, 1, 1]\nuniqueVals: &#123;0, 1&#125;\nfeatVec [1, 1, &#39;yes&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\nfeatVec [1, 0, &#39;no&#39;]\naxis 1 featVec[axis] 0\naxis 1 reducedFeatVec: [1]\nfeatVec[axis+1:] [&#39;no&#39;]\naxis 1 reducedFeatVec: [1, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\naxis 1 featVec[axis] 1\naxis 1 reducedFeatVec: [1]\nfeatVec[axis+1:] [&#39;yes&#39;]\naxis 1 reducedFeatVec: [1, &#39;yes&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\naxis 1 featVec[axis] 1\naxis 1 reducedFeatVec: [1]\nfeatVec[axis+1:] [&#39;yes&#39;]\naxis 1 reducedFeatVec: [1, &#39;yes&#39;]\nfeatVec [1, 0, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\naxis 1 featVec[axis] 1\naxis 1 reducedFeatVec: [0]\nfeatVec[axis+1:] [&#39;no&#39;]\naxis 1 reducedFeatVec: [0, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\naxis 1 featVec[axis] 1\naxis 1 reducedFeatVec: [0]\nfeatVec[axis+1:] [&#39;no&#39;]\naxis 1 reducedFeatVec: [0, &#39;no&#39;]\nbaseEntropy 0.9709505944546686 i: 1 newEntropy 0.8 infoGain 0.17095059445466854\n\n\n\n\n\n0</code></pre>\n<h2 id=\"构建递归决策树\">构建递归决策树</h2>\n<ul>\n<li>得到原始数据集，然后基于最好的属性值划分数据集，由于特征值可能多于两个，因此可能存在大于两个分支的数据集划分。</li>\n<li>第一次划分之后，数据将被向下传递到树分支的下一个节点，在这个节点上，我们可以再次划分数据。</li>\n<li><strong>因此我们可以采用递归的原则处理数据集</strong></li>\n<li>递归结束的条件是：程序遍历完所有划分数据集的属性，或者每个分支下的所有实例都具有相同的分类</li>\n</ul>\n<figure>\n<img src=\"/.top//attachment:d3b072f3-7a1b-4d05-b262-6a399d408f43.png\" alt=\"image.png\">\n<figcaption aria-hidden=\"true\">image.png</figcaption>\n</figure>\n<div class=\"sourceCode\" id=\"cb34\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb34-1\"><a href=\"#cb34-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> majorityCnt(classList):</span>\n<span id=\"cb34-2\"><a href=\"#cb34-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    classCount <span class=\"op\">=</span> &#123;&#125;</span>\n<span id=\"cb34-3\"><a href=\"#cb34-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> vote <span class=\"kw\">in</span> classCount:</span>\n<span id=\"cb34-4\"><a href=\"#cb34-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> vote <span class=\"kw\">not</span> <span class=\"kw\">in</span> classCount.keys():</span>\n<span id=\"cb34-5\"><a href=\"#cb34-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>            classCount[vote] <span class=\"op\">=</span><span class=\"dv\">0</span></span>\n<span id=\"cb34-6\"><a href=\"#cb34-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        classCount[vote] <span class=\"op\">+=</span> <span class=\"dv\">1</span></span>\n<span id=\"cb34-7\"><a href=\"#cb34-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    sortedClassCount <span class=\"op\">=</span> <span class=\"bu\">sorted</span>(classCount.items(), key<span class=\"op\">=</span>operator.itemgetter(<span class=\"dv\">1</span>), reverse <span class=\"op\">=</span><span class=\"va\">True</span>)</span>\n<span id=\"cb34-8\"><a href=\"#cb34-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> sortedClassCount[<span class=\"dv\">0</span>][<span class=\"dv\">0</span>]</span></code></pre></div>\n<p><strong>majorityCnt() 与投票表决代码非常类似</strong></p>\n<ol type=\"1\">\n<li>该函数使用分类名称的列表，</li>\n<li>然后创建键值为classList中唯一值的数据字典，字典对象存储了classList中每个类标签出现的频率</li>\n<li>最后利用operator操作键值排序字典，并返回出现次数最多的分类名称。</li>\n</ol>\n<div class=\"sourceCode\" id=\"cb35\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb35-1\"><a href=\"#cb35-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>myData[<span class=\"dv\">0</span>]</span></code></pre></div>\n<pre><code>[1, 1, &#39;yes&#39;]</code></pre>\n<div class=\"sourceCode\" id=\"cb37\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb37-1\"><a href=\"#cb37-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># 创建决策树</span></span>\n<span id=\"cb37-2\"><a href=\"#cb37-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> createTree(dataSet,labels):</span>\n<span id=\"cb37-3\"><a href=\"#cb37-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    classList <span class=\"op\">=</span> [example[<span class=\"op\">-</span><span class=\"dv\">1</span>] <span class=\"cf\">for</span> example <span class=\"kw\">in</span> dataSet]</span>\n<span id=\"cb37-4\"><a href=\"#cb37-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(<span class=\"st\">&quot;labels:&quot;</span>,labels)</span>\n<span id=\"cb37-5\"><a href=\"#cb37-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(<span class=\"st\">&quot;classList:&quot;</span>,classList)</span>\n<span id=\"cb37-6\"><a href=\"#cb37-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(<span class=\"st\">&quot;classList[0]:&quot;</span>,classList[<span class=\"dv\">0</span>])</span>\n<span id=\"cb37-7\"><a href=\"#cb37-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(<span class=\"st\">&quot;classList.count(classList[0]):&quot;</span>,classList.count(classList[<span class=\"dv\">0</span>]))</span>\n<span id=\"cb37-8\"><a href=\"#cb37-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb37-9\"><a href=\"#cb37-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">## 类别相同则停止划分</span></span>\n<span id=\"cb37-10\"><a href=\"#cb37-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> classList.count(classList[<span class=\"dv\">0</span>]) <span class=\"op\">==</span> <span class=\"bu\">len</span>(classList):</span>\n<span id=\"cb37-11\"><a href=\"#cb37-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> classList[<span class=\"dv\">0</span>]</span>\n<span id=\"cb37-12\"><a href=\"#cb37-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb37-13\"><a href=\"#cb37-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">## 遍历完所有特征时 返回出现次数最多的</span></span>\n<span id=\"cb37-14\"><a href=\"#cb37-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"bu\">len</span>(dataSet[<span class=\"dv\">0</span>]) <span class=\"op\">==</span> <span class=\"dv\">1</span>:</span>\n<span id=\"cb37-15\"><a href=\"#cb37-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> majorityCnt(classList)</span>\n<span id=\"cb37-16\"><a href=\"#cb37-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb37-17\"><a href=\"#cb37-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    bestFeat <span class=\"op\">=</span> chooseBestFeatureToSplit(dataSet)</span>\n<span id=\"cb37-18\"><a href=\"#cb37-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>    bestFeatLabel <span class=\"op\">=</span> labels[bestFeat] </span>\n<span id=\"cb37-19\"><a href=\"#cb37-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(<span class=\"st\">&quot;bestFeatLabel&quot;</span>,bestFeatLabel)</span>\n<span id=\"cb37-20\"><a href=\"#cb37-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>    myTree <span class=\"op\">=</span> &#123;bestFeatLabel:&#123;&#125;&#125;</span>\n<span id=\"cb37-21\"><a href=\"#cb37-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(<span class=\"st\">&quot;myTree:::&quot;</span>,myTree)</span>\n<span id=\"cb37-22\"><a href=\"#cb37-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">del</span>(labels[bestFeat])</span>\n<span id=\"cb37-23\"><a href=\"#cb37-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(<span class=\"st\">&quot;labels:&quot;</span>,labels)</span>\n<span id=\"cb37-24\"><a href=\"#cb37-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>    featValues <span class=\"op\">=</span> [example[bestFeat] <span class=\"cf\">for</span> example <span class=\"kw\">in</span> dataSet]</span>\n<span id=\"cb37-25\"><a href=\"#cb37-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>    uniqueVals <span class=\"op\">=</span> <span class=\"bu\">set</span>(featValues)</span>\n<span id=\"cb37-26\"><a href=\"#cb37-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> value <span class=\"kw\">in</span> uniqueVals:</span>\n<span id=\"cb37-27\"><a href=\"#cb37-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>        subLabels <span class=\"op\">=</span> labels[:]</span>\n<span id=\"cb37-28\"><a href=\"#cb37-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">print</span>(<span class=\"st\">&quot;subLabels:&quot;</span>,subLabels)</span>\n<span id=\"cb37-29\"><a href=\"#cb37-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>        myTree[bestFeatLabel][value] <span class=\"op\">=</span> createTree(splitDataSet(dataSet, bestFeat, value),subLabels)</span>\n<span id=\"cb37-30\"><a href=\"#cb37-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> myTree</span></code></pre></div>\n<p><strong>代码注释</strong></p>\n<ul>\n<li>使用两个输入参数：数据集和标签列表</li>\n</ul>\n<ol type=\"1\">\n<li>首先创建了名为classList的列表变量，其中包含了数据集的所有类标签</li>\n<li>递归函数的第一个停止条件是所有的类标签完全相同，则直接返回该类标签</li>\n<li>递归函数的第二个停止条件是使用完了所有特征，仍然不能将数据集划分成仅包含唯一类别的分组</li>\n<li>字典变量myTree存储了树的所有信息，这对于其后绘制树形图非常重要。当前数据集选取的最好特征存储在变量bestFeat中，得到列表包含的所有属性值</li>\n<li>最后代码遍历当前选择特征包含的所有属性值，在每个数据集划分上递归调用函数\ncreateTree()，得到的返回值将被插入到字典变量myTree中</li>\n</ol>\n<div class=\"sourceCode\" id=\"cb38\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb38-1\"><a href=\"#cb38-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>myData,labels <span class=\"op\">=</span> createDataSet()</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb39\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb39-1\"><a href=\"#cb39-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>createTree(myData,labels)</span></code></pre></div>\n<pre><code>labels: [&#39;no surfacing&#39;, &#39;flippers&#39;]\nclassList: [&#39;yes&#39;, &#39;yes&#39;, &#39;no&#39;, &#39;no&#39;, &#39;no&#39;]\nclassList[0]: yes\nclassList.count(classList[0]): 2\nbaseEntropy: 0.9709505944546686\nfeatList: [1, 1, 1, 0, 0]\nuniqueVals: &#123;0, 1&#125;\nfeatVec [1, 1, &#39;yes&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\nfeatVec [1, 0, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\naxis 0 featVec[axis] 0\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;no&#39;]\naxis 0 reducedFeatVec: [1, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\naxis 0 featVec[axis] 0\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;no&#39;]\naxis 0 reducedFeatVec: [1, &#39;no&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;yes&#39;]\naxis 0 reducedFeatVec: [1, &#39;yes&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;yes&#39;]\naxis 0 reducedFeatVec: [1, &#39;yes&#39;]\nfeatVec [1, 0, &#39;no&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [0, &#39;no&#39;]\naxis 0 reducedFeatVec: [0, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\nbaseEntropy 0.9709505944546686 i: 0 newEntropy 0.5509775004326937 infoGain 0.4199730940219749\nfeatList: [1, 1, 0, 1, 1]\nuniqueVals: &#123;0, 1&#125;\nfeatVec [1, 1, &#39;yes&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\nfeatVec [1, 0, &#39;no&#39;]\naxis 1 featVec[axis] 0\naxis 1 reducedFeatVec: [1]\nfeatVec[axis+1:] [&#39;no&#39;]\naxis 1 reducedFeatVec: [1, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\naxis 1 featVec[axis] 1\naxis 1 reducedFeatVec: [1]\nfeatVec[axis+1:] [&#39;yes&#39;]\naxis 1 reducedFeatVec: [1, &#39;yes&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\naxis 1 featVec[axis] 1\naxis 1 reducedFeatVec: [1]\nfeatVec[axis+1:] [&#39;yes&#39;]\naxis 1 reducedFeatVec: [1, &#39;yes&#39;]\nfeatVec [1, 0, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\naxis 1 featVec[axis] 1\naxis 1 reducedFeatVec: [0]\nfeatVec[axis+1:] [&#39;no&#39;]\naxis 1 reducedFeatVec: [0, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\naxis 1 featVec[axis] 1\naxis 1 reducedFeatVec: [0]\nfeatVec[axis+1:] [&#39;no&#39;]\naxis 1 reducedFeatVec: [0, &#39;no&#39;]\nbaseEntropy 0.9709505944546686 i: 1 newEntropy 0.8 infoGain 0.17095059445466854\nbestFeatLabel no surfacing\nmyTree::: &#123;&#39;no surfacing&#39;: &#123;&#125;&#125;\nlabels: [&#39;flippers&#39;]\nsubLabels: [&#39;flippers&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\nfeatVec [1, 0, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\naxis 0 featVec[axis] 0\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;no&#39;]\naxis 0 reducedFeatVec: [1, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\naxis 0 featVec[axis] 0\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;no&#39;]\naxis 0 reducedFeatVec: [1, &#39;no&#39;]\nlabels: [&#39;flippers&#39;]\nclassList: [&#39;no&#39;, &#39;no&#39;]\nclassList[0]: no\nclassList.count(classList[0]): 2\nsubLabels: [&#39;flippers&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;yes&#39;]\naxis 0 reducedFeatVec: [1, &#39;yes&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;yes&#39;]\naxis 0 reducedFeatVec: [1, &#39;yes&#39;]\nfeatVec [1, 0, &#39;no&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [0, &#39;no&#39;]\naxis 0 reducedFeatVec: [0, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\nlabels: [&#39;flippers&#39;]\nclassList: [&#39;yes&#39;, &#39;yes&#39;, &#39;no&#39;]\nclassList[0]: yes\nclassList.count(classList[0]): 2\nbaseEntropy: 0.9182958340544896\nfeatList: [1, 1, 0]\nuniqueVals: &#123;0, 1&#125;\nfeatVec [1, &#39;yes&#39;]\nfeatVec [1, &#39;yes&#39;]\nfeatVec [0, &#39;no&#39;]\naxis 0 featVec[axis] 0\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [&#39;no&#39;]\naxis 0 reducedFeatVec: [&#39;no&#39;]\nfeatVec [1, &#39;yes&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [&#39;yes&#39;]\naxis 0 reducedFeatVec: [&#39;yes&#39;]\nfeatVec [1, &#39;yes&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [&#39;yes&#39;]\naxis 0 reducedFeatVec: [&#39;yes&#39;]\nfeatVec [0, &#39;no&#39;]\nbaseEntropy 0.9182958340544896 i: 0 newEntropy 0.0 infoGain 0.9182958340544896\nbestFeatLabel flippers\nmyTree::: &#123;&#39;flippers&#39;: &#123;&#125;&#125;\nlabels: []\nsubLabels: []\nfeatVec [1, &#39;yes&#39;]\nfeatVec [1, &#39;yes&#39;]\nfeatVec [0, &#39;no&#39;]\naxis 0 featVec[axis] 0\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [&#39;no&#39;]\naxis 0 reducedFeatVec: [&#39;no&#39;]\nlabels: []\nclassList: [&#39;no&#39;]\nclassList[0]: no\nclassList.count(classList[0]): 1\nsubLabels: []\nfeatVec [1, &#39;yes&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [&#39;yes&#39;]\naxis 0 reducedFeatVec: [&#39;yes&#39;]\nfeatVec [1, &#39;yes&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [&#39;yes&#39;]\naxis 0 reducedFeatVec: [&#39;yes&#39;]\nfeatVec [0, &#39;no&#39;]\nlabels: []\nclassList: [&#39;yes&#39;, &#39;yes&#39;]\nclassList[0]: yes\nclassList.count(classList[0]): 2\n\n\n\n\n\n&#123;&#39;no surfacing&#39;: &#123;0: &#39;no&#39;, 1: &#123;&#39;flippers&#39;: &#123;0: &#39;no&#39;, 1: &#39;yes&#39;&#125;&#125;&#125;&#125;</code></pre>\n<h2 id=\"使用matplotlib注解绘制-树形图\">使用matplotlib注解绘制\n树形图</h2>\n<div class=\"sourceCode\" id=\"cb41\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb41-1\"><a href=\"#cb41-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> matplotlib.pyplot <span class=\"im\">as</span> plt</span>\n<span id=\"cb41-2\"><a href=\"#cb41-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> matplotlib.font_manager <span class=\"im\">import</span> FontProperties</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb42\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb42-1\"><a href=\"#cb42-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>simheifont <span class=\"op\">=</span> FontProperties(fname<span class=\"op\">=</span><span class=\"st\">&#39;../simhei.ttf&#39;</span>)</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb43\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb43-1\"><a href=\"#cb43-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>decisionNode <span class=\"op\">=</span> <span class=\"bu\">dict</span>(boxstyle<span class=\"op\">=</span><span class=\"st\">&quot;sawtooth&quot;</span>, fc<span class=\"op\">=</span><span class=\"st\">&quot;0.8&quot;</span>)</span>\n<span id=\"cb43-2\"><a href=\"#cb43-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>leafNode <span class=\"op\">=</span> <span class=\"bu\">dict</span>(boxstyle<span class=\"op\">=</span><span class=\"st\">&quot;round4&quot;</span>, fc<span class=\"op\">=</span><span class=\"st\">&quot;0.8&quot;</span>)</span>\n<span id=\"cb43-3\"><a href=\"#cb43-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>arrow_args <span class=\"op\">=</span> <span class=\"bu\">dict</span>(arrowstyle<span class=\"op\">=</span><span class=\"st\">&quot;&lt;-&quot;</span>)</span>\n<span id=\"cb43-4\"><a href=\"#cb43-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> plotNode(nodeTxt,centerPt,parentPt,nodeType):</span>\n<span id=\"cb43-5\"><a href=\"#cb43-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    createPlot.ax1.annotate(nodeTxt,xy<span class=\"op\">=</span>parentPt, xycoords<span class=\"op\">=</span><span class=\"st\">&#39;axes fraction&#39;</span>, </span>\n<span id=\"cb43-6\"><a href=\"#cb43-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>                            xytext<span class=\"op\">=</span>centerPt, textcoords <span class=\"op\">=</span><span class=\"st\">&#39;axes fraction&#39;</span>,</span>\n<span id=\"cb43-7\"><a href=\"#cb43-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>                            va<span class=\"op\">=</span><span class=\"st\">&quot;center&quot;</span>,ha<span class=\"op\">=</span><span class=\"st\">&quot;center&quot;</span>,bbox<span class=\"op\">=</span>nodeType, arrowprops<span class=\"op\">=</span>arrow_args,</span>\n<span id=\"cb43-8\"><a href=\"#cb43-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>                            fontproperties<span class=\"op\">=</span> simheifont)</span>\n<span id=\"cb43-9\"><a href=\"#cb43-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> createPlot():</span>\n<span id=\"cb43-10\"><a href=\"#cb43-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    fig <span class=\"op\">=</span> plt.figure(<span class=\"dv\">1</span>, facecolor<span class=\"op\">=</span><span class=\"st\">&#39;white&#39;</span>)</span>\n<span id=\"cb43-11\"><a href=\"#cb43-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    fig.clf()</span>\n<span id=\"cb43-12\"><a href=\"#cb43-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    createPlot.ax1 <span class=\"op\">=</span> plt.subplot(<span class=\"dv\">111</span>,frameon<span class=\"op\">=</span><span class=\"va\">False</span>)</span>\n<span id=\"cb43-13\"><a href=\"#cb43-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plotNode(<span class=\"st\">&quot;决策节点&quot;</span>,(<span class=\"fl\">0.5</span>,<span class=\"fl\">0.1</span>),(<span class=\"fl\">0.1</span>,<span class=\"fl\">0.5</span>),decisionNode)</span>\n<span id=\"cb43-14\"><a href=\"#cb43-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plotNode(<span class=\"st\">&quot;叶节点&quot;</span>,(<span class=\"fl\">0.8</span>,<span class=\"fl\">0.1</span>),(<span class=\"fl\">0.3</span>,<span class=\"fl\">0.8</span>), leafNode)</span>\n<span id=\"cb43-15\"><a href=\"#cb43-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.show()</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb44\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb44-1\"><a href=\"#cb44-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>createPlot()</span></code></pre></div>\n<p>[png](C:/Users/YSilhouette/AppData/Local/Temp/360zip$Temp/360(/output_43_0.png)</p>\n<h3 id=\"构造注解树\">构造注解树</h3>\n<p><strong>获得多少叶节点-- X轴的长度</strong></p>\n<p><strong>获得树有多少层-- y轴的高度</strong></p>\n<div class=\"sourceCode\" id=\"cb45\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb45-1\"><a href=\"#cb45-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># 获取叶节点和树的层数</span></span>\n<span id=\"cb45-2\"><a href=\"#cb45-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> getNumLeafs(myTree):</span>\n<span id=\"cb45-3\"><a href=\"#cb45-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    numLeafs <span class=\"op\">=</span> <span class=\"dv\">0</span></span>\n<span id=\"cb45-4\"><a href=\"#cb45-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    firstStr <span class=\"op\">=</span> <span class=\"bu\">list</span>(myTree.keys())[<span class=\"dv\">0</span>]</span>\n<span id=\"cb45-5\"><a href=\"#cb45-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    secondDict <span class=\"op\">=</span> myTree[firstStr]</span>\n<span id=\"cb45-6\"><a href=\"#cb45-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> key <span class=\"kw\">in</span> secondDict.keys():</span>\n<span id=\"cb45-7\"><a href=\"#cb45-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"bu\">type</span>(secondDict[key]).<span class=\"va\">__name__</span> <span class=\"op\">==</span> <span class=\"st\">&#39;dict&#39;</span>:   <span class=\"co\">## 测试节点的数据类型是否字典</span></span>\n<span id=\"cb45-8\"><a href=\"#cb45-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>            numLeafs <span class=\"op\">+=</span> getNumLeafs(secondDict[key])</span>\n<span id=\"cb45-9\"><a href=\"#cb45-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">else</span>:</span>\n<span id=\"cb45-10\"><a href=\"#cb45-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>            numLeafs <span class=\"op\">+=</span> <span class=\"dv\">1</span></span>\n<span id=\"cb45-11\"><a href=\"#cb45-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> numLeafs</span>\n<span id=\"cb45-12\"><a href=\"#cb45-12\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb45-13\"><a href=\"#cb45-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> getTreeDepth(myTree):</span>\n<span id=\"cb45-14\"><a href=\"#cb45-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    maxDepth <span class=\"op\">=</span> <span class=\"dv\">0</span></span>\n<span id=\"cb45-15\"><a href=\"#cb45-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    firstStr <span class=\"op\">=</span> <span class=\"bu\">list</span>(myTree.keys())[<span class=\"dv\">0</span>]</span>\n<span id=\"cb45-16\"><a href=\"#cb45-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    secondDict <span class=\"op\">=</span> myTree[firstStr]</span>\n<span id=\"cb45-17\"><a href=\"#cb45-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> key <span class=\"kw\">in</span> secondDict.keys():</span>\n<span id=\"cb45-18\"><a href=\"#cb45-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"bu\">type</span>(secondDict[key]).<span class=\"va\">__name__</span> <span class=\"op\">==</span> <span class=\"st\">&#39;dict&#39;</span>:   <span class=\"co\">## 测试节点的数据类型是否字典</span></span>\n<span id=\"cb45-19\"><a href=\"#cb45-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>            thisDepth <span class=\"op\">=</span> <span class=\"dv\">1</span> <span class=\"op\">+</span> getTreeDepth(secondDict[key])</span>\n<span id=\"cb45-20\"><a href=\"#cb45-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">else</span>:</span>\n<span id=\"cb45-21\"><a href=\"#cb45-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>            thisDepth <span class=\"op\">=</span> <span class=\"dv\">1</span></span>\n<span id=\"cb45-22\"><a href=\"#cb45-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> thisDepth <span class=\"op\">&gt;</span> maxDepth:</span>\n<span id=\"cb45-23\"><a href=\"#cb45-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>            maxDepth <span class=\"op\">=</span> thisDepth</span>\n<span id=\"cb45-24\"><a href=\"#cb45-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> maxDepth</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb46\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb46-1\"><a href=\"#cb46-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> retrieveTree(i):</span>\n<span id=\"cb46-2\"><a href=\"#cb46-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    listOfTrees <span class=\"op\">=</span> [</span>\n<span id=\"cb46-3\"><a href=\"#cb46-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>        &#123;<span class=\"st\">&#39;no surfacing&#39;</span>:&#123;<span class=\"dv\">0</span>:<span class=\"st\">&#39;no&#39;</span>,<span class=\"dv\">1</span>:&#123;<span class=\"st\">&#39;flippers&#39;</span>:&#123;<span class=\"dv\">0</span>:<span class=\"st\">&#39;no&#39;</span>,<span class=\"dv\">1</span>:<span class=\"st\">&#39;yes&#39;</span>&#125;&#125;&#125;&#125;,</span>\n<span id=\"cb46-4\"><a href=\"#cb46-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>        &#123;<span class=\"st\">&#39;no serfacing&#39;</span>:&#123;<span class=\"dv\">0</span>:<span class=\"st\">&#39;no&#39;</span>,<span class=\"dv\">1</span>:&#123;<span class=\"st\">&#39;flippers&#39;</span>:&#123;<span class=\"dv\">0</span>:&#123;<span class=\"st\">&#39;head&#39;</span>:&#123;<span class=\"dv\">0</span>:<span class=\"st\">&#39;no&#39;</span>,<span class=\"dv\">1</span>:<span class=\"st\">&#39;yes&#39;</span>&#125;&#125;,<span class=\"dv\">1</span>:<span class=\"st\">&#39;no&#39;</span>&#125;&#125;&#125;&#125;</span>\n<span id=\"cb46-5\"><a href=\"#cb46-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    ]</span>\n<span id=\"cb46-6\"><a href=\"#cb46-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> listOfTrees[i]</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb47\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb47-1\"><a href=\"#cb47-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>retrieveTree(<span class=\"dv\">1</span>)</span></code></pre></div>\n<pre><code>&#123;&#39;no serfacing&#39;: &#123;0: &#39;no&#39;,\n  1: &#123;&#39;flippers&#39;: &#123;0: &#123;&#39;head&#39;: &#123;0: &#39;no&#39;, 1: &#39;yes&#39;&#125;&#125;, 1: &#39;no&#39;&#125;&#125;&#125;&#125;</code></pre>\n<div class=\"sourceCode\" id=\"cb49\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb49-1\"><a href=\"#cb49-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>myTree <span class=\"op\">=</span> retrieveTree(<span class=\"dv\">0</span>)</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb50\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb50-1\"><a href=\"#cb50-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">list</span>(myTree.keys())[<span class=\"dv\">0</span>]</span></code></pre></div>\n<pre><code>&#39;no surfacing&#39;</code></pre>\n<div class=\"sourceCode\" id=\"cb52\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb52-1\"><a href=\"#cb52-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>getNumLeafs(myTree)</span></code></pre></div>\n<pre><code>3</code></pre>\n<div class=\"sourceCode\" id=\"cb54\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb54-1\"><a href=\"#cb54-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>getTreeDepth(myTree)</span></code></pre></div>\n<pre><code>2</code></pre>\n<div class=\"sourceCode\" id=\"cb56\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb56-1\"><a href=\"#cb56-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> plotMidText(cntrPt, parentPt, txtString):</span>\n<span id=\"cb56-2\"><a href=\"#cb56-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    xMid <span class=\"op\">=</span> (parentPt[<span class=\"dv\">0</span>] <span class=\"op\">-</span> cntrPt[<span class=\"dv\">0</span>]) <span class=\"op\">/</span><span class=\"fl\">2.0</span> <span class=\"op\">+</span> cntrPt[<span class=\"dv\">0</span>]</span>\n<span id=\"cb56-3\"><a href=\"#cb56-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    yMid <span class=\"op\">=</span> (parentPt[<span class=\"dv\">1</span>] <span class=\"op\">-</span> cntrPt[<span class=\"dv\">1</span>]) <span class=\"op\">/</span><span class=\"fl\">2.0</span> <span class=\"op\">+</span> cntrPt[<span class=\"dv\">1</span>]</span>\n<span id=\"cb56-4\"><a href=\"#cb56-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    createPlot.ax1.text(xMid,yMid, txtString)</span>\n<span id=\"cb56-5\"><a href=\"#cb56-5\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb56-6\"><a href=\"#cb56-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> plotTree(myTree, parentPt, nodeText):</span>\n<span id=\"cb56-7\"><a href=\"#cb56-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    numLeafs <span class=\"op\">=</span> getNumLeafs(myTree)</span>\n<span id=\"cb56-8\"><a href=\"#cb56-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    depth <span class=\"op\">=</span> getTreeDepth(myTree)</span>\n<span id=\"cb56-9\"><a href=\"#cb56-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb56-10\"><a href=\"#cb56-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    firstStr <span class=\"op\">=</span> <span class=\"bu\">list</span>(myTree.keys())[<span class=\"dv\">0</span>]</span>\n<span id=\"cb56-11\"><a href=\"#cb56-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    cntrPt <span class=\"op\">=</span> (plotTree.xOff <span class=\"op\">+</span> (<span class=\"fl\">1.0</span> <span class=\"op\">+</span> <span class=\"bu\">float</span>(numLeafs)) <span class=\"op\">/</span><span class=\"fl\">2.0</span> <span class=\"op\">/</span> plotTree.totalW, plotTree.yOff)</span>\n<span id=\"cb56-12\"><a href=\"#cb56-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plotMidText(cntrPt, parentPt, nodeText)</span>\n<span id=\"cb56-13\"><a href=\"#cb56-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plotNode(firstStr, cntrPt, parentPt, decisionNode)</span>\n<span id=\"cb56-14\"><a href=\"#cb56-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb56-15\"><a href=\"#cb56-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    secondDict <span class=\"op\">=</span> myTree[firstStr]</span>\n<span id=\"cb56-16\"><a href=\"#cb56-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plotTree.yOff <span class=\"op\">=</span> plotTree.yOff <span class=\"op\">-</span> <span class=\"fl\">1.0</span> <span class=\"op\">/</span> plotTree.totalD</span>\n<span id=\"cb56-17\"><a href=\"#cb56-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> key <span class=\"kw\">in</span> secondDict.keys():</span>\n<span id=\"cb56-18\"><a href=\"#cb56-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"bu\">type</span>(secondDict[key]).<span class=\"va\">__name__</span> <span class=\"op\">==</span> <span class=\"st\">&#39;dict&#39;</span>:</span>\n<span id=\"cb56-19\"><a href=\"#cb56-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>            plotTree(secondDict[key], cntrPt, <span class=\"bu\">str</span>(key))</span>\n<span id=\"cb56-20\"><a href=\"#cb56-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">else</span>:</span>\n<span id=\"cb56-21\"><a href=\"#cb56-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>            plotTree.xOff <span class=\"op\">=</span> plotTree.xOff <span class=\"op\">+</span> <span class=\"fl\">1.0</span> <span class=\"op\">/</span> plotTree.totalW</span>\n<span id=\"cb56-22\"><a href=\"#cb56-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>            plotNode(secondDict[key], (plotTree.xOff, plotTree.yOff), cntrPt, leafNode)</span>\n<span id=\"cb56-23\"><a href=\"#cb56-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>            plotMidText((plotTree.xOff, plotTree.yOff), cntrPt,<span class=\"bu\">str</span>(key))</span>\n<span id=\"cb56-24\"><a href=\"#cb56-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plotTree.yOff <span class=\"op\">=</span> plotTree.yOff <span class=\"op\">+</span> <span class=\"fl\">1.0</span> <span class=\"op\">/</span> plotTree.totalD</span>\n<span id=\"cb56-25\"><a href=\"#cb56-25\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb56-26\"><a href=\"#cb56-26\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> createPlot(inTree):</span>\n<span id=\"cb56-27\"><a href=\"#cb56-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>    fig <span class=\"op\">=</span> plt.figure(<span class=\"dv\">1</span>, facecolor<span class=\"op\">=</span><span class=\"st\">&#39;white&#39;</span>)</span>\n<span id=\"cb56-28\"><a href=\"#cb56-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>    fig.clf()</span>\n<span id=\"cb56-29\"><a href=\"#cb56-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>    axprops <span class=\"op\">=</span> <span class=\"bu\">dict</span>(xticks<span class=\"op\">=</span>[], yticks<span class=\"op\">=</span>[])</span>\n<span id=\"cb56-30\"><a href=\"#cb56-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>    createPlot.ax1 <span class=\"op\">=</span> plt.subplot(<span class=\"dv\">111</span>, frameon<span class=\"op\">=</span><span class=\"va\">False</span>, <span class=\"op\">**</span>axprops)</span>\n<span id=\"cb56-31\"><a href=\"#cb56-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plotTree.totalW <span class=\"op\">=</span> <span class=\"bu\">float</span>(getNumLeafs(inTree))</span>\n<span id=\"cb56-32\"><a href=\"#cb56-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plotTree.totalD <span class=\"op\">=</span> <span class=\"bu\">float</span>(getTreeDepth(inTree))</span>\n<span id=\"cb56-33\"><a href=\"#cb56-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plotTree.xOff <span class=\"op\">=</span> <span class=\"op\">-</span> <span class=\"fl\">0.5</span><span class=\"op\">/</span> plotTree.totalW</span>\n<span id=\"cb56-34\"><a href=\"#cb56-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plotTree.yOff <span class=\"op\">=</span> <span class=\"fl\">1.0</span></span>\n<span id=\"cb56-35\"><a href=\"#cb56-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plotTree(inTree,(<span class=\"fl\">0.5</span>,<span class=\"fl\">1.0</span>),<span class=\"st\">&#39;&#39;</span>)</span>\n<span id=\"cb56-36\"><a href=\"#cb56-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.show()</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb57\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb57-1\"><a href=\"#cb57-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>mytree <span class=\"op\">=</span> retrieveTree(<span class=\"dv\">0</span>)</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb58\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb58-1\"><a href=\"#cb58-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>mytree</span></code></pre></div>\n<pre><code>&#123;&#39;no surfacing&#39;: &#123;0: &#39;no&#39;, 1: &#123;&#39;flippers&#39;: &#123;0: &#39;no&#39;, 1: &#39;yes&#39;&#125;&#125;&#125;&#125;</code></pre>\n<div class=\"sourceCode\" id=\"cb60\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb60-1\"><a href=\"#cb60-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>createPlot(mytree)</span></code></pre></div>\n<p>[png](C:/Users/YSilhouette/AppData/Local/Temp/360zip$Temp/360(/output_56_0.png)</p>\n<div class=\"sourceCode\" id=\"cb61\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb61-1\"><a href=\"#cb61-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>mytree[<span class=\"st\">&#39;no surfacing&#39;</span>][<span class=\"dv\">3</span>]<span class=\"op\">=</span> <span class=\"st\">&#39;maybe&#39;</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb62\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb62-1\"><a href=\"#cb62-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>mytree</span></code></pre></div>\n<pre><code>&#123;&#39;no surfacing&#39;: &#123;0: &#39;no&#39;, 1: &#123;&#39;flippers&#39;: &#123;0: &#39;no&#39;, 1: &#39;yes&#39;&#125;&#125;, 3: &#39;maybe&#39;&#125;&#125;</code></pre>\n<div class=\"sourceCode\" id=\"cb64\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb64-1\"><a href=\"#cb64-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>createPlot(mytree)</span></code></pre></div>\n<p>[png](C:/Users/YSilhouette/AppData/Local/Temp/360zip$Temp/360(/output_59_0.png)</p>\n<div class=\"sourceCode\" id=\"cb65\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"></code></pre></div>\n<hr>\n<h3 id=\"about-me\">About ME</h3>\n<h5 id=\"读书城南-在未来面前我们都是孩子\">👋 读书城南，🤔\n在未来面前，我们都是孩子～</h5>\n<ul>\n<li>📙\n一个热衷于探索学习新方向、新事物的智能产品经理，闲暇时间喜欢coding💻、画图🎨、音乐🎵、学习ing~</li>\n</ul>\n<h5 id=\"social-media\">👋 Social Media</h5>\n<ul>\n<li><p>🛠️ Blog: <a href=\"http://oceaneyes.top\">http://oceaneyes.top</a></p></li>\n<li><p>⚡ PM导航: <a href=\"https://pmhub.oceangzy.top\">https://pmhub.oceangzy.top</a></p></li>\n<li><p>☘️ CNBLOG: <a href=\"https://www.cnblogs.com/oceaneyes-gzy/\">https://www.cnblogs.com/oceaneyes-gzy/</a></p></li>\n<li><p>🌱 AI PRJ自己部署的一些算法demo: <a href=\"http://ai.oceangzy.top/\">http://ai.oceangzy.top/</a></p></li>\n<li><p>📫 Email: 1450136519@qq.com</p></li>\n<li><p>💬 WeChat: <a href=\"https://oceaneyes.top/img/wechatqrcode.jpg\">OCEANGZY</a></p></li>\n<li><p>💬 公众号: <a href=\"https://oceaneyes.top/img/wechatgzh.jpeg\">UncleJoker-GZY</a></p></li>\n</ul>\n<h5 id=\"加入小组\">👋 加入小组~</h5>\n<p><img src=\"https://oceaneyes.top/img/zhishigroup.jpg\" title=\"加入组织\" alt width=\"240\"></p>\n<h5 id=\"感谢打赏\">👋 感谢打赏~</h5>\n<p><img src=\"https://oceaneyes.top/img/alipay.jpg\" title=\"支付宝打赏\" alt width=\"140\">\n<img src=\"https://oceaneyes.top/img/wechatpay.jpg\" title=\"微信打赏\" alt width=\"140\"></p>\n","more":"<h2 id=\"决策树\">决策树</h2>\n<h3 id=\"决策树的一个重要任务是为了数据中所蕴含的知识信息\">决策树的一个重要任务是为了数据中所蕴含的知识信息</h3>\n<ul>\n<li>决策树可以使用不熟悉的数据集合，并从中提取出一系列规则，在这些机器根据数据集创建规则时，就是机器学习的过程</li>\n<li>k-近邻算法可以完成很多分类任务，但是它最大的缺点就是无法给出数据的内在含义，决策树的主要优势就在于数据形式非常容易理解</li>\n</ul>\n<h4 id=\"决策数的构造\">决策数的构造</h4>\n<ul>\n<li>优点：计算复杂度不高，输出结果易于理解，对中间值对缺失不敏感，可处理不相关特征数据</li>\n<li>缺点：可能会产生过度匹配的问题</li>\n<li>适用数据类型：数值型和 标称型</li>\n</ul>\n<p><strong>构建决策树的第一个问题：当前数据集上哪个特征在划分数据分类时起决定性作用</strong></p>\n<ul>\n<li>为了找到决定性的特征，划分出最好的结果，我们必须评估每个特征。</li>\n<li>完成测试之后，原始数据集就被划分为几个数据子集</li>\n<li>这些数据子集会分布在第一个决策点的所有分支上。如果某个分支下的数据属于同一类型，则当前条件已经正确地划分数据分类，\n无需进一步对数据集进行分割。</li>\n<li>如果数据子集内的数据不属于同一类型，则需要重复划分数据子集的过程</li>\n</ul>\n<p><strong>思路</strong> 检测数据集中的每个子项是否属于同一分类: If so\nreturn 类标签; Else 寻找划分数据集的最好特征 划分数据集 创建分支节点 for\n每个划分的子集 调用函数createBranch并增加返回结果到分支节点中 return\n分支节点</p>\n<p><strong>决策树的一般流程</strong></p>\n<ol type=\"1\">\n<li>收集数据：可使用任何方法</li>\n<li>准备数据：构造算法只适用于标称型数据， 因此数值型数据必须离散化</li>\n<li>分析数据：可使用任何方法，构造树完成后，应检查图形是否符合预期</li>\n<li>训练算法：构造树的数据结构</li>\n<li>测试算法：使用经验树计算错误概率</li>\n<li>使用算法：此步骤可以适用于任何监督学习算法，决策树可以更好地理解数据的内在含义</li>\n</ol>\n<h4 id=\"信息增益information-gain和香农熵熵entropy\">信息增益(information\ngain)和香农熵/熵(entropy)</h4>\n<figure>\n<img src=\"/.top//attachment:b820e520-1b96-4c05-ad79-c74b7cbda53f.png\" alt=\"image.png\">\n<figcaption aria-hidden=\"true\">image.png</figcaption>\n</figure>\n<p>另一个度量集合无序程度的方法是基尼不纯度1(Gini\nimpurity)，简单地说就是从一个数据集中随机选取子项，度量其被错误分类到其他分组里的概率</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> math <span class=\"im\">import</span> log</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> operator</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> calcShannonEnt(dataSet):</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    numEntries <span class=\"op\">=</span> <span class=\"bu\">len</span>(dataSet)</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\"># 为所有可能分类创建字典</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    labelCounts<span class=\"op\">=</span> &#123;&#125;</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> featVec <span class=\"kw\">in</span> dataSet:</span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        currentLabel <span class=\"op\">=</span> featVec[<span class=\"op\">-</span><span class=\"dv\">1</span>]</span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> currentLabel <span class=\"kw\">not</span> <span class=\"kw\">in</span> labelCounts.keys():</span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>            labelCounts[currentLabel] <span class=\"op\">=</span> <span class=\"dv\">0</span></span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        labelCounts[currentLabel] <span class=\"op\">+=</span> <span class=\"dv\">1</span></span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    shannonEnt <span class=\"op\">=</span> <span class=\"fl\">0.0</span></span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> key <span class=\"kw\">in</span> labelCounts:</span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>        prob <span class=\"op\">=</span> <span class=\"bu\">float</span>(labelCounts[key])<span class=\"op\">/</span>numEntries</span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>        shannonEnt <span class=\"op\">-=</span> prob <span class=\"op\">*</span> log(prob,<span class=\"dv\">2</span>)   <span class=\"co\"># 以 2为底求对数</span></span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> shannonEnt     </span></code></pre></div>\n<figure>\n<img src=\"/.top//attachment:5676c0e4-d930-4b1a-9c6d-afb2deaa6efc.png\" alt=\"image.png\">\n<figcaption aria-hidden=\"true\">image.png</figcaption>\n</figure>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> createDataSet():</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    dataSet <span class=\"op\">=</span> [</span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>        [<span class=\"dv\">1</span>,<span class=\"dv\">1</span>,<span class=\"st\">&#39;yes&#39;</span>],</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>        [<span class=\"dv\">1</span>,<span class=\"dv\">1</span>,<span class=\"st\">&#39;yes&#39;</span>],</span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>        [<span class=\"dv\">1</span>,<span class=\"dv\">0</span>,<span class=\"st\">&#39;no&#39;</span>],</span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        [<span class=\"dv\">0</span>,<span class=\"dv\">1</span>,<span class=\"st\">&#39;no&#39;</span>],</span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        [<span class=\"dv\">0</span>,<span class=\"dv\">1</span>,<span class=\"st\">&#39;no&#39;</span>]</span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    ]  </span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    labels <span class=\"op\">=</span> [<span class=\"st\">&#39;no surfacing&#39;</span>,<span class=\"st\">&#39;flippers&#39;</span>]</span>\n<span id=\"cb3-10\"><a href=\"#cb3-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> dataSet ,labels</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>myData, labels <span class=\"op\">=</span> createDataSet()</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>myData</span></code></pre></div>\n<pre><code>[[1, 1, &#39;yes&#39;], [1, 1, &#39;yes&#39;], [1, 0, &#39;no&#39;], [0, 1, &#39;no&#39;], [0, 1, &#39;no&#39;]]</code></pre>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb7-1\"><a href=\"#cb7-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>labels</span></code></pre></div>\n<pre><code>[&#39;no surfacing&#39;, &#39;flippers&#39;]</code></pre>\n<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb9-1\"><a href=\"#cb9-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>calcShannonEnt(myData)</span></code></pre></div>\n<pre><code>0.9709505944546686</code></pre>\n<p>熵越高，则混合的数据也越多</p>\n<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb11-1\"><a href=\"#cb11-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>myData[<span class=\"dv\">0</span>][<span class=\"op\">-</span><span class=\"dv\">1</span>] <span class=\"op\">=</span> <span class=\"st\">&#39;maybe&#39;</span></span>\n<span id=\"cb11-2\"><a href=\"#cb11-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>myData</span></code></pre></div>\n<pre><code>[[1, 1, &#39;maybe&#39;], [1, 1, &#39;yes&#39;], [1, 0, &#39;no&#39;], [0, 1, &#39;no&#39;], [0, 1, &#39;no&#39;]]</code></pre>\n<div class=\"sourceCode\" id=\"cb13\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb13-1\"><a href=\"#cb13-1\" aria-hidden=\"true\" tabindex=\"-1\"></a> calcShannonEnt(myData)</span></code></pre></div>\n<pre><code>1.3709505944546687</code></pre>\n<h4 id=\"划分数据集\">划分数据集</h4>\n<ul>\n<li>分类算法除了需要测量信息熵，还需要划分数据集，\n度量划分数据集的熵，以便判断当前是否正确地划分了数据集</li>\n<li>将对每个特征划分数\n据集的结果计算一次信息熵，然后判断按照哪个特征划分数据集是最好的划分方式</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb15\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb15-1\"><a href=\"#cb15-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># 按照给定特征划分数据集</span></span>\n<span id=\"cb15-2\"><a href=\"#cb15-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># 输入参数： 待划分待数据集、划分数据集的特征、需要返回的特征的值</span></span>\n<span id=\"cb15-3\"><a href=\"#cb15-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> splitDataSet(dataSet,axis,value):</span>\n<span id=\"cb15-4\"><a href=\"#cb15-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    retDataSet <span class=\"op\">=</span> []</span>\n<span id=\"cb15-5\"><a href=\"#cb15-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> featVec <span class=\"kw\">in</span> dataSet:</span>\n<span id=\"cb15-6\"><a href=\"#cb15-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">print</span>(<span class=\"st\">&quot;featVec&quot;</span>,featVec)</span>\n<span id=\"cb15-7\"><a href=\"#cb15-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> featVec[axis] <span class=\"op\">==</span> value:</span>\n<span id=\"cb15-8\"><a href=\"#cb15-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"bu\">print</span>(<span class=\"st\">&quot;axis&quot;</span>,axis,<span class=\"st\">&quot;featVec[axis]&quot;</span>,featVec[axis])</span>\n<span id=\"cb15-9\"><a href=\"#cb15-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>            reducedFeatVec <span class=\"op\">=</span> featVec[:axis]</span>\n<span id=\"cb15-10\"><a href=\"#cb15-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"bu\">print</span>(<span class=\"st\">&quot;axis&quot;</span>,axis,<span class=\"st\">&quot;reducedFeatVec:&quot;</span>,reducedFeatVec)</span>\n<span id=\"cb15-11\"><a href=\"#cb15-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>            reducedFeatVec.extend(featVec[axis<span class=\"op\">+</span><span class=\"dv\">1</span>:])</span>\n<span id=\"cb15-12\"><a href=\"#cb15-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"bu\">print</span>(<span class=\"st\">&quot;featVec[axis+1:]&quot;</span>,featVec[axis<span class=\"op\">+</span><span class=\"dv\">1</span>:])</span>\n<span id=\"cb15-13\"><a href=\"#cb15-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"bu\">print</span>(<span class=\"st\">&quot;axis&quot;</span>,axis,<span class=\"st\">&quot;reducedFeatVec:&quot;</span>,reducedFeatVec)</span>\n<span id=\"cb15-14\"><a href=\"#cb15-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>            retDataSet.append(reducedFeatVec)</span>\n<span id=\"cb15-15\"><a href=\"#cb15-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> retDataSet</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb16\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb16-1\"><a href=\"#cb16-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>myData, labels <span class=\"op\">=</span> createDataSet()</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb17\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb17-1\"><a href=\"#cb17-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>myData</span></code></pre></div>\n<pre><code>[[1, 1, &#39;yes&#39;], [1, 1, &#39;yes&#39;], [1, 0, &#39;no&#39;], [0, 1, &#39;no&#39;], [0, 1, &#39;no&#39;]]</code></pre>\n<div class=\"sourceCode\" id=\"cb19\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb19-1\"><a href=\"#cb19-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>labels</span></code></pre></div>\n<pre><code>[&#39;no surfacing&#39;, &#39;flippers&#39;]</code></pre>\n<div class=\"sourceCode\" id=\"cb21\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb21-1\"><a href=\"#cb21-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>splitDataSet(myData,<span class=\"dv\">0</span>,<span class=\"dv\">1</span>)</span></code></pre></div>\n<pre><code>featVec [1, 1, &#39;yes&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;yes&#39;]\naxis 0 reducedFeatVec: [1, &#39;yes&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;yes&#39;]\naxis 0 reducedFeatVec: [1, &#39;yes&#39;]\nfeatVec [1, 0, &#39;no&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [0, &#39;no&#39;]\naxis 0 reducedFeatVec: [0, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\n\n\n\n\n\n[[1, &#39;yes&#39;], [1, &#39;yes&#39;], [0, &#39;no&#39;]]</code></pre>\n<div class=\"sourceCode\" id=\"cb23\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb23-1\"><a href=\"#cb23-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>splitDataSet(myData,<span class=\"dv\">0</span>,<span class=\"dv\">0</span>)</span></code></pre></div>\n<pre><code>featVec [1, 1, &#39;yes&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\nfeatVec [1, 0, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\naxis 0 featVec[axis] 0\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;no&#39;]\naxis 0 reducedFeatVec: [1, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\naxis 0 featVec[axis] 0\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;no&#39;]\naxis 0 reducedFeatVec: [1, &#39;no&#39;]\n\n\n\n\n\n[[1, &#39;no&#39;], [1, &#39;no&#39;]]</code></pre>\n<div class=\"sourceCode\" id=\"cb25\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb25-1\"><a href=\"#cb25-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># 测试</span></span>\n<span id=\"cb25-2\"><a href=\"#cb25-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>a <span class=\"op\">=</span> [<span class=\"dv\">1</span>,<span class=\"dv\">2</span>,<span class=\"dv\">3</span>]</span>\n<span id=\"cb25-3\"><a href=\"#cb25-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>b <span class=\"op\">=</span> [<span class=\"dv\">4</span>,<span class=\"dv\">5</span>,<span class=\"dv\">6</span>]</span>\n<span id=\"cb25-4\"><a href=\"#cb25-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>a.append(b)</span>\n<span id=\"cb25-5\"><a href=\"#cb25-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>a</span></code></pre></div>\n<pre><code>[1, 2, 3, [4, 5, 6]]</code></pre>\n<div class=\"sourceCode\" id=\"cb27\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb27-1\"><a href=\"#cb27-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># 测试</span></span>\n<span id=\"cb27-2\"><a href=\"#cb27-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>a <span class=\"op\">=</span> [<span class=\"dv\">1</span>,<span class=\"dv\">2</span>,<span class=\"dv\">3</span>]</span>\n<span id=\"cb27-3\"><a href=\"#cb27-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>b <span class=\"op\">=</span> [<span class=\"dv\">4</span>,<span class=\"dv\">5</span>,<span class=\"dv\">6</span>]</span>\n<span id=\"cb27-4\"><a href=\"#cb27-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>a.extend(b)</span>\n<span id=\"cb27-5\"><a href=\"#cb27-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>a</span></code></pre></div>\n<pre><code>[1, 2, 3, 4, 5, 6]</code></pre>\n<div class=\"sourceCode\" id=\"cb29\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb29-1\"><a href=\"#cb29-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">len</span>(myData[<span class=\"dv\">0</span>])<span class=\"op\">-</span><span class=\"dv\">1</span></span></code></pre></div>\n<pre><code>2</code></pre>\n<div class=\"sourceCode\" id=\"cb31\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb31-1\"><a href=\"#cb31-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># 选择最好的数据集划分方式</span></span>\n<span id=\"cb31-2\"><a href=\"#cb31-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> chooseBestFeatureToSplit(dataSet):</span>\n<span id=\"cb31-3\"><a href=\"#cb31-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    numFeatures <span class=\"op\">=</span> <span class=\"bu\">len</span>(dataSet[<span class=\"dv\">0</span>])<span class=\"op\">-</span><span class=\"dv\">1</span>  <span class=\"co\">#特征的个数</span></span>\n<span id=\"cb31-4\"><a href=\"#cb31-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    baseEntropy <span class=\"op\">=</span> calcShannonEnt(dataSet) <span class=\"co\"># 基线熵</span></span>\n<span id=\"cb31-5\"><a href=\"#cb31-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(<span class=\"st\">&quot;baseEntropy:&quot;</span>,baseEntropy)</span>\n<span id=\"cb31-6\"><a href=\"#cb31-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    bestInfoGain <span class=\"op\">=</span> <span class=\"fl\">0.0</span></span>\n<span id=\"cb31-7\"><a href=\"#cb31-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    bestFeature <span class=\"op\">=</span> <span class=\"op\">-</span><span class=\"dv\">1</span></span>\n<span id=\"cb31-8\"><a href=\"#cb31-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\"># 创建唯一的分类标签</span></span>\n<span id=\"cb31-9\"><a href=\"#cb31-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> i <span class=\"kw\">in</span> <span class=\"bu\">range</span>(numFeatures):</span>\n<span id=\"cb31-10\"><a href=\"#cb31-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>        featList <span class=\"op\">=</span> [example[i] <span class=\"cf\">for</span> example <span class=\"kw\">in</span> dataSet]</span>\n<span id=\"cb31-11\"><a href=\"#cb31-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">print</span>(<span class=\"st\">&quot;featList:&quot;</span>,featList)</span>\n<span id=\"cb31-12\"><a href=\"#cb31-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>        uniqueVals <span class=\"op\">=</span>  <span class=\"bu\">set</span>(featList)</span>\n<span id=\"cb31-13\"><a href=\"#cb31-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">print</span>(<span class=\"st\">&quot;uniqueVals:&quot;</span>,uniqueVals)</span>\n<span id=\"cb31-14\"><a href=\"#cb31-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb31-15\"><a href=\"#cb31-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"co\"># 计算每种划分方式的信息熵</span></span>\n<span id=\"cb31-16\"><a href=\"#cb31-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>        newEntropy <span class=\"op\">=</span> <span class=\"fl\">0.0</span></span>\n<span id=\"cb31-17\"><a href=\"#cb31-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">for</span> value <span class=\"kw\">in</span> uniqueVals:</span>\n<span id=\"cb31-18\"><a href=\"#cb31-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>            subDataSet <span class=\"op\">=</span> splitDataSet(dataSet, i ,value)</span>\n<span id=\"cb31-19\"><a href=\"#cb31-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>            prob <span class=\"op\">=</span> <span class=\"bu\">len</span>(subDataSet) <span class=\"op\">/</span> <span class=\"bu\">float</span>(<span class=\"bu\">len</span>(dataSet))</span>\n<span id=\"cb31-20\"><a href=\"#cb31-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>            newEntropy <span class=\"op\">+=</span> prob <span class=\"op\">*</span> calcShannonEnt(subDataSet)</span>\n<span id=\"cb31-21\"><a href=\"#cb31-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>        infoGain <span class=\"op\">=</span> baseEntropy <span class=\"op\">-</span> newEntropy  <span class=\"co\"># 计算信息增益</span></span>\n<span id=\"cb31-22\"><a href=\"#cb31-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">print</span>(<span class=\"st\">&quot;baseEntropy&quot;</span>,baseEntropy,<span class=\"st\">&quot;i:&quot;</span>,i,<span class=\"st\">&quot;newEntropy&quot;</span>,newEntropy,<span class=\"st\">&quot;infoGain&quot;</span>,infoGain)</span>\n<span id=\"cb31-23\"><a href=\"#cb31-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span>(infoGain <span class=\"op\">&gt;</span> bestInfoGain):</span>\n<span id=\"cb31-24\"><a href=\"#cb31-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>            bestInfoGain <span class=\"op\">=</span> infoGain   <span class=\"co\"># 计算最好的信息增益</span></span>\n<span id=\"cb31-25\"><a href=\"#cb31-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>            bestFeature <span class=\"op\">=</span> i</span>\n<span id=\"cb31-26\"><a href=\"#cb31-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> bestFeature</span></code></pre></div>\n<p>函数介绍：选取特征、划分数据集、计算得出最好的划分数据集的特征</p>\n<ul>\n<li>第一个要求是，数据必须是一种由列表元素组成的列表，而且所有的列表元素都要具有相同的数据长度;</li>\n<li>第二个要求是，数据的最后一列或者每个实例的最后一个元素是当前实例的类别标签</li>\n<li>无需限定list中的数据类型，它们既可以是数字也可以是字符串，并不影响实际计算</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb32\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb32-1\"><a href=\"#cb32-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>chooseBestFeatureToSplit(myData)</span></code></pre></div>\n<pre><code>baseEntropy: 0.9709505944546686\nfeatList: [1, 1, 1, 0, 0]\nuniqueVals: &#123;0, 1&#125;\nfeatVec [1, 1, &#39;yes&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\nfeatVec [1, 0, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\naxis 0 featVec[axis] 0\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;no&#39;]\naxis 0 reducedFeatVec: [1, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\naxis 0 featVec[axis] 0\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;no&#39;]\naxis 0 reducedFeatVec: [1, &#39;no&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;yes&#39;]\naxis 0 reducedFeatVec: [1, &#39;yes&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;yes&#39;]\naxis 0 reducedFeatVec: [1, &#39;yes&#39;]\nfeatVec [1, 0, &#39;no&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [0, &#39;no&#39;]\naxis 0 reducedFeatVec: [0, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\nbaseEntropy 0.9709505944546686 i: 0 newEntropy 0.5509775004326937 infoGain 0.4199730940219749\nfeatList: [1, 1, 0, 1, 1]\nuniqueVals: &#123;0, 1&#125;\nfeatVec [1, 1, &#39;yes&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\nfeatVec [1, 0, &#39;no&#39;]\naxis 1 featVec[axis] 0\naxis 1 reducedFeatVec: [1]\nfeatVec[axis+1:] [&#39;no&#39;]\naxis 1 reducedFeatVec: [1, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\naxis 1 featVec[axis] 1\naxis 1 reducedFeatVec: [1]\nfeatVec[axis+1:] [&#39;yes&#39;]\naxis 1 reducedFeatVec: [1, &#39;yes&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\naxis 1 featVec[axis] 1\naxis 1 reducedFeatVec: [1]\nfeatVec[axis+1:] [&#39;yes&#39;]\naxis 1 reducedFeatVec: [1, &#39;yes&#39;]\nfeatVec [1, 0, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\naxis 1 featVec[axis] 1\naxis 1 reducedFeatVec: [0]\nfeatVec[axis+1:] [&#39;no&#39;]\naxis 1 reducedFeatVec: [0, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\naxis 1 featVec[axis] 1\naxis 1 reducedFeatVec: [0]\nfeatVec[axis+1:] [&#39;no&#39;]\naxis 1 reducedFeatVec: [0, &#39;no&#39;]\nbaseEntropy 0.9709505944546686 i: 1 newEntropy 0.8 infoGain 0.17095059445466854\n\n\n\n\n\n0</code></pre>\n<h2 id=\"构建递归决策树\">构建递归决策树</h2>\n<ul>\n<li>得到原始数据集，然后基于最好的属性值划分数据集，由于特征值可能多于两个，因此可能存在大于两个分支的数据集划分。</li>\n<li>第一次划分之后，数据将被向下传递到树分支的下一个节点，在这个节点上，我们可以再次划分数据。</li>\n<li><strong>因此我们可以采用递归的原则处理数据集</strong></li>\n<li>递归结束的条件是：程序遍历完所有划分数据集的属性，或者每个分支下的所有实例都具有相同的分类</li>\n</ul>\n<figure>\n<img src=\"/.top//attachment:d3b072f3-7a1b-4d05-b262-6a399d408f43.png\" alt=\"image.png\">\n<figcaption aria-hidden=\"true\">image.png</figcaption>\n</figure>\n<div class=\"sourceCode\" id=\"cb34\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb34-1\"><a href=\"#cb34-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> majorityCnt(classList):</span>\n<span id=\"cb34-2\"><a href=\"#cb34-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    classCount <span class=\"op\">=</span> &#123;&#125;</span>\n<span id=\"cb34-3\"><a href=\"#cb34-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> vote <span class=\"kw\">in</span> classCount:</span>\n<span id=\"cb34-4\"><a href=\"#cb34-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> vote <span class=\"kw\">not</span> <span class=\"kw\">in</span> classCount.keys():</span>\n<span id=\"cb34-5\"><a href=\"#cb34-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>            classCount[vote] <span class=\"op\">=</span><span class=\"dv\">0</span></span>\n<span id=\"cb34-6\"><a href=\"#cb34-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        classCount[vote] <span class=\"op\">+=</span> <span class=\"dv\">1</span></span>\n<span id=\"cb34-7\"><a href=\"#cb34-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    sortedClassCount <span class=\"op\">=</span> <span class=\"bu\">sorted</span>(classCount.items(), key<span class=\"op\">=</span>operator.itemgetter(<span class=\"dv\">1</span>), reverse <span class=\"op\">=</span><span class=\"va\">True</span>)</span>\n<span id=\"cb34-8\"><a href=\"#cb34-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> sortedClassCount[<span class=\"dv\">0</span>][<span class=\"dv\">0</span>]</span></code></pre></div>\n<p><strong>majorityCnt() 与投票表决代码非常类似</strong></p>\n<ol type=\"1\">\n<li>该函数使用分类名称的列表，</li>\n<li>然后创建键值为classList中唯一值的数据字典，字典对象存储了classList中每个类标签出现的频率</li>\n<li>最后利用operator操作键值排序字典，并返回出现次数最多的分类名称。</li>\n</ol>\n<div class=\"sourceCode\" id=\"cb35\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb35-1\"><a href=\"#cb35-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>myData[<span class=\"dv\">0</span>]</span></code></pre></div>\n<pre><code>[1, 1, &#39;yes&#39;]</code></pre>\n<div class=\"sourceCode\" id=\"cb37\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb37-1\"><a href=\"#cb37-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># 创建决策树</span></span>\n<span id=\"cb37-2\"><a href=\"#cb37-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> createTree(dataSet,labels):</span>\n<span id=\"cb37-3\"><a href=\"#cb37-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    classList <span class=\"op\">=</span> [example[<span class=\"op\">-</span><span class=\"dv\">1</span>] <span class=\"cf\">for</span> example <span class=\"kw\">in</span> dataSet]</span>\n<span id=\"cb37-4\"><a href=\"#cb37-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(<span class=\"st\">&quot;labels:&quot;</span>,labels)</span>\n<span id=\"cb37-5\"><a href=\"#cb37-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(<span class=\"st\">&quot;classList:&quot;</span>,classList)</span>\n<span id=\"cb37-6\"><a href=\"#cb37-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(<span class=\"st\">&quot;classList[0]:&quot;</span>,classList[<span class=\"dv\">0</span>])</span>\n<span id=\"cb37-7\"><a href=\"#cb37-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(<span class=\"st\">&quot;classList.count(classList[0]):&quot;</span>,classList.count(classList[<span class=\"dv\">0</span>]))</span>\n<span id=\"cb37-8\"><a href=\"#cb37-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb37-9\"><a href=\"#cb37-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">## 类别相同则停止划分</span></span>\n<span id=\"cb37-10\"><a href=\"#cb37-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> classList.count(classList[<span class=\"dv\">0</span>]) <span class=\"op\">==</span> <span class=\"bu\">len</span>(classList):</span>\n<span id=\"cb37-11\"><a href=\"#cb37-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> classList[<span class=\"dv\">0</span>]</span>\n<span id=\"cb37-12\"><a href=\"#cb37-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb37-13\"><a href=\"#cb37-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">## 遍历完所有特征时 返回出现次数最多的</span></span>\n<span id=\"cb37-14\"><a href=\"#cb37-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"bu\">len</span>(dataSet[<span class=\"dv\">0</span>]) <span class=\"op\">==</span> <span class=\"dv\">1</span>:</span>\n<span id=\"cb37-15\"><a href=\"#cb37-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> majorityCnt(classList)</span>\n<span id=\"cb37-16\"><a href=\"#cb37-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb37-17\"><a href=\"#cb37-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    bestFeat <span class=\"op\">=</span> chooseBestFeatureToSplit(dataSet)</span>\n<span id=\"cb37-18\"><a href=\"#cb37-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>    bestFeatLabel <span class=\"op\">=</span> labels[bestFeat] </span>\n<span id=\"cb37-19\"><a href=\"#cb37-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(<span class=\"st\">&quot;bestFeatLabel&quot;</span>,bestFeatLabel)</span>\n<span id=\"cb37-20\"><a href=\"#cb37-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>    myTree <span class=\"op\">=</span> &#123;bestFeatLabel:&#123;&#125;&#125;</span>\n<span id=\"cb37-21\"><a href=\"#cb37-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(<span class=\"st\">&quot;myTree:::&quot;</span>,myTree)</span>\n<span id=\"cb37-22\"><a href=\"#cb37-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">del</span>(labels[bestFeat])</span>\n<span id=\"cb37-23\"><a href=\"#cb37-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(<span class=\"st\">&quot;labels:&quot;</span>,labels)</span>\n<span id=\"cb37-24\"><a href=\"#cb37-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>    featValues <span class=\"op\">=</span> [example[bestFeat] <span class=\"cf\">for</span> example <span class=\"kw\">in</span> dataSet]</span>\n<span id=\"cb37-25\"><a href=\"#cb37-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>    uniqueVals <span class=\"op\">=</span> <span class=\"bu\">set</span>(featValues)</span>\n<span id=\"cb37-26\"><a href=\"#cb37-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> value <span class=\"kw\">in</span> uniqueVals:</span>\n<span id=\"cb37-27\"><a href=\"#cb37-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>        subLabels <span class=\"op\">=</span> labels[:]</span>\n<span id=\"cb37-28\"><a href=\"#cb37-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">print</span>(<span class=\"st\">&quot;subLabels:&quot;</span>,subLabels)</span>\n<span id=\"cb37-29\"><a href=\"#cb37-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>        myTree[bestFeatLabel][value] <span class=\"op\">=</span> createTree(splitDataSet(dataSet, bestFeat, value),subLabels)</span>\n<span id=\"cb37-30\"><a href=\"#cb37-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> myTree</span></code></pre></div>\n<p><strong>代码注释</strong></p>\n<ul>\n<li>使用两个输入参数：数据集和标签列表</li>\n</ul>\n<ol type=\"1\">\n<li>首先创建了名为classList的列表变量，其中包含了数据集的所有类标签</li>\n<li>递归函数的第一个停止条件是所有的类标签完全相同，则直接返回该类标签</li>\n<li>递归函数的第二个停止条件是使用完了所有特征，仍然不能将数据集划分成仅包含唯一类别的分组</li>\n<li>字典变量myTree存储了树的所有信息，这对于其后绘制树形图非常重要。当前数据集选取的最好特征存储在变量bestFeat中，得到列表包含的所有属性值</li>\n<li>最后代码遍历当前选择特征包含的所有属性值，在每个数据集划分上递归调用函数\ncreateTree()，得到的返回值将被插入到字典变量myTree中</li>\n</ol>\n<div class=\"sourceCode\" id=\"cb38\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb38-1\"><a href=\"#cb38-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>myData,labels <span class=\"op\">=</span> createDataSet()</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb39\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb39-1\"><a href=\"#cb39-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>createTree(myData,labels)</span></code></pre></div>\n<pre><code>labels: [&#39;no surfacing&#39;, &#39;flippers&#39;]\nclassList: [&#39;yes&#39;, &#39;yes&#39;, &#39;no&#39;, &#39;no&#39;, &#39;no&#39;]\nclassList[0]: yes\nclassList.count(classList[0]): 2\nbaseEntropy: 0.9709505944546686\nfeatList: [1, 1, 1, 0, 0]\nuniqueVals: &#123;0, 1&#125;\nfeatVec [1, 1, &#39;yes&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\nfeatVec [1, 0, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\naxis 0 featVec[axis] 0\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;no&#39;]\naxis 0 reducedFeatVec: [1, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\naxis 0 featVec[axis] 0\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;no&#39;]\naxis 0 reducedFeatVec: [1, &#39;no&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;yes&#39;]\naxis 0 reducedFeatVec: [1, &#39;yes&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;yes&#39;]\naxis 0 reducedFeatVec: [1, &#39;yes&#39;]\nfeatVec [1, 0, &#39;no&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [0, &#39;no&#39;]\naxis 0 reducedFeatVec: [0, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\nbaseEntropy 0.9709505944546686 i: 0 newEntropy 0.5509775004326937 infoGain 0.4199730940219749\nfeatList: [1, 1, 0, 1, 1]\nuniqueVals: &#123;0, 1&#125;\nfeatVec [1, 1, &#39;yes&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\nfeatVec [1, 0, &#39;no&#39;]\naxis 1 featVec[axis] 0\naxis 1 reducedFeatVec: [1]\nfeatVec[axis+1:] [&#39;no&#39;]\naxis 1 reducedFeatVec: [1, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\naxis 1 featVec[axis] 1\naxis 1 reducedFeatVec: [1]\nfeatVec[axis+1:] [&#39;yes&#39;]\naxis 1 reducedFeatVec: [1, &#39;yes&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\naxis 1 featVec[axis] 1\naxis 1 reducedFeatVec: [1]\nfeatVec[axis+1:] [&#39;yes&#39;]\naxis 1 reducedFeatVec: [1, &#39;yes&#39;]\nfeatVec [1, 0, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\naxis 1 featVec[axis] 1\naxis 1 reducedFeatVec: [0]\nfeatVec[axis+1:] [&#39;no&#39;]\naxis 1 reducedFeatVec: [0, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\naxis 1 featVec[axis] 1\naxis 1 reducedFeatVec: [0]\nfeatVec[axis+1:] [&#39;no&#39;]\naxis 1 reducedFeatVec: [0, &#39;no&#39;]\nbaseEntropy 0.9709505944546686 i: 1 newEntropy 0.8 infoGain 0.17095059445466854\nbestFeatLabel no surfacing\nmyTree::: &#123;&#39;no surfacing&#39;: &#123;&#125;&#125;\nlabels: [&#39;flippers&#39;]\nsubLabels: [&#39;flippers&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\nfeatVec [1, 0, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\naxis 0 featVec[axis] 0\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;no&#39;]\naxis 0 reducedFeatVec: [1, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\naxis 0 featVec[axis] 0\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;no&#39;]\naxis 0 reducedFeatVec: [1, &#39;no&#39;]\nlabels: [&#39;flippers&#39;]\nclassList: [&#39;no&#39;, &#39;no&#39;]\nclassList[0]: no\nclassList.count(classList[0]): 2\nsubLabels: [&#39;flippers&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;yes&#39;]\naxis 0 reducedFeatVec: [1, &#39;yes&#39;]\nfeatVec [1, 1, &#39;yes&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [1, &#39;yes&#39;]\naxis 0 reducedFeatVec: [1, &#39;yes&#39;]\nfeatVec [1, 0, &#39;no&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [0, &#39;no&#39;]\naxis 0 reducedFeatVec: [0, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\nfeatVec [0, 1, &#39;no&#39;]\nlabels: [&#39;flippers&#39;]\nclassList: [&#39;yes&#39;, &#39;yes&#39;, &#39;no&#39;]\nclassList[0]: yes\nclassList.count(classList[0]): 2\nbaseEntropy: 0.9182958340544896\nfeatList: [1, 1, 0]\nuniqueVals: &#123;0, 1&#125;\nfeatVec [1, &#39;yes&#39;]\nfeatVec [1, &#39;yes&#39;]\nfeatVec [0, &#39;no&#39;]\naxis 0 featVec[axis] 0\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [&#39;no&#39;]\naxis 0 reducedFeatVec: [&#39;no&#39;]\nfeatVec [1, &#39;yes&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [&#39;yes&#39;]\naxis 0 reducedFeatVec: [&#39;yes&#39;]\nfeatVec [1, &#39;yes&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [&#39;yes&#39;]\naxis 0 reducedFeatVec: [&#39;yes&#39;]\nfeatVec [0, &#39;no&#39;]\nbaseEntropy 0.9182958340544896 i: 0 newEntropy 0.0 infoGain 0.9182958340544896\nbestFeatLabel flippers\nmyTree::: &#123;&#39;flippers&#39;: &#123;&#125;&#125;\nlabels: []\nsubLabels: []\nfeatVec [1, &#39;yes&#39;]\nfeatVec [1, &#39;yes&#39;]\nfeatVec [0, &#39;no&#39;]\naxis 0 featVec[axis] 0\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [&#39;no&#39;]\naxis 0 reducedFeatVec: [&#39;no&#39;]\nlabels: []\nclassList: [&#39;no&#39;]\nclassList[0]: no\nclassList.count(classList[0]): 1\nsubLabels: []\nfeatVec [1, &#39;yes&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [&#39;yes&#39;]\naxis 0 reducedFeatVec: [&#39;yes&#39;]\nfeatVec [1, &#39;yes&#39;]\naxis 0 featVec[axis] 1\naxis 0 reducedFeatVec: []\nfeatVec[axis+1:] [&#39;yes&#39;]\naxis 0 reducedFeatVec: [&#39;yes&#39;]\nfeatVec [0, &#39;no&#39;]\nlabels: []\nclassList: [&#39;yes&#39;, &#39;yes&#39;]\nclassList[0]: yes\nclassList.count(classList[0]): 2\n\n\n\n\n\n&#123;&#39;no surfacing&#39;: &#123;0: &#39;no&#39;, 1: &#123;&#39;flippers&#39;: &#123;0: &#39;no&#39;, 1: &#39;yes&#39;&#125;&#125;&#125;&#125;</code></pre>\n<h2 id=\"使用matplotlib注解绘制-树形图\">使用matplotlib注解绘制\n树形图</h2>\n<div class=\"sourceCode\" id=\"cb41\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb41-1\"><a href=\"#cb41-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> matplotlib.pyplot <span class=\"im\">as</span> plt</span>\n<span id=\"cb41-2\"><a href=\"#cb41-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> matplotlib.font_manager <span class=\"im\">import</span> FontProperties</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb42\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb42-1\"><a href=\"#cb42-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>simheifont <span class=\"op\">=</span> FontProperties(fname<span class=\"op\">=</span><span class=\"st\">&#39;../simhei.ttf&#39;</span>)</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb43\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb43-1\"><a href=\"#cb43-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>decisionNode <span class=\"op\">=</span> <span class=\"bu\">dict</span>(boxstyle<span class=\"op\">=</span><span class=\"st\">&quot;sawtooth&quot;</span>, fc<span class=\"op\">=</span><span class=\"st\">&quot;0.8&quot;</span>)</span>\n<span id=\"cb43-2\"><a href=\"#cb43-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>leafNode <span class=\"op\">=</span> <span class=\"bu\">dict</span>(boxstyle<span class=\"op\">=</span><span class=\"st\">&quot;round4&quot;</span>, fc<span class=\"op\">=</span><span class=\"st\">&quot;0.8&quot;</span>)</span>\n<span id=\"cb43-3\"><a href=\"#cb43-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>arrow_args <span class=\"op\">=</span> <span class=\"bu\">dict</span>(arrowstyle<span class=\"op\">=</span><span class=\"st\">&quot;&lt;-&quot;</span>)</span>\n<span id=\"cb43-4\"><a href=\"#cb43-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> plotNode(nodeTxt,centerPt,parentPt,nodeType):</span>\n<span id=\"cb43-5\"><a href=\"#cb43-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    createPlot.ax1.annotate(nodeTxt,xy<span class=\"op\">=</span>parentPt, xycoords<span class=\"op\">=</span><span class=\"st\">&#39;axes fraction&#39;</span>, </span>\n<span id=\"cb43-6\"><a href=\"#cb43-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>                            xytext<span class=\"op\">=</span>centerPt, textcoords <span class=\"op\">=</span><span class=\"st\">&#39;axes fraction&#39;</span>,</span>\n<span id=\"cb43-7\"><a href=\"#cb43-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>                            va<span class=\"op\">=</span><span class=\"st\">&quot;center&quot;</span>,ha<span class=\"op\">=</span><span class=\"st\">&quot;center&quot;</span>,bbox<span class=\"op\">=</span>nodeType, arrowprops<span class=\"op\">=</span>arrow_args,</span>\n<span id=\"cb43-8\"><a href=\"#cb43-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>                            fontproperties<span class=\"op\">=</span> simheifont)</span>\n<span id=\"cb43-9\"><a href=\"#cb43-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> createPlot():</span>\n<span id=\"cb43-10\"><a href=\"#cb43-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    fig <span class=\"op\">=</span> plt.figure(<span class=\"dv\">1</span>, facecolor<span class=\"op\">=</span><span class=\"st\">&#39;white&#39;</span>)</span>\n<span id=\"cb43-11\"><a href=\"#cb43-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    fig.clf()</span>\n<span id=\"cb43-12\"><a href=\"#cb43-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    createPlot.ax1 <span class=\"op\">=</span> plt.subplot(<span class=\"dv\">111</span>,frameon<span class=\"op\">=</span><span class=\"va\">False</span>)</span>\n<span id=\"cb43-13\"><a href=\"#cb43-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plotNode(<span class=\"st\">&quot;决策节点&quot;</span>,(<span class=\"fl\">0.5</span>,<span class=\"fl\">0.1</span>),(<span class=\"fl\">0.1</span>,<span class=\"fl\">0.5</span>),decisionNode)</span>\n<span id=\"cb43-14\"><a href=\"#cb43-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plotNode(<span class=\"st\">&quot;叶节点&quot;</span>,(<span class=\"fl\">0.8</span>,<span class=\"fl\">0.1</span>),(<span class=\"fl\">0.3</span>,<span class=\"fl\">0.8</span>), leafNode)</span>\n<span id=\"cb43-15\"><a href=\"#cb43-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.show()</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb44\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb44-1\"><a href=\"#cb44-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>createPlot()</span></code></pre></div>\n<p>[png](C:/Users/YSilhouette/AppData/Local/Temp/360zip$Temp/360(/output_43_0.png)</p>\n<h3 id=\"构造注解树\">构造注解树</h3>\n<p><strong>获得多少叶节点-- X轴的长度</strong></p>\n<p><strong>获得树有多少层-- y轴的高度</strong></p>\n<div class=\"sourceCode\" id=\"cb45\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb45-1\"><a href=\"#cb45-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># 获取叶节点和树的层数</span></span>\n<span id=\"cb45-2\"><a href=\"#cb45-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> getNumLeafs(myTree):</span>\n<span id=\"cb45-3\"><a href=\"#cb45-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    numLeafs <span class=\"op\">=</span> <span class=\"dv\">0</span></span>\n<span id=\"cb45-4\"><a href=\"#cb45-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    firstStr <span class=\"op\">=</span> <span class=\"bu\">list</span>(myTree.keys())[<span class=\"dv\">0</span>]</span>\n<span id=\"cb45-5\"><a href=\"#cb45-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    secondDict <span class=\"op\">=</span> myTree[firstStr]</span>\n<span id=\"cb45-6\"><a href=\"#cb45-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> key <span class=\"kw\">in</span> secondDict.keys():</span>\n<span id=\"cb45-7\"><a href=\"#cb45-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"bu\">type</span>(secondDict[key]).<span class=\"va\">__name__</span> <span class=\"op\">==</span> <span class=\"st\">&#39;dict&#39;</span>:   <span class=\"co\">## 测试节点的数据类型是否字典</span></span>\n<span id=\"cb45-8\"><a href=\"#cb45-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>            numLeafs <span class=\"op\">+=</span> getNumLeafs(secondDict[key])</span>\n<span id=\"cb45-9\"><a href=\"#cb45-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">else</span>:</span>\n<span id=\"cb45-10\"><a href=\"#cb45-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>            numLeafs <span class=\"op\">+=</span> <span class=\"dv\">1</span></span>\n<span id=\"cb45-11\"><a href=\"#cb45-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> numLeafs</span>\n<span id=\"cb45-12\"><a href=\"#cb45-12\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb45-13\"><a href=\"#cb45-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> getTreeDepth(myTree):</span>\n<span id=\"cb45-14\"><a href=\"#cb45-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    maxDepth <span class=\"op\">=</span> <span class=\"dv\">0</span></span>\n<span id=\"cb45-15\"><a href=\"#cb45-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    firstStr <span class=\"op\">=</span> <span class=\"bu\">list</span>(myTree.keys())[<span class=\"dv\">0</span>]</span>\n<span id=\"cb45-16\"><a href=\"#cb45-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    secondDict <span class=\"op\">=</span> myTree[firstStr]</span>\n<span id=\"cb45-17\"><a href=\"#cb45-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> key <span class=\"kw\">in</span> secondDict.keys():</span>\n<span id=\"cb45-18\"><a href=\"#cb45-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"bu\">type</span>(secondDict[key]).<span class=\"va\">__name__</span> <span class=\"op\">==</span> <span class=\"st\">&#39;dict&#39;</span>:   <span class=\"co\">## 测试节点的数据类型是否字典</span></span>\n<span id=\"cb45-19\"><a href=\"#cb45-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>            thisDepth <span class=\"op\">=</span> <span class=\"dv\">1</span> <span class=\"op\">+</span> getTreeDepth(secondDict[key])</span>\n<span id=\"cb45-20\"><a href=\"#cb45-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">else</span>:</span>\n<span id=\"cb45-21\"><a href=\"#cb45-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>            thisDepth <span class=\"op\">=</span> <span class=\"dv\">1</span></span>\n<span id=\"cb45-22\"><a href=\"#cb45-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> thisDepth <span class=\"op\">&gt;</span> maxDepth:</span>\n<span id=\"cb45-23\"><a href=\"#cb45-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>            maxDepth <span class=\"op\">=</span> thisDepth</span>\n<span id=\"cb45-24\"><a href=\"#cb45-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> maxDepth</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb46\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb46-1\"><a href=\"#cb46-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> retrieveTree(i):</span>\n<span id=\"cb46-2\"><a href=\"#cb46-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    listOfTrees <span class=\"op\">=</span> [</span>\n<span id=\"cb46-3\"><a href=\"#cb46-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>        &#123;<span class=\"st\">&#39;no surfacing&#39;</span>:&#123;<span class=\"dv\">0</span>:<span class=\"st\">&#39;no&#39;</span>,<span class=\"dv\">1</span>:&#123;<span class=\"st\">&#39;flippers&#39;</span>:&#123;<span class=\"dv\">0</span>:<span class=\"st\">&#39;no&#39;</span>,<span class=\"dv\">1</span>:<span class=\"st\">&#39;yes&#39;</span>&#125;&#125;&#125;&#125;,</span>\n<span id=\"cb46-4\"><a href=\"#cb46-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>        &#123;<span class=\"st\">&#39;no serfacing&#39;</span>:&#123;<span class=\"dv\">0</span>:<span class=\"st\">&#39;no&#39;</span>,<span class=\"dv\">1</span>:&#123;<span class=\"st\">&#39;flippers&#39;</span>:&#123;<span class=\"dv\">0</span>:&#123;<span class=\"st\">&#39;head&#39;</span>:&#123;<span class=\"dv\">0</span>:<span class=\"st\">&#39;no&#39;</span>,<span class=\"dv\">1</span>:<span class=\"st\">&#39;yes&#39;</span>&#125;&#125;,<span class=\"dv\">1</span>:<span class=\"st\">&#39;no&#39;</span>&#125;&#125;&#125;&#125;</span>\n<span id=\"cb46-5\"><a href=\"#cb46-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    ]</span>\n<span id=\"cb46-6\"><a href=\"#cb46-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> listOfTrees[i]</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb47\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb47-1\"><a href=\"#cb47-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>retrieveTree(<span class=\"dv\">1</span>)</span></code></pre></div>\n<pre><code>&#123;&#39;no serfacing&#39;: &#123;0: &#39;no&#39;,\n  1: &#123;&#39;flippers&#39;: &#123;0: &#123;&#39;head&#39;: &#123;0: &#39;no&#39;, 1: &#39;yes&#39;&#125;&#125;, 1: &#39;no&#39;&#125;&#125;&#125;&#125;</code></pre>\n<div class=\"sourceCode\" id=\"cb49\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb49-1\"><a href=\"#cb49-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>myTree <span class=\"op\">=</span> retrieveTree(<span class=\"dv\">0</span>)</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb50\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb50-1\"><a href=\"#cb50-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">list</span>(myTree.keys())[<span class=\"dv\">0</span>]</span></code></pre></div>\n<pre><code>&#39;no surfacing&#39;</code></pre>\n<div class=\"sourceCode\" id=\"cb52\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb52-1\"><a href=\"#cb52-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>getNumLeafs(myTree)</span></code></pre></div>\n<pre><code>3</code></pre>\n<div class=\"sourceCode\" id=\"cb54\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb54-1\"><a href=\"#cb54-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>getTreeDepth(myTree)</span></code></pre></div>\n<pre><code>2</code></pre>\n<div class=\"sourceCode\" id=\"cb56\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb56-1\"><a href=\"#cb56-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> plotMidText(cntrPt, parentPt, txtString):</span>\n<span id=\"cb56-2\"><a href=\"#cb56-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    xMid <span class=\"op\">=</span> (parentPt[<span class=\"dv\">0</span>] <span class=\"op\">-</span> cntrPt[<span class=\"dv\">0</span>]) <span class=\"op\">/</span><span class=\"fl\">2.0</span> <span class=\"op\">+</span> cntrPt[<span class=\"dv\">0</span>]</span>\n<span id=\"cb56-3\"><a href=\"#cb56-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    yMid <span class=\"op\">=</span> (parentPt[<span class=\"dv\">1</span>] <span class=\"op\">-</span> cntrPt[<span class=\"dv\">1</span>]) <span class=\"op\">/</span><span class=\"fl\">2.0</span> <span class=\"op\">+</span> cntrPt[<span class=\"dv\">1</span>]</span>\n<span id=\"cb56-4\"><a href=\"#cb56-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    createPlot.ax1.text(xMid,yMid, txtString)</span>\n<span id=\"cb56-5\"><a href=\"#cb56-5\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb56-6\"><a href=\"#cb56-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> plotTree(myTree, parentPt, nodeText):</span>\n<span id=\"cb56-7\"><a href=\"#cb56-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    numLeafs <span class=\"op\">=</span> getNumLeafs(myTree)</span>\n<span id=\"cb56-8\"><a href=\"#cb56-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    depth <span class=\"op\">=</span> getTreeDepth(myTree)</span>\n<span id=\"cb56-9\"><a href=\"#cb56-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb56-10\"><a href=\"#cb56-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    firstStr <span class=\"op\">=</span> <span class=\"bu\">list</span>(myTree.keys())[<span class=\"dv\">0</span>]</span>\n<span id=\"cb56-11\"><a href=\"#cb56-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    cntrPt <span class=\"op\">=</span> (plotTree.xOff <span class=\"op\">+</span> (<span class=\"fl\">1.0</span> <span class=\"op\">+</span> <span class=\"bu\">float</span>(numLeafs)) <span class=\"op\">/</span><span class=\"fl\">2.0</span> <span class=\"op\">/</span> plotTree.totalW, plotTree.yOff)</span>\n<span id=\"cb56-12\"><a href=\"#cb56-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plotMidText(cntrPt, parentPt, nodeText)</span>\n<span id=\"cb56-13\"><a href=\"#cb56-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plotNode(firstStr, cntrPt, parentPt, decisionNode)</span>\n<span id=\"cb56-14\"><a href=\"#cb56-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb56-15\"><a href=\"#cb56-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    secondDict <span class=\"op\">=</span> myTree[firstStr]</span>\n<span id=\"cb56-16\"><a href=\"#cb56-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plotTree.yOff <span class=\"op\">=</span> plotTree.yOff <span class=\"op\">-</span> <span class=\"fl\">1.0</span> <span class=\"op\">/</span> plotTree.totalD</span>\n<span id=\"cb56-17\"><a href=\"#cb56-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> key <span class=\"kw\">in</span> secondDict.keys():</span>\n<span id=\"cb56-18\"><a href=\"#cb56-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"bu\">type</span>(secondDict[key]).<span class=\"va\">__name__</span> <span class=\"op\">==</span> <span class=\"st\">&#39;dict&#39;</span>:</span>\n<span id=\"cb56-19\"><a href=\"#cb56-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>            plotTree(secondDict[key], cntrPt, <span class=\"bu\">str</span>(key))</span>\n<span id=\"cb56-20\"><a href=\"#cb56-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">else</span>:</span>\n<span id=\"cb56-21\"><a href=\"#cb56-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>            plotTree.xOff <span class=\"op\">=</span> plotTree.xOff <span class=\"op\">+</span> <span class=\"fl\">1.0</span> <span class=\"op\">/</span> plotTree.totalW</span>\n<span id=\"cb56-22\"><a href=\"#cb56-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>            plotNode(secondDict[key], (plotTree.xOff, plotTree.yOff), cntrPt, leafNode)</span>\n<span id=\"cb56-23\"><a href=\"#cb56-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>            plotMidText((plotTree.xOff, plotTree.yOff), cntrPt,<span class=\"bu\">str</span>(key))</span>\n<span id=\"cb56-24\"><a href=\"#cb56-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plotTree.yOff <span class=\"op\">=</span> plotTree.yOff <span class=\"op\">+</span> <span class=\"fl\">1.0</span> <span class=\"op\">/</span> plotTree.totalD</span>\n<span id=\"cb56-25\"><a href=\"#cb56-25\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb56-26\"><a href=\"#cb56-26\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> createPlot(inTree):</span>\n<span id=\"cb56-27\"><a href=\"#cb56-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>    fig <span class=\"op\">=</span> plt.figure(<span class=\"dv\">1</span>, facecolor<span class=\"op\">=</span><span class=\"st\">&#39;white&#39;</span>)</span>\n<span id=\"cb56-28\"><a href=\"#cb56-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>    fig.clf()</span>\n<span id=\"cb56-29\"><a href=\"#cb56-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>    axprops <span class=\"op\">=</span> <span class=\"bu\">dict</span>(xticks<span class=\"op\">=</span>[], yticks<span class=\"op\">=</span>[])</span>\n<span id=\"cb56-30\"><a href=\"#cb56-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>    createPlot.ax1 <span class=\"op\">=</span> plt.subplot(<span class=\"dv\">111</span>, frameon<span class=\"op\">=</span><span class=\"va\">False</span>, <span class=\"op\">**</span>axprops)</span>\n<span id=\"cb56-31\"><a href=\"#cb56-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plotTree.totalW <span class=\"op\">=</span> <span class=\"bu\">float</span>(getNumLeafs(inTree))</span>\n<span id=\"cb56-32\"><a href=\"#cb56-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plotTree.totalD <span class=\"op\">=</span> <span class=\"bu\">float</span>(getTreeDepth(inTree))</span>\n<span id=\"cb56-33\"><a href=\"#cb56-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plotTree.xOff <span class=\"op\">=</span> <span class=\"op\">-</span> <span class=\"fl\">0.5</span><span class=\"op\">/</span> plotTree.totalW</span>\n<span id=\"cb56-34\"><a href=\"#cb56-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plotTree.yOff <span class=\"op\">=</span> <span class=\"fl\">1.0</span></span>\n<span id=\"cb56-35\"><a href=\"#cb56-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plotTree(inTree,(<span class=\"fl\">0.5</span>,<span class=\"fl\">1.0</span>),<span class=\"st\">&#39;&#39;</span>)</span>\n<span id=\"cb56-36\"><a href=\"#cb56-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.show()</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb57\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb57-1\"><a href=\"#cb57-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>mytree <span class=\"op\">=</span> retrieveTree(<span class=\"dv\">0</span>)</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb58\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb58-1\"><a href=\"#cb58-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>mytree</span></code></pre></div>\n<pre><code>&#123;&#39;no surfacing&#39;: &#123;0: &#39;no&#39;, 1: &#123;&#39;flippers&#39;: &#123;0: &#39;no&#39;, 1: &#39;yes&#39;&#125;&#125;&#125;&#125;</code></pre>\n<div class=\"sourceCode\" id=\"cb60\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb60-1\"><a href=\"#cb60-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>createPlot(mytree)</span></code></pre></div>\n<p>[png](C:/Users/YSilhouette/AppData/Local/Temp/360zip$Temp/360(/output_56_0.png)</p>\n<div class=\"sourceCode\" id=\"cb61\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb61-1\"><a href=\"#cb61-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>mytree[<span class=\"st\">&#39;no surfacing&#39;</span>][<span class=\"dv\">3</span>]<span class=\"op\">=</span> <span class=\"st\">&#39;maybe&#39;</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb62\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb62-1\"><a href=\"#cb62-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>mytree</span></code></pre></div>\n<pre><code>&#123;&#39;no surfacing&#39;: &#123;0: &#39;no&#39;, 1: &#123;&#39;flippers&#39;: &#123;0: &#39;no&#39;, 1: &#39;yes&#39;&#125;&#125;, 3: &#39;maybe&#39;&#125;&#125;</code></pre>\n<div class=\"sourceCode\" id=\"cb64\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb64-1\"><a href=\"#cb64-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>createPlot(mytree)</span></code></pre></div>\n<p>[png](C:/Users/YSilhouette/AppData/Local/Temp/360zip$Temp/360(/output_59_0.png)</p>\n<div class=\"sourceCode\" id=\"cb65\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"></code></pre></div>\n<hr>\n<h3 id=\"about-me\">About ME</h3>\n<h5 id=\"读书城南-在未来面前我们都是孩子\">👋 读书城南，🤔\n在未来面前，我们都是孩子～</h5>\n<ul>\n<li>📙\n一个热衷于探索学习新方向、新事物的智能产品经理，闲暇时间喜欢coding💻、画图🎨、音乐🎵、学习ing~</li>\n</ul>\n<h5 id=\"social-media\">👋 Social Media</h5>\n<ul>\n<li><p>🛠️ Blog: <a href=\"http://oceaneyes.top\">http://oceaneyes.top</a></p></li>\n<li><p>⚡ PM导航: <a href=\"https://pmhub.oceangzy.top\">https://pmhub.oceangzy.top</a></p></li>\n<li><p>☘️ CNBLOG: <a href=\"https://www.cnblogs.com/oceaneyes-gzy/\">https://www.cnblogs.com/oceaneyes-gzy/</a></p></li>\n<li><p>🌱 AI PRJ自己部署的一些算法demo: <a href=\"http://ai.oceangzy.top/\">http://ai.oceangzy.top/</a></p></li>\n<li><p>📫 Email: 1450136519@qq.com</p></li>\n<li><p>💬 WeChat: <a href=\"https://oceaneyes.top/img/wechatqrcode.jpg\">OCEANGZY</a></p></li>\n<li><p>💬 公众号: <a href=\"https://oceaneyes.top/img/wechatgzh.jpeg\">UncleJoker-GZY</a></p></li>\n</ul>\n<h5 id=\"加入小组\">👋 加入小组~</h5>\n<p><img src=\"https://oceaneyes.top/img/zhishigroup.jpg\" title=\"加入组织\" alt width=\"240\"></p>\n<h5 id=\"感谢打赏\">👋 感谢打赏~</h5>\n<p><img src=\"https://oceaneyes.top/img/alipay.jpg\" title=\"支付宝打赏\" alt width=\"140\">\n<img src=\"https://oceaneyes.top/img/wechatpay.jpg\" title=\"微信打赏\" alt width=\"140\"></p>\n","categories":[{"name":"Artificial Intelligence","path":"api/categories/Artificial Intelligence.json"},{"name":"Machine Learning","path":"api/categories/Machine Learning.json"},{"name":"Algorithm","path":"api/categories/Algorithm.json"}],"tags":[{"name":"Machine Learning","path":"api/tags/Machine Learning.json"},{"name":"Algorithm","path":"api/tags/Algorithm.json"},{"name":"决策树","path":"api/tags/决策树.json"}]}