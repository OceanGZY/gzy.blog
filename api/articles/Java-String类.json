{"title":"Java-String类","slug":"Java-String类","date":"2016-03-02T15:20:00.000Z","updated":"2022-09-30T06:56:37.158Z","comments":true,"path":"api/articles/Java-String类.json","excerpt":null,"covers":["https://oceaneyes.top/img/zhishigroup.jpg","https://oceaneyes.top/img/alipay.jpg","https://oceaneyes.top/img/wechatpay.jpg"],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"java-string类\">Java-String类</h1>\n<pre><code>public class StringDemo &#123;\n    //String 方法\n    /*\n        SN(序号)  方法描述\n1   char charAt(int index)\n返回指定索引处的 char 值。\n2   int compareTo(Object o)\n把这个字符串和另一个对象比较。\n3   int compareTo(String anotherString)\n按字典顺序比较两个字符串。\n4   int compareToIgnoreCase(String str)\n按字典顺序比较两个字符串，不考虑大小写。\n5   String concat(String str)\n将指定字符串连接到此字符串的结尾。\n6   boolean contentEquals(StringBuffer sb)\n当且仅当字符串与指定的StringBuffer有相同顺序的字符时候返回真。\n7   static String copyValueOf(char[] data)\n返回指定数组中表示该字符序列的 String。\n8   static String copyValueOf(char[] data, int offset, int count)\n返回指定数组中表示该字符序列的 String。\n9   boolean endsWith(String suffix)\n测试此字符串是否以指定的后缀结束。\n10  boolean equals(Object anObject)\n将此字符串与指定的对象比较。\n11  boolean equalsIgnoreCase(String anotherString)\n将此 String 与另一个 String 比较，不考虑大小写。\n12  byte[] getBytes()\n 使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。\n13  byte[] getBytes(String charsetName)\n使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。\n14  void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)\n将字符从此字符串复制到目标字符数组。\n15  int hashCode()\n返回此字符串的哈希码。\n16  int indexOf(int ch)\n返回指定字符在此字符串中第一次出现处的索引。\n17  int indexOf(int ch, int fromIndex)\n返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。\n18  int indexOf(String str)\n 返回指定子字符串在此字符串中第一次出现处的索引。\n19  int indexOf(String str, int fromIndex)\n返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。\n20  String intern()\n 返回字符串对象的规范化表示形式。\n21  int lastIndexOf(int ch)\n 返回指定字符在此字符串中最后一次出现处的索引。\n22  int lastIndexOf(int ch, int fromIndex)\n返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。\n23  int lastIndexOf(String str)\n返回指定子字符串在此字符串中最右边出现处的索引。\n24  int lastIndexOf(String str, int fromIndex)\n 返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。\n25  int length()\n返回此字符串的长度。\n26  boolean matches(String regex)\n告知此字符串是否匹配给定的正则表达式。\n27  boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)\n测试两个字符串区域是否相等。\n28  boolean regionMatches(int toffset, String other, int ooffset, int len)\n测试两个字符串区域是否相等。\n29  String replace(char oldChar, char newChar)\n返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。\n30  String replaceAll(String regex, String replacement)\n使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。\n31  String replaceFirst(String regex, String replacement)\n 使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。\n32  String[] split(String regex)\n根据给定正则表达式的匹配拆分此字符串。\n33  String[] split(String regex, int limit)\n根据匹配给定的正则表达式来拆分此字符串。\n34  boolean startsWith(String prefix)\n测试此字符串是否以指定的前缀开始。\n35  boolean startsWith(String prefix, int toffset)\n测试此字符串从指定索引开始的子字符串是否以指定前缀开始。\n36  CharSequence subSequence(int beginIndex, int endIndex)\n 返回一个新的字符序列，它是此序列的一个子序列。\n37  String substring(int beginIndex)\n返回一个新的字符串，它是此字符串的一个子字符串。\n38  String substring(int beginIndex, int endIndex)\n返回一个新字符串，它是此字符串的一个子字符串。\n39  char[] toCharArray()\n将此字符串转换为一个新的字符数组。\n40  String toLowerCase()\n使用默认语言环境的规则将此 String 中的所有字符都转换为小写。\n41  String toLowerCase(Locale locale)\n 使用给定 Locale 的规则将此 String 中的所有字符都转换为小写。\n42  String toString()\n 返回此对象本身（它已经是一个字符串！）。\n43  String toUpperCase()\n使用默认语言环境的规则将此 String 中的所有字符都转换为大写。\n44  String toUpperCase(Locale locale)\n使用给定 Locale 的规则将此 String 中的所有字符都转换为大写。\n45  String trim()\n返回字符串的副本，忽略前导空白和尾部空白。\n46  static String valueOf(primitive data type x)\n返回给定data type类型x参数的字符串表示形式。\n\n     */\n    public static void main(String[] args) &#123;\n        char[] hello = &#123;&#39;g&#39;, &#39;z&#39;, &#39;y&#39;&#125;;\n        String helloString = new String(hello);\n        System.out.println(helloString);\n        System.out.println(helloString.length());\n    &#125;\n&#125;\n</code></pre>\n<hr>\n<h3 id=\"about-me\">About ME</h3>\n<h5 id=\"读书城南-在未来面前我们都是孩子\">👋 读书城南，🤔\n在未来面前，我们都是孩子～</h5>\n<ul>\n<li>📙\n一个热衷于探索学习新方向、新事物的智能产品经理，闲暇时间喜欢coding💻、画图🎨、音乐🎵、学习ing~</li>\n</ul>\n<h5 id=\"social-media\">👋 Social Media</h5>\n<ul>\n<li><p>🛠️ Blog: <a href=\"http://oceaneyes.top\">http://oceaneyes.top</a></p></li>\n<li><p>⚡ PM导航: <a href=\"https://pmhub.oceangzy.top\">https://pmhub.oceangzy.top</a></p></li>\n<li><p>☘️ CNBLOG: <a href=\"https://www.cnblogs.com/oceaneyes-gzy/\">https://www.cnblogs.com/oceaneyes-gzy/</a></p></li>\n<li><p>🌱 AI PRJ自己部署的一些算法demo: <a href=\"http://ai.oceangzy.top/\">http://ai.oceangzy.top/</a></p></li>\n<li><p>📫 Email: 1450136519@qq.com</p></li>\n<li><p>💬 WeChat: <a href=\"https://oceaneyes.top/img/wechatqrcode.jpg\">OCEANGZY</a></p></li>\n<li><p>💬 公众号: <a href=\"https://oceaneyes.top/img/wechatgzh.jpeg\">UncleJoker-GZY</a></p></li>\n</ul>\n<h5 id=\"加入小组\">👋 加入小组~</h5>\n<p><img src=\"https://oceaneyes.top/img/zhishigroup.jpg\" title=\"加入组织\" alt width=\"240\"></p>\n<h5 id=\"感谢打赏\">👋 感谢打赏~</h5>\n<p><img src=\"https://oceaneyes.top/img/alipay.jpg\" title=\"支付宝打赏\" alt width=\"140\">\n<img src=\"https://oceaneyes.top/img/wechatpay.jpg\" title=\"微信打赏\" alt width=\"140\"></p>\n","more":"<h1 id=\"java-string类\">Java-String类</h1>\n<pre><code>public class StringDemo &#123;\n    //String 方法\n    /*\n        SN(序号)  方法描述\n1   char charAt(int index)\n返回指定索引处的 char 值。\n2   int compareTo(Object o)\n把这个字符串和另一个对象比较。\n3   int compareTo(String anotherString)\n按字典顺序比较两个字符串。\n4   int compareToIgnoreCase(String str)\n按字典顺序比较两个字符串，不考虑大小写。\n5   String concat(String str)\n将指定字符串连接到此字符串的结尾。\n6   boolean contentEquals(StringBuffer sb)\n当且仅当字符串与指定的StringBuffer有相同顺序的字符时候返回真。\n7   static String copyValueOf(char[] data)\n返回指定数组中表示该字符序列的 String。\n8   static String copyValueOf(char[] data, int offset, int count)\n返回指定数组中表示该字符序列的 String。\n9   boolean endsWith(String suffix)\n测试此字符串是否以指定的后缀结束。\n10  boolean equals(Object anObject)\n将此字符串与指定的对象比较。\n11  boolean equalsIgnoreCase(String anotherString)\n将此 String 与另一个 String 比较，不考虑大小写。\n12  byte[] getBytes()\n 使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。\n13  byte[] getBytes(String charsetName)\n使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。\n14  void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)\n将字符从此字符串复制到目标字符数组。\n15  int hashCode()\n返回此字符串的哈希码。\n16  int indexOf(int ch)\n返回指定字符在此字符串中第一次出现处的索引。\n17  int indexOf(int ch, int fromIndex)\n返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。\n18  int indexOf(String str)\n 返回指定子字符串在此字符串中第一次出现处的索引。\n19  int indexOf(String str, int fromIndex)\n返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。\n20  String intern()\n 返回字符串对象的规范化表示形式。\n21  int lastIndexOf(int ch)\n 返回指定字符在此字符串中最后一次出现处的索引。\n22  int lastIndexOf(int ch, int fromIndex)\n返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。\n23  int lastIndexOf(String str)\n返回指定子字符串在此字符串中最右边出现处的索引。\n24  int lastIndexOf(String str, int fromIndex)\n 返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。\n25  int length()\n返回此字符串的长度。\n26  boolean matches(String regex)\n告知此字符串是否匹配给定的正则表达式。\n27  boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)\n测试两个字符串区域是否相等。\n28  boolean regionMatches(int toffset, String other, int ooffset, int len)\n测试两个字符串区域是否相等。\n29  String replace(char oldChar, char newChar)\n返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。\n30  String replaceAll(String regex, String replacement)\n使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。\n31  String replaceFirst(String regex, String replacement)\n 使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。\n32  String[] split(String regex)\n根据给定正则表达式的匹配拆分此字符串。\n33  String[] split(String regex, int limit)\n根据匹配给定的正则表达式来拆分此字符串。\n34  boolean startsWith(String prefix)\n测试此字符串是否以指定的前缀开始。\n35  boolean startsWith(String prefix, int toffset)\n测试此字符串从指定索引开始的子字符串是否以指定前缀开始。\n36  CharSequence subSequence(int beginIndex, int endIndex)\n 返回一个新的字符序列，它是此序列的一个子序列。\n37  String substring(int beginIndex)\n返回一个新的字符串，它是此字符串的一个子字符串。\n38  String substring(int beginIndex, int endIndex)\n返回一个新字符串，它是此字符串的一个子字符串。\n39  char[] toCharArray()\n将此字符串转换为一个新的字符数组。\n40  String toLowerCase()\n使用默认语言环境的规则将此 String 中的所有字符都转换为小写。\n41  String toLowerCase(Locale locale)\n 使用给定 Locale 的规则将此 String 中的所有字符都转换为小写。\n42  String toString()\n 返回此对象本身（它已经是一个字符串！）。\n43  String toUpperCase()\n使用默认语言环境的规则将此 String 中的所有字符都转换为大写。\n44  String toUpperCase(Locale locale)\n使用给定 Locale 的规则将此 String 中的所有字符都转换为大写。\n45  String trim()\n返回字符串的副本，忽略前导空白和尾部空白。\n46  static String valueOf(primitive data type x)\n返回给定data type类型x参数的字符串表示形式。\n\n     */\n    public static void main(String[] args) &#123;\n        char[] hello = &#123;&#39;g&#39;, &#39;z&#39;, &#39;y&#39;&#125;;\n        String helloString = new String(hello);\n        System.out.println(helloString);\n        System.out.println(helloString.length());\n    &#125;\n&#125;\n</code></pre>\n<hr>\n<h3 id=\"about-me\">About ME</h3>\n<h5 id=\"读书城南-在未来面前我们都是孩子\">👋 读书城南，🤔\n在未来面前，我们都是孩子～</h5>\n<ul>\n<li>📙\n一个热衷于探索学习新方向、新事物的智能产品经理，闲暇时间喜欢coding💻、画图🎨、音乐🎵、学习ing~</li>\n</ul>\n<h5 id=\"social-media\">👋 Social Media</h5>\n<ul>\n<li><p>🛠️ Blog: <a href=\"http://oceaneyes.top\">http://oceaneyes.top</a></p></li>\n<li><p>⚡ PM导航: <a href=\"https://pmhub.oceangzy.top\">https://pmhub.oceangzy.top</a></p></li>\n<li><p>☘️ CNBLOG: <a href=\"https://www.cnblogs.com/oceaneyes-gzy/\">https://www.cnblogs.com/oceaneyes-gzy/</a></p></li>\n<li><p>🌱 AI PRJ自己部署的一些算法demo: <a href=\"http://ai.oceangzy.top/\">http://ai.oceangzy.top/</a></p></li>\n<li><p>📫 Email: 1450136519@qq.com</p></li>\n<li><p>💬 WeChat: <a href=\"https://oceaneyes.top/img/wechatqrcode.jpg\">OCEANGZY</a></p></li>\n<li><p>💬 公众号: <a href=\"https://oceaneyes.top/img/wechatgzh.jpeg\">UncleJoker-GZY</a></p></li>\n</ul>\n<h5 id=\"加入小组\">👋 加入小组~</h5>\n<p><img src=\"https://oceaneyes.top/img/zhishigroup.jpg\" title=\"加入组织\" alt width=\"240\"></p>\n<h5 id=\"感谢打赏\">👋 感谢打赏~</h5>\n<p><img src=\"https://oceaneyes.top/img/alipay.jpg\" title=\"支付宝打赏\" alt width=\"140\">\n<img src=\"https://oceaneyes.top/img/wechatpay.jpg\" title=\"微信打赏\" alt width=\"140\"></p>\n","categories":[{"name":"Java","path":"api/categories/Java.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"}]}