{"title":"Java运算符","slug":"Java运算符","date":"2016-03-02T14:55:00.000Z","updated":"2022-09-30T06:56:37.160Z","comments":true,"path":"api/articles/Java运算符.json","excerpt":null,"covers":["https://oceaneyes.top/img/zhishigroup.jpg","https://oceaneyes.top/img/alipay.jpg","https://oceaneyes.top/img/wechatpay.jpg"],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"java运算符\">Java运算符</h1>\n<pre><code>public class Operator &#123;\n    /*\n        运算符\n        - 算术运算符\n        - 关系运算符\n        - 位运算符\n        - 逻辑运算符\n        - 赋值运算符\n        - 其他运算符\n     */\n    public static void main(String[] args) &#123;\n        int a = 10;\n        int b = 20;\n        int c = 25;\n        int d = 25;\n\n        //算数运算符\n        //前缀自增自减法(++a,--a): 先进行自增或者自减运算，再进行表达式运算。\n        //后缀自增自减法(a++,a--): 先进行表达式运算，再进行自增或者自减运算\n        System.out.println(&quot;a + b = &quot; + (a + b));\n        System.out.println(&quot;a - b = &quot; + (a - b));\n        System.out.println(&quot;a * b = &quot; + (a * b));\n        System.out.println(&quot;b / a = &quot; + (b / a));\n        System.out.println(&quot;b % a = &quot; + (b % a));\n        System.out.println(&quot;c % a = &quot; + (c % a));\n        System.out.println(&quot;a++   = &quot; + (a++));\n        System.out.println(&quot;a--   = &quot; + (a--));\n        // 查看  d++ 与 ++d 的不同\n        System.out.println(&quot;d++   = &quot; + (d++));\n        System.out.println(&quot;++d   = &quot; + (++d));\n\n\n        //关系运算符\n        System.out.println(&quot;a == b = &quot; + (a == b));\n        System.out.println(&quot;a != b = &quot; + (a != b));\n        System.out.println(&quot;a &gt; b = &quot; + (a &gt; b));\n        System.out.println(&quot;a &lt; b = &quot; + (a &lt; b));\n        System.out.println(&quot;b &gt;= a = &quot; + (b &gt;= a));\n        System.out.println(&quot;b &lt;= a = &quot; + (b &lt;= a));\n\n\n        //位运算符\n        /*\n            操作符 描述                                                  例子\n            &amp;       如果相对应位都是1，则结果为1，否则为0                        （A＆B），得到12，即0000 1100\n            /       如果相对应位都是 0，则结果为 0，否则为 1                 （A | B）得到61，即 0011 1101\n            ^       如果相对应位值相同，则结果为0，否则为1                        （A ^ B）得到49，即 0011 0001\n            〜       按位取反运算符翻转操作数的每一位，即0变成1，1变成0。        （〜A）得到-61，即1100 0011\n            &lt;&lt;      按位左移运算符。左操作数按位左移右操作数指定的位数。        A &lt;&lt; 2得到240，即 1111 0000\n            &gt;&gt;      按位右移运算符。左操作数按位右移右操作数指定的位数。        A &gt;&gt; 2得到15即 1111\n            &gt;&gt;&gt;     按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。   A&gt;&gt;&gt;2得到15即0000 1111\n         */\n\n\n        //逻辑运算符\n        /*\n            操作符        描述                                                       例子\n            &amp;&amp;          称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。        （A &amp;&amp; B）为假。\n            //          称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。  （A | | B）为真。\n            !           称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，\n                        则逻辑非运算符将得到false。                                    !(A &amp;&amp; B)为真。\n         */\n\n\n        //赋值运算符\n        /*\n            操作符                 描述                                                  例子\n               =               简单的赋值运算符，将右操作数的值赋给左侧操作数                  C = A + B将把A + B得到的值赋给C\n               + =             加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数         C + = A等价于C = C + A\n               - =             减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数         C - = A等价于C = C - A\n               * =             乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数         C * = A等价于C = C * A\n               / =             除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数         C / = A，C 与 A 同类型时等价于 C = C / A\n               (%)=            取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数       C％= A等价于C = C％A\n               &lt;&lt; =            左移位赋值运算符 C &lt;&lt; = 2等价于C = C &lt;&lt; 2\n               &gt;&gt; =            右移位赋值运算符 C &gt;&gt; = 2等价于C = C &gt;&gt; 2\n               &amp;=              按位与赋值运算符 C＆= 2等价于C = C＆2\n               ^ =             按位异或赋值操作符    C ^ = 2等价于C = C ^ 2\n               | =             按位或赋值操作符 C | = 2等价于C = C | 2\n         */\n\n\n        //条件运算符\n        /*\n            三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值\n            variable x = (expression) ? value if true : value if false\n         */\n        int x, y;\n        x = 10;\n        y = (x == 5) ? 20 : 30;\n        System.out.println(&quot;Value of y is &quot; + y);\n\n        y = (x == 10) ? 20 : 30;\n        System.out.println(&quot;Value of y is &quot; + y);\n\n\n        //运算符优先级\n        /*\n            类别      操作符                     关联性\n            后缀      () [] . (点操作符)              左到右\n            一元      + + - !〜                        从右到左\n            乘性      * /%                            左到右\n            加性      + -                             左到右\n            移位      &gt;&gt; &gt;&gt;&gt;  &lt;&lt;                      左到右\n            关系      &gt;&gt; = &lt;&lt; =                       左到右\n            相等      ==  !=                          左到右\n            按位与     &amp;                               左到右\n            按位异或        ^                               左到右\n            按位或     /                               左到右\n            逻辑与     &amp;&amp;                              左到右\n            逻辑或     //                              左到右\n            条件      ？：                          从右到左\n            赋值      = + = - = * = / =％= &gt;&gt; = &lt;&lt; =＆= ^ = | = 从右到左\n            逗号      ，                               左到右\n         */\n\n    &#125;\n&#125;\n</code></pre>\n<hr>\n<h3 id=\"about-me\">About ME</h3>\n<h5 id=\"读书城南-在未来面前我们都是孩子\">👋 读书城南，🤔\n在未来面前，我们都是孩子～</h5>\n<ul>\n<li>📙\n一个热衷于探索学习新方向、新事物的智能产品经理，闲暇时间喜欢coding💻、画图🎨、音乐🎵、学习ing~</li>\n</ul>\n<h5 id=\"social-media\">👋 Social Media</h5>\n<ul>\n<li><p>🛠️ Blog: <a href=\"http://oceaneyes.top\">http://oceaneyes.top</a></p></li>\n<li><p>⚡ PM导航: <a href=\"https://pmhub.oceangzy.top\">https://pmhub.oceangzy.top</a></p></li>\n<li><p>☘️ CNBLOG: <a href=\"https://www.cnblogs.com/oceaneyes-gzy/\">https://www.cnblogs.com/oceaneyes-gzy/</a></p></li>\n<li><p>🌱 AI PRJ自己部署的一些算法demo: <a href=\"http://ai.oceangzy.top/\">http://ai.oceangzy.top/</a></p></li>\n<li><p>📫 Email: 1450136519@qq.com</p></li>\n<li><p>💬 WeChat: <a href=\"https://oceaneyes.top/img/wechatqrcode.jpg\">OCEANGZY</a></p></li>\n<li><p>💬 公众号: <a href=\"https://oceaneyes.top/img/wechatgzh.jpeg\">UncleJoker-GZY</a></p></li>\n</ul>\n<h5 id=\"加入小组\">👋 加入小组~</h5>\n<p><img src=\"https://oceaneyes.top/img/zhishigroup.jpg\" title=\"加入组织\" alt width=\"240\"></p>\n<h5 id=\"感谢打赏\">👋 感谢打赏~</h5>\n<p><img src=\"https://oceaneyes.top/img/alipay.jpg\" title=\"支付宝打赏\" alt width=\"140\">\n<img src=\"https://oceaneyes.top/img/wechatpay.jpg\" title=\"微信打赏\" alt width=\"140\"></p>\n","more":"<h1 id=\"java运算符\">Java运算符</h1>\n<pre><code>public class Operator &#123;\n    /*\n        运算符\n        - 算术运算符\n        - 关系运算符\n        - 位运算符\n        - 逻辑运算符\n        - 赋值运算符\n        - 其他运算符\n     */\n    public static void main(String[] args) &#123;\n        int a = 10;\n        int b = 20;\n        int c = 25;\n        int d = 25;\n\n        //算数运算符\n        //前缀自增自减法(++a,--a): 先进行自增或者自减运算，再进行表达式运算。\n        //后缀自增自减法(a++,a--): 先进行表达式运算，再进行自增或者自减运算\n        System.out.println(&quot;a + b = &quot; + (a + b));\n        System.out.println(&quot;a - b = &quot; + (a - b));\n        System.out.println(&quot;a * b = &quot; + (a * b));\n        System.out.println(&quot;b / a = &quot; + (b / a));\n        System.out.println(&quot;b % a = &quot; + (b % a));\n        System.out.println(&quot;c % a = &quot; + (c % a));\n        System.out.println(&quot;a++   = &quot; + (a++));\n        System.out.println(&quot;a--   = &quot; + (a--));\n        // 查看  d++ 与 ++d 的不同\n        System.out.println(&quot;d++   = &quot; + (d++));\n        System.out.println(&quot;++d   = &quot; + (++d));\n\n\n        //关系运算符\n        System.out.println(&quot;a == b = &quot; + (a == b));\n        System.out.println(&quot;a != b = &quot; + (a != b));\n        System.out.println(&quot;a &gt; b = &quot; + (a &gt; b));\n        System.out.println(&quot;a &lt; b = &quot; + (a &lt; b));\n        System.out.println(&quot;b &gt;= a = &quot; + (b &gt;= a));\n        System.out.println(&quot;b &lt;= a = &quot; + (b &lt;= a));\n\n\n        //位运算符\n        /*\n            操作符 描述                                                  例子\n            &amp;       如果相对应位都是1，则结果为1，否则为0                        （A＆B），得到12，即0000 1100\n            /       如果相对应位都是 0，则结果为 0，否则为 1                 （A | B）得到61，即 0011 1101\n            ^       如果相对应位值相同，则结果为0，否则为1                        （A ^ B）得到49，即 0011 0001\n            〜       按位取反运算符翻转操作数的每一位，即0变成1，1变成0。        （〜A）得到-61，即1100 0011\n            &lt;&lt;      按位左移运算符。左操作数按位左移右操作数指定的位数。        A &lt;&lt; 2得到240，即 1111 0000\n            &gt;&gt;      按位右移运算符。左操作数按位右移右操作数指定的位数。        A &gt;&gt; 2得到15即 1111\n            &gt;&gt;&gt;     按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。   A&gt;&gt;&gt;2得到15即0000 1111\n         */\n\n\n        //逻辑运算符\n        /*\n            操作符        描述                                                       例子\n            &amp;&amp;          称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。        （A &amp;&amp; B）为假。\n            //          称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。  （A | | B）为真。\n            !           称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，\n                        则逻辑非运算符将得到false。                                    !(A &amp;&amp; B)为真。\n         */\n\n\n        //赋值运算符\n        /*\n            操作符                 描述                                                  例子\n               =               简单的赋值运算符，将右操作数的值赋给左侧操作数                  C = A + B将把A + B得到的值赋给C\n               + =             加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数         C + = A等价于C = C + A\n               - =             减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数         C - = A等价于C = C - A\n               * =             乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数         C * = A等价于C = C * A\n               / =             除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数         C / = A，C 与 A 同类型时等价于 C = C / A\n               (%)=            取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数       C％= A等价于C = C％A\n               &lt;&lt; =            左移位赋值运算符 C &lt;&lt; = 2等价于C = C &lt;&lt; 2\n               &gt;&gt; =            右移位赋值运算符 C &gt;&gt; = 2等价于C = C &gt;&gt; 2\n               &amp;=              按位与赋值运算符 C＆= 2等价于C = C＆2\n               ^ =             按位异或赋值操作符    C ^ = 2等价于C = C ^ 2\n               | =             按位或赋值操作符 C | = 2等价于C = C | 2\n         */\n\n\n        //条件运算符\n        /*\n            三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值\n            variable x = (expression) ? value if true : value if false\n         */\n        int x, y;\n        x = 10;\n        y = (x == 5) ? 20 : 30;\n        System.out.println(&quot;Value of y is &quot; + y);\n\n        y = (x == 10) ? 20 : 30;\n        System.out.println(&quot;Value of y is &quot; + y);\n\n\n        //运算符优先级\n        /*\n            类别      操作符                     关联性\n            后缀      () [] . (点操作符)              左到右\n            一元      + + - !〜                        从右到左\n            乘性      * /%                            左到右\n            加性      + -                             左到右\n            移位      &gt;&gt; &gt;&gt;&gt;  &lt;&lt;                      左到右\n            关系      &gt;&gt; = &lt;&lt; =                       左到右\n            相等      ==  !=                          左到右\n            按位与     &amp;                               左到右\n            按位异或        ^                               左到右\n            按位或     /                               左到右\n            逻辑与     &amp;&amp;                              左到右\n            逻辑或     //                              左到右\n            条件      ？：                          从右到左\n            赋值      = + = - = * = / =％= &gt;&gt; = &lt;&lt; =＆= ^ = | = 从右到左\n            逗号      ，                               左到右\n         */\n\n    &#125;\n&#125;\n</code></pre>\n<hr>\n<h3 id=\"about-me\">About ME</h3>\n<h5 id=\"读书城南-在未来面前我们都是孩子\">👋 读书城南，🤔\n在未来面前，我们都是孩子～</h5>\n<ul>\n<li>📙\n一个热衷于探索学习新方向、新事物的智能产品经理，闲暇时间喜欢coding💻、画图🎨、音乐🎵、学习ing~</li>\n</ul>\n<h5 id=\"social-media\">👋 Social Media</h5>\n<ul>\n<li><p>🛠️ Blog: <a href=\"http://oceaneyes.top\">http://oceaneyes.top</a></p></li>\n<li><p>⚡ PM导航: <a href=\"https://pmhub.oceangzy.top\">https://pmhub.oceangzy.top</a></p></li>\n<li><p>☘️ CNBLOG: <a href=\"https://www.cnblogs.com/oceaneyes-gzy/\">https://www.cnblogs.com/oceaneyes-gzy/</a></p></li>\n<li><p>🌱 AI PRJ自己部署的一些算法demo: <a href=\"http://ai.oceangzy.top/\">http://ai.oceangzy.top/</a></p></li>\n<li><p>📫 Email: 1450136519@qq.com</p></li>\n<li><p>💬 WeChat: <a href=\"https://oceaneyes.top/img/wechatqrcode.jpg\">OCEANGZY</a></p></li>\n<li><p>💬 公众号: <a href=\"https://oceaneyes.top/img/wechatgzh.jpeg\">UncleJoker-GZY</a></p></li>\n</ul>\n<h5 id=\"加入小组\">👋 加入小组~</h5>\n<p><img src=\"https://oceaneyes.top/img/zhishigroup.jpg\" title=\"加入组织\" alt width=\"240\"></p>\n<h5 id=\"感谢打赏\">👋 感谢打赏~</h5>\n<p><img src=\"https://oceaneyes.top/img/alipay.jpg\" title=\"支付宝打赏\" alt width=\"140\">\n<img src=\"https://oceaneyes.top/img/wechatpay.jpg\" title=\"微信打赏\" alt width=\"140\"></p>\n","categories":[{"name":"Java","path":"api/categories/Java.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"}]}