{"title":"基于PyTorch实现图像去模糊-学习","slug":"pytorch图像去模糊","date":"2021-11-19T15:19:00.000Z","updated":"2022-09-30T06:56:37.182Z","comments":true,"path":"api/articles/pytorch图像去模糊.json","excerpt":null,"covers":["/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120221821489.png","/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120221933618.png","/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120221955392.png","/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222025823.png","/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222042862.png","/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222105417.png","/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222124809.png","/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222241087.png","/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222352850.png","/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222344621.png","/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222325752.png","/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222301708.png","/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222412395.png","https://oceaneyes.top/img/zhishigroup.jpg","https://oceaneyes.top/img/alipay.jpg","https://oceaneyes.top/img/wechatpay.jpg"],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"基于pytorch实现图像去模糊-学习\">基于PyTorch实现图像去模糊-学习</h2>\n<h2 id=\"任务描述\">任务描述</h2>\n<ul>\n<li>相机的抖动、快速运动的物体都会导致拍摄出模糊的图像，景深变化也会使图像进一步模糊。</li>\n<li>对于传统方法来说，要想估计出每个像素点对应的 “blur kernel”\n几乎是不可行的。因此，传统方法常常需要对模糊源作出假设，将 “blur kernel”\n参数化。显然，这类方法不足以解决实际中各种复杂因素引起的图像模糊。</li>\n<li>卷积神经网络能够从图像中提取出复杂的特征，从而使得模型能够适应各种场景。<br>\n</li>\n<li>本教程以 CVPR2017 的 《Deep Multi-scale Convolutional Neural Network\nfor Dynamic Scene Deblurring》 为例，来完成图像去模糊的任务。</li>\n</ul>\n<h3 id=\"方法概述\">方法概述</h3>\n<ul>\n<li>利用pytorch深度学习工具实现一个端到端的图像去模糊模型，通过参数设置、加载数据、构建模型、训练模型和测试用例依次实现一个图像去模糊工具，在训练和预处理过程中通过可视化监督训练过程。</li>\n<li>模型采用了残差形式的CNN，输入和输出都采用高斯金字塔（Gaussian\npyramid）的形式。</li>\n<li>整个网络结构由三个相似的CNN构成，分别对应输入金字塔中的每一层。网络最前面是分辨率最低的子网络（coarest\nlevel network），在这个子网络最后，是“upconvolution\nlayer”，将重建的低分辨率图像放大为高分辨率图像，然后和高一层的子网络的输入连接在一起，作为上层网络的输入。</li>\n</ul>\n<figure>\n<img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120221821489.png\" alt=\"image-20211120221821489\">\n<figcaption aria-hidden=\"true\">image-20211120221821489</figcaption>\n</figure>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">%</span>config Completer.use_jedi <span class=\"op\">=</span> <span class=\"va\">False</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#!pip install pytorch_msssim -i https://pypi.tuna.tsinghua.edu.cn/simple</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># !jupyter nbextension enable --py widgetsnbextension</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> torch</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> numpy <span class=\"im\">as</span> np</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> os</span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> random</span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> matplotlib.pyplot <span class=\"im\">as</span> plt</span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> torch.nn <span class=\"im\">as</span> nn</span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> torch.optim <span class=\"im\">as</span> optim</span>\n<span id=\"cb3-10\"><a href=\"#cb3-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> PIL <span class=\"im\">import</span> Image</span>\n<span id=\"cb3-11\"><a href=\"#cb3-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> tensorboardX <span class=\"im\">import</span> SummaryWriter</span>\n<span id=\"cb3-12\"><a href=\"#cb3-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> torchsummary <span class=\"im\">import</span> summary</span>\n<span id=\"cb3-13\"><a href=\"#cb3-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> torch.optim <span class=\"im\">import</span> lr_scheduler</span>\n<span id=\"cb3-14\"><a href=\"#cb3-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> torch.utils <span class=\"im\">import</span> data</span>\n<span id=\"cb3-15\"><a href=\"#cb3-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> torchvision <span class=\"im\">import</span> transforms</span>\n<span id=\"cb3-16\"><a href=\"#cb3-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> tqdm.notebook <span class=\"im\">import</span> tqdm</span>\n<span id=\"cb3-17\"><a href=\"#cb3-17\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-18\"><a href=\"#cb3-18\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-19\"><a href=\"#cb3-19\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> pytorch_msssim <span class=\"co\"># 用于计算指标 ssim 和 mssim</span></span>\n<span id=\"cb3-20\"><a href=\"#cb3-20\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-21\"><a href=\"#cb3-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>device <span class=\"op\">=</span> torch.device(<span class=\"st\">&quot;cuda:0&quot;</span> <span class=\"cf\">if</span> torch.cuda.is_available() <span class=\"cf\">else</span> <span class=\"st\">&quot;cpu&quot;</span>)</span></code></pre></div>\n<h2 id=\"参数设置\">参数设置</h2>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> Config():</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>,name<span class=\"op\">=</span><span class=\"st\">&quot;Configs&quot;</span>):</span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"co\"># train set</span></span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.data_dir <span class=\"op\">=</span> <span class=\"st\">&#39;datasets/train&#39;</span> <span class=\"co\"># 训练集目录</span></span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.patch_size <span class=\"op\">=</span> <span class=\"dv\">256</span>  <span class=\"co\"># 输入模型的patch的尺寸</span></span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.batch_size<span class=\"op\">=</span> <span class=\"dv\">2</span> <span class=\"co\">#16 # 训练时每个batch中的样本个数</span></span>\n<span id=\"cb4-7\"><a href=\"#cb4-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.n_threads <span class=\"op\">=</span> <span class=\"dv\">1</span> <span class=\"co\"># 用于加载数据的线程数</span></span>\n<span id=\"cb4-8\"><a href=\"#cb4-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb4-9\"><a href=\"#cb4-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"co\"># test set</span></span>\n<span id=\"cb4-10\"><a href=\"#cb4-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.test_data_dir <span class=\"op\">=</span> <span class=\"st\">&#39;datasets/test&#39;</span> <span class=\"co\"># 测试集目录</span></span>\n<span id=\"cb4-11\"><a href=\"#cb4-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.test_batch_size<span class=\"op\">=</span><span class=\"dv\">1</span> <span class=\"co\"># 测试时的 batch_size</span></span>\n<span id=\"cb4-12\"><a href=\"#cb4-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb4-13\"><a href=\"#cb4-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"co\"># model</span></span>\n<span id=\"cb4-14\"><a href=\"#cb4-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.multi <span class=\"op\">=</span> <span class=\"va\">True</span> <span class=\"co\"># 模型采用多尺度方法True</span></span>\n<span id=\"cb4-15\"><a href=\"#cb4-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.skip <span class=\"op\">=</span> <span class=\"va\">True</span> <span class=\"co\"># 模型采用滑动连接方法</span></span>\n<span id=\"cb4-16\"><a href=\"#cb4-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.n_resblocks <span class=\"op\">=</span> <span class=\"dv\">3</span> <span class=\"co\">#9  # resblock的个数</span></span>\n<span id=\"cb4-17\"><a href=\"#cb4-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.n_feats <span class=\"op\">=</span> <span class=\"dv\">8</span> <span class=\"co\">#64  #feature map的个数</span></span>\n<span id=\"cb4-18\"><a href=\"#cb4-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb4-19\"><a href=\"#cb4-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"co\"># optimization </span></span>\n<span id=\"cb4-20\"><a href=\"#cb4-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.lr <span class=\"op\">=</span> <span class=\"fl\">1e-4</span>  <span class=\"co\"># 初始学习率</span></span>\n<span id=\"cb4-21\"><a href=\"#cb4-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.epochs <span class=\"op\">=</span><span class=\"dv\">5</span> <span class=\"co\">#800 # 训练epoch的数目</span></span>\n<span id=\"cb4-22\"><a href=\"#cb4-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.lr_step_size <span class=\"op\">=</span> <span class=\"dv\">600</span> <span class=\"co\">#采用步进学习率策略所用的 step_size</span></span>\n<span id=\"cb4-23\"><a href=\"#cb4-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.lr_gamma <span class=\"op\">=</span> <span class=\"fl\">0.1</span> <span class=\"co\">#每 lr_step_size后，学习率变成 lr * lr_gamma</span></span>\n<span id=\"cb4-24\"><a href=\"#cb4-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb4-25\"><a href=\"#cb4-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"co\"># global</span></span>\n<span id=\"cb4-26\"><a href=\"#cb4-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.name <span class=\"op\">=</span> name <span class=\"co\">#配置的名称</span></span>\n<span id=\"cb4-27\"><a href=\"#cb4-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.save_dir <span class=\"op\">=</span> <span class=\"st\">&#39;temp/result&#39;</span>  <span class=\"co\"># 保存训练过程中所产生数据的目录</span></span>\n<span id=\"cb4-28\"><a href=\"#cb4-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.save_cp_dir <span class=\"op\">=</span> <span class=\"st\">&#39;temp/models&#39;</span>  <span class=\"co\"># 保存 checkpoint的目录</span></span>\n<span id=\"cb4-29\"><a href=\"#cb4-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.imgs_dir <span class=\"op\">=</span> <span class=\"st\">&#39;datasets/pictures&#39;</span>  <span class=\"co\"># 此 notebook所需的图片目录</span></span>\n<span id=\"cb4-30\"><a href=\"#cb4-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb4-31\"><a href=\"#cb4-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb4-32\"><a href=\"#cb4-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"kw\">not</span> os.path.exists(<span class=\"va\">self</span>.save_dir):</span>\n<span id=\"cb4-33\"><a href=\"#cb4-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>            os.makedirs(<span class=\"va\">self</span>.save_dir)</span>\n<span id=\"cb4-34\"><a href=\"#cb4-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"kw\">not</span> os.path.exists(<span class=\"va\">self</span>.save_cp_dir):</span>\n<span id=\"cb4-35\"><a href=\"#cb4-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>            os.makedirs(<span class=\"va\">self</span>.save_cp_dir)</span>\n<span id=\"cb4-36\"><a href=\"#cb4-36\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#         if not os.path.exists(self.data_dir):</span></span>\n<span id=\"cb4-37\"><a href=\"#cb4-37\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#             os.makedirs(self.data_dir)</span></span>\n<span id=\"cb4-38\"><a href=\"#cb4-38\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#         if not os.path.exists(self.test_data_dir):</span></span>\n<span id=\"cb4-39\"><a href=\"#cb4-39\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#             os.makedirs(self.test_data_dir)</span></span>\n<span id=\"cb4-40\"><a href=\"#cb4-40\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb4-41\"><a href=\"#cb4-41\" aria-hidden=\"true\" tabindex=\"-1\"></a>args <span class=\"op\">=</span>  Config(name<span class=\"op\">=</span><span class=\"st\">&quot;image-deblurring&quot;</span>)</span></code></pre></div>\n<h2 id=\"数据准备\">数据准备</h2>\n<ul>\n<li>数据集展示</li>\n<li>数据增强</li>\n<li>构造 dataset类</li>\n<li>数据加载 dataloader</li>\n</ul>\n<h3 id=\"数据集展示\">数据集展示</h3>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>sample_idx <span class=\"op\">=</span> <span class=\"dv\">1</span> <span class=\"co\"># 样本编号</span></span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>blur_path <span class=\"op\">=</span> os.path.join(args.imgs_dir,<span class=\"ss\">f&quot;blur/test</span><span class=\"sc\">&#123;</span>sample_idx<span class=\"sc\">&#125;</span><span class=\"ss\">.png&quot;</span>)  <span class=\"co\"># 模糊图片</span></span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>sharp_path <span class=\"op\">=</span> os.path.join(args.imgs_dir,<span class=\"ss\">f&quot;sharp/test</span><span class=\"sc\">&#123;</span>sample_idx<span class=\"sc\">&#125;</span><span class=\"ss\">.png&quot;</span>) <span class=\"co\"># 去模糊图片</span></span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>blur_img <span class=\"op\">=</span> plt.imread(blur_path)</span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>sharp_img <span class=\"op\">=</span> plt.imread(sharp_path)</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb6-1\"><a href=\"#cb6-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.figure(figsize<span class=\"op\">=</span>(<span class=\"dv\">10</span>,<span class=\"dv\">4</span>))</span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.subplot(<span class=\"dv\">121</span>)</span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.imshow(blur_img)</span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.subplot(<span class=\"dv\">122</span>)</span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.imshow(sharp_img)</span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.show()</span></code></pre></div>\n<figure>\n<img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120221933618.png\" alt=\"image-20211120221933618\">\n<figcaption aria-hidden=\"true\">image-20211120221933618</figcaption>\n</figure>\n<h3 id=\"数据增强\">数据增强</h3>\n<p>为了防止过拟合，需要对数据集进行数据增强，增强方式如下所示，对每一个输入图像，都将其进行随机角度旋转，旋转的角度在\n[0, 90, 180, 270] 中随机选取。除此之外，考虑到图像质量下降，对 HSV\n颜色空间的饱和度乘以 0.8 到 1.2 内的随机数</p>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb7-1\"><a href=\"#cb7-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> augment(img_input, img_target):</span>\n<span id=\"cb7-2\"><a href=\"#cb7-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    degree <span class=\"op\">=</span> random.choice([<span class=\"dv\">0</span>,<span class=\"dv\">90</span>,<span class=\"dv\">180</span>,<span class=\"dv\">270</span>])</span>\n<span id=\"cb7-3\"><a href=\"#cb7-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    img_input <span class=\"op\">=</span> transforms.functional.rotate(img_input,degree)</span>\n<span id=\"cb7-4\"><a href=\"#cb7-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    img_target <span class=\"op\">=</span> transforms.functional.rotate(img_target,degree)</span>\n<span id=\"cb7-5\"><a href=\"#cb7-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb7-6\"><a href=\"#cb7-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\"># color augmentation</span></span>\n<span id=\"cb7-7\"><a href=\"#cb7-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    img_input <span class=\"op\">=</span> transforms.functional.adjust_gamma(img_input,<span class=\"dv\">1</span>)</span>\n<span id=\"cb7-8\"><a href=\"#cb7-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    img_target <span class=\"op\">=</span> transforms.functional.adjust_gamma(img_target,<span class=\"dv\">1</span>)</span>\n<span id=\"cb7-9\"><a href=\"#cb7-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    sat_factor <span class=\"op\">=</span> <span class=\"dv\">1</span> <span class=\"op\">+</span> (<span class=\"fl\">0.2</span> <span class=\"op\">-</span> <span class=\"fl\">0.4</span><span class=\"op\">*</span> np.random.rand())</span>\n<span id=\"cb7-10\"><a href=\"#cb7-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    img_input <span class=\"op\">=</span> transforms.functional.adjust_saturation(img_input,sat_factor)</span>\n<span id=\"cb7-11\"><a href=\"#cb7-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    img_target <span class=\"op\">=</span> transforms.functional.adjust_saturation(img_target,sat_factor)</span>\n<span id=\"cb7-12\"><a href=\"#cb7-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb7-13\"><a href=\"#cb7-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> img_input,img_target</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb8-1\"><a href=\"#cb8-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>img_input <span class=\"op\">=</span> Image.<span class=\"bu\">open</span>(blur_path)</span>\n<span id=\"cb8-2\"><a href=\"#cb8-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>img_target <span class=\"op\">=</span> Image.<span class=\"bu\">open</span>(sharp_path)</span>\n<span id=\"cb8-3\"><a href=\"#cb8-3\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb8-4\"><a href=\"#cb8-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>img_aug_input,img_aug_target <span class=\"op\">=</span> augment(img_input,img_target)</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb9-1\"><a href=\"#cb9-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.figure(figsize<span class=\"op\">=</span>(<span class=\"dv\">10</span>,<span class=\"dv\">5</span>))</span>\n<span id=\"cb9-2\"><a href=\"#cb9-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.subplot(<span class=\"dv\">121</span>)</span>\n<span id=\"cb9-3\"><a href=\"#cb9-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.imshow(img_aug_input)</span>\n<span id=\"cb9-4\"><a href=\"#cb9-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.subplot(<span class=\"dv\">122</span>)</span>\n<span id=\"cb9-5\"><a href=\"#cb9-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.imshow(img_aug_target)</span>\n<span id=\"cb9-6\"><a href=\"#cb9-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.show()</span></code></pre></div>\n<figure>\n<img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120221955392.png\" alt=\"image-20211120221955392\">\n<figcaption aria-hidden=\"true\">image-20211120221955392</figcaption>\n</figure>\n<h3 id=\"构造-dataset类\">构造 dataset类</h3>\n<p>对每一个输入图像，对齐进行随机裁剪，得到patch_size大小的输入</p>\n<div class=\"sourceCode\" id=\"cb10\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb10-1\"><a href=\"#cb10-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> getPatch(img_input,img_target,patch_size):</span>\n<span id=\"cb10-2\"><a href=\"#cb10-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    w,h <span class=\"op\">=</span> img_input.size</span>\n<span id=\"cb10-3\"><a href=\"#cb10-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    p <span class=\"op\">=</span> patch_size</span>\n<span id=\"cb10-4\"><a href=\"#cb10-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    x <span class=\"op\">=</span> random.randrange(<span class=\"dv\">0</span>,w<span class=\"op\">-</span>p <span class=\"op\">+</span><span class=\"dv\">1</span>)</span>\n<span id=\"cb10-5\"><a href=\"#cb10-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    y <span class=\"op\">=</span> random.randrange(<span class=\"dv\">0</span>,h <span class=\"op\">-</span>p <span class=\"op\">+</span><span class=\"dv\">1</span>)</span>\n<span id=\"cb10-6\"><a href=\"#cb10-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb10-7\"><a href=\"#cb10-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    img_input <span class=\"op\">=</span> img_input.crop((x,y,x<span class=\"op\">+</span>p,y<span class=\"op\">+</span>p))</span>\n<span id=\"cb10-8\"><a href=\"#cb10-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    img_target <span class=\"op\">=</span> img_target.crop((x,y,x<span class=\"op\">+</span>p,y<span class=\"op\">+</span>p))</span>\n<span id=\"cb10-9\"><a href=\"#cb10-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb10-10\"><a href=\"#cb10-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> img_input,img_target</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb11-1\"><a href=\"#cb11-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> ImgMission(data.Dataset):</span>\n<span id=\"cb11-2\"><a href=\"#cb11-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>,data_dir, patch_size<span class=\"op\">=</span><span class=\"dv\">256</span>, is_train<span class=\"op\">=</span> <span class=\"va\">False</span>, multi<span class=\"op\">=</span><span class=\"va\">True</span>):</span>\n<span id=\"cb11-3\"><a href=\"#cb11-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">super</span>(ImgMission,<span class=\"va\">self</span>).<span class=\"fu\">__init__</span>()</span>\n<span id=\"cb11-4\"><a href=\"#cb11-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb11-5\"><a href=\"#cb11-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.is_train <span class=\"op\">=</span> is_train  <span class=\"co\">#是否是训练集</span></span>\n<span id=\"cb11-6\"><a href=\"#cb11-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.patch_size <span class=\"op\">=</span> patch_size <span class=\"co\"># 训练时 patch的尺寸</span></span>\n<span id=\"cb11-7\"><a href=\"#cb11-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.multi <span class=\"op\">=</span> multi  <span class=\"co\"># 是否采用多尺度因子，默认采用</span></span>\n<span id=\"cb11-8\"><a href=\"#cb11-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb11-9\"><a href=\"#cb11-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.sharp_file_paths <span class=\"op\">=</span> []</span>\n<span id=\"cb11-10\"><a href=\"#cb11-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>        sub_folders <span class=\"op\">=</span> os.listdir(data_dir)</span>\n<span id=\"cb11-11\"><a href=\"#cb11-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">print</span>(sub_folders)</span>\n<span id=\"cb11-12\"><a href=\"#cb11-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb11-13\"><a href=\"#cb11-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">for</span> folder_name <span class=\"kw\">in</span> sub_folders:</span>\n<span id=\"cb11-14\"><a href=\"#cb11-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>            sharp_sub_folder <span class=\"op\">=</span> os.path.join(data_dir,folder_name,<span class=\"st\">&#39;sharp&#39;</span>)</span>\n<span id=\"cb11-15\"><a href=\"#cb11-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>            sharp_file_names <span class=\"op\">=</span> os.listdir(sharp_sub_folder)</span>\n<span id=\"cb11-16\"><a href=\"#cb11-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"co\"># print(sharp_file_names)</span></span>\n<span id=\"cb11-17\"><a href=\"#cb11-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">for</span> file_name <span class=\"kw\">in</span> sharp_file_names:</span>\n<span id=\"cb11-18\"><a href=\"#cb11-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>                sharp_file_path <span class=\"op\">=</span> os.path.join(sharp_sub_folder,file_name)</span>\n<span id=\"cb11-19\"><a href=\"#cb11-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>                <span class=\"co\"># print(sharp_file_path)</span></span>\n<span id=\"cb11-20\"><a href=\"#cb11-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>                <span class=\"va\">self</span>.sharp_file_paths.append(sharp_file_path)</span>\n<span id=\"cb11-21\"><a href=\"#cb11-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>                </span>\n<span id=\"cb11-22\"><a href=\"#cb11-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.n_samples <span class=\"op\">=</span> <span class=\"bu\">len</span>(<span class=\"va\">self</span>.sharp_file_paths)</span>\n<span id=\"cb11-23\"><a href=\"#cb11-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb11-24\"><a href=\"#cb11-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> get_img_pair(<span class=\"va\">self</span>,idx):</span>\n<span id=\"cb11-25\"><a href=\"#cb11-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>        sharp_file_path <span class=\"op\">=</span> <span class=\"va\">self</span>.sharp_file_paths[idx]</span>\n<span id=\"cb11-26\"><a href=\"#cb11-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>        blur_file_path <span class=\"op\">=</span> sharp_file_path.replace(<span class=\"st\">&quot;sharp&quot;</span>,<span class=\"st\">&quot;blur&quot;</span>)</span>\n<span id=\"cb11-27\"><a href=\"#cb11-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"co\"># print(blur_file_path)</span></span>\n<span id=\"cb11-28\"><a href=\"#cb11-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>        img_input <span class=\"op\">=</span> Image.<span class=\"bu\">open</span>(blur_file_path).convert(<span class=\"st\">&#39;RGB&#39;</span>)</span>\n<span id=\"cb11-29\"><a href=\"#cb11-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>        img_target <span class=\"op\">=</span> Image.<span class=\"bu\">open</span>(sharp_file_path).convert(<span class=\"st\">&#39;RGB&#39;</span>)</span>\n<span id=\"cb11-30\"><a href=\"#cb11-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb11-31\"><a href=\"#cb11-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> img_input,img_target</span>\n<span id=\"cb11-32\"><a href=\"#cb11-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb11-33\"><a href=\"#cb11-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__getitem__</span>(<span class=\"va\">self</span>,idx):</span>\n<span id=\"cb11-34\"><a href=\"#cb11-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>        img_input,img_target <span class=\"op\">=</span> <span class=\"va\">self</span>.get_img_pair(idx)</span>\n<span id=\"cb11-35\"><a href=\"#cb11-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb11-36\"><a href=\"#cb11-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"va\">self</span>.is_train:</span>\n<span id=\"cb11-37\"><a href=\"#cb11-37\" aria-hidden=\"true\" tabindex=\"-1\"></a>            img_input,img_target <span class=\"op\">=</span> getPatch(img_input,img_target, <span class=\"va\">self</span>.patch_size)</span>\n<span id=\"cb11-38\"><a href=\"#cb11-38\" aria-hidden=\"true\" tabindex=\"-1\"></a>            img_input,img_target<span class=\"op\">=</span>  augment(img_input,img_target)</span>\n<span id=\"cb11-39\"><a href=\"#cb11-39\" aria-hidden=\"true\" tabindex=\"-1\"></a>            </span>\n<span id=\"cb11-40\"><a href=\"#cb11-40\" aria-hidden=\"true\" tabindex=\"-1\"></a>            </span>\n<span id=\"cb11-41\"><a href=\"#cb11-41\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"co\"># 转换为 tensor类型</span></span>\n<span id=\"cb11-42\"><a href=\"#cb11-42\" aria-hidden=\"true\" tabindex=\"-1\"></a>        input_b1 <span class=\"op\">=</span> transforms.ToTensor()(img_input)</span>\n<span id=\"cb11-43\"><a href=\"#cb11-43\" aria-hidden=\"true\" tabindex=\"-1\"></a>        target_s1 <span class=\"op\">=</span> transforms.ToTensor()(img_target)</span>\n<span id=\"cb11-44\"><a href=\"#cb11-44\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb11-45\"><a href=\"#cb11-45\" aria-hidden=\"true\" tabindex=\"-1\"></a>        H <span class=\"op\">=</span> input_b1.size()[<span class=\"dv\">1</span>]</span>\n<span id=\"cb11-46\"><a href=\"#cb11-46\" aria-hidden=\"true\" tabindex=\"-1\"></a>        W<span class=\"op\">=</span> input_b1.size()[<span class=\"dv\">2</span>]</span>\n<span id=\"cb11-47\"><a href=\"#cb11-47\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb11-48\"><a href=\"#cb11-48\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"va\">self</span>.multi:</span>\n<span id=\"cb11-49\"><a href=\"#cb11-49\" aria-hidden=\"true\" tabindex=\"-1\"></a>            input_b1 <span class=\"op\">=</span> transforms.ToPILImage()(input_b1)</span>\n<span id=\"cb11-50\"><a href=\"#cb11-50\" aria-hidden=\"true\" tabindex=\"-1\"></a>            target_s1 <span class=\"op\">=</span> transforms.ToPILImage()(target_s1)</span>\n<span id=\"cb11-51\"><a href=\"#cb11-51\" aria-hidden=\"true\" tabindex=\"-1\"></a>            </span>\n<span id=\"cb11-52\"><a href=\"#cb11-52\" aria-hidden=\"true\" tabindex=\"-1\"></a>            input_b2 <span class=\"op\">=</span> transforms.ToTensor()(transforms.Resize([<span class=\"bu\">int</span>(H<span class=\"op\">/</span><span class=\"dv\">2</span>), <span class=\"bu\">int</span>(W<span class=\"op\">/</span><span class=\"dv\">2</span>)])(input_b1))</span>\n<span id=\"cb11-53\"><a href=\"#cb11-53\" aria-hidden=\"true\" tabindex=\"-1\"></a>            input_b3 <span class=\"op\">=</span> transforms.ToTensor()(transforms.Resize([<span class=\"bu\">int</span>(H<span class=\"op\">/</span><span class=\"dv\">4</span>), <span class=\"bu\">int</span>(W<span class=\"op\">/</span><span class=\"dv\">4</span>)])(input_b1))</span>\n<span id=\"cb11-54\"><a href=\"#cb11-54\" aria-hidden=\"true\" tabindex=\"-1\"></a>            </span>\n<span id=\"cb11-55\"><a href=\"#cb11-55\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"co\"># 只对训练集进行数据增强</span></span>\n<span id=\"cb11-56\"><a href=\"#cb11-56\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">if</span> <span class=\"va\">self</span>.is_train:</span>\n<span id=\"cb11-57\"><a href=\"#cb11-57\" aria-hidden=\"true\" tabindex=\"-1\"></a>                target_s2 <span class=\"op\">=</span> transforms.ToTensor()(transforms.Resize([<span class=\"bu\">int</span>(H<span class=\"op\">/</span><span class=\"dv\">2</span>), <span class=\"bu\">int</span>(W<span class=\"op\">/</span><span class=\"dv\">2</span>)])(target_s1))</span>\n<span id=\"cb11-58\"><a href=\"#cb11-58\" aria-hidden=\"true\" tabindex=\"-1\"></a>                target_s3 <span class=\"op\">=</span> transforms.ToTensor()(transforms.Resize([<span class=\"bu\">int</span>(H<span class=\"op\">/</span><span class=\"dv\">4</span>), <span class=\"bu\">int</span>(W<span class=\"op\">/</span><span class=\"dv\">4</span>)])(target_s1))</span>\n<span id=\"cb11-59\"><a href=\"#cb11-59\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">else</span>:</span>\n<span id=\"cb11-60\"><a href=\"#cb11-60\" aria-hidden=\"true\" tabindex=\"-1\"></a>                target_s2 <span class=\"op\">=</span> []</span>\n<span id=\"cb11-61\"><a href=\"#cb11-61\" aria-hidden=\"true\" tabindex=\"-1\"></a>                target_s3 <span class=\"op\">=</span> []</span>\n<span id=\"cb11-62\"><a href=\"#cb11-62\" aria-hidden=\"true\" tabindex=\"-1\"></a>                </span>\n<span id=\"cb11-63\"><a href=\"#cb11-63\" aria-hidden=\"true\" tabindex=\"-1\"></a>            input_b1 <span class=\"op\">=</span> transforms.ToTensor()(input_b1)</span>\n<span id=\"cb11-64\"><a href=\"#cb11-64\" aria-hidden=\"true\" tabindex=\"-1\"></a>            target_s1 <span class=\"op\">=</span> transforms.ToTensor()(target_s1)</span>\n<span id=\"cb11-65\"><a href=\"#cb11-65\" aria-hidden=\"true\" tabindex=\"-1\"></a>            </span>\n<span id=\"cb11-66\"><a href=\"#cb11-66\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">return</span> &#123;</span>\n<span id=\"cb11-67\"><a href=\"#cb11-67\" aria-hidden=\"true\" tabindex=\"-1\"></a>                <span class=\"st\">&#39;input_b1&#39;</span>: input_b1, <span class=\"co\"># 参照下文的网络结构，输入图像的尺度 1</span></span>\n<span id=\"cb11-68\"><a href=\"#cb11-68\" aria-hidden=\"true\" tabindex=\"-1\"></a>                <span class=\"st\">&#39;input_b2&#39;</span>: input_b2, <span class=\"co\"># 输入图像的尺度 2</span></span>\n<span id=\"cb11-69\"><a href=\"#cb11-69\" aria-hidden=\"true\" tabindex=\"-1\"></a>                <span class=\"st\">&#39;input_b3&#39;</span>: input_b3, <span class=\"co\"># 输入图像的尺度 3</span></span>\n<span id=\"cb11-70\"><a href=\"#cb11-70\" aria-hidden=\"true\" tabindex=\"-1\"></a>                <span class=\"st\">&#39;target_s1&#39;</span>: target_s1, <span class=\"co\"># 目标图像的尺度 1</span></span>\n<span id=\"cb11-71\"><a href=\"#cb11-71\" aria-hidden=\"true\" tabindex=\"-1\"></a>                <span class=\"st\">&#39;target_s2&#39;</span>: target_s2, <span class=\"co\"># 目标图像的尺度 2</span></span>\n<span id=\"cb11-72\"><a href=\"#cb11-72\" aria-hidden=\"true\" tabindex=\"-1\"></a>                <span class=\"st\">&#39;target_s3&#39;</span>: target_s3 <span class=\"co\"># 目标图像的尺度 3</span></span>\n<span id=\"cb11-73\"><a href=\"#cb11-73\" aria-hidden=\"true\" tabindex=\"-1\"></a>            &#125;</span>\n<span id=\"cb11-74\"><a href=\"#cb11-74\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">else</span>:</span>\n<span id=\"cb11-75\"><a href=\"#cb11-75\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">return</span> &#123;<span class=\"st\">&#39;input_b1&#39;</span>: input_b1, <span class=\"st\">&#39;target_s1&#39;</span>: target_s1&#125;</span>\n<span id=\"cb11-76\"><a href=\"#cb11-76\" aria-hidden=\"true\" tabindex=\"-1\"></a>            </span>\n<span id=\"cb11-77\"><a href=\"#cb11-77\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb11-78\"><a href=\"#cb11-78\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb11-79\"><a href=\"#cb11-79\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__len__</span>(<span class=\"va\">self</span>):</span>\n<span id=\"cb11-80\"><a href=\"#cb11-80\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> <span class=\"va\">self</span>.n_samples</span></code></pre></div>\n<h3 id=\"数据加载-dataloader\">数据加载 dataloader</h3>\n<div class=\"sourceCode\" id=\"cb12\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb12-1\"><a href=\"#cb12-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> get_dataset(data_dir,patch_size<span class=\"op\">=</span><span class=\"va\">None</span>, </span>\n<span id=\"cb12-2\"><a href=\"#cb12-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>                batch_size<span class=\"op\">=</span><span class=\"dv\">1</span>, n_threads<span class=\"op\">=</span><span class=\"dv\">1</span>, </span>\n<span id=\"cb12-3\"><a href=\"#cb12-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>                is_train<span class=\"op\">=</span><span class=\"va\">False</span>,multi<span class=\"op\">=</span><span class=\"va\">False</span>):</span>\n<span id=\"cb12-4\"><a href=\"#cb12-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\"># Dataset实例化</span></span>\n<span id=\"cb12-5\"><a href=\"#cb12-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb12-6\"><a href=\"#cb12-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#     print(data_dir)</span></span>\n<span id=\"cb12-7\"><a href=\"#cb12-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#     print(patch_size)</span></span>\n<span id=\"cb12-8\"><a href=\"#cb12-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#     print(is_train)</span></span>\n<span id=\"cb12-9\"><a href=\"#cb12-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#     print(multi)</span></span>\n<span id=\"cb12-10\"><a href=\"#cb12-10\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb12-11\"><a href=\"#cb12-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    dataset <span class=\"op\">=</span> ImgMission(data_dir,patch_size<span class=\"op\">=</span>patch_size,</span>\n<span id=\"cb12-12\"><a href=\"#cb12-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>                    is_train<span class=\"op\">=</span>is_train,multi<span class=\"op\">=</span>multi)</span>\n<span id=\"cb12-13\"><a href=\"#cb12-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb12-14\"><a href=\"#cb12-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\"># print(dataset)</span></span>\n<span id=\"cb12-15\"><a href=\"#cb12-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\"># 利用封装好的 dataloader 接口定义训练过程的迭代器</span></span>\n<span id=\"cb12-16\"><a href=\"#cb12-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\"># 参数num_workers表示进程个数，在jupyter下改为0</span></span>\n<span id=\"cb12-17\"><a href=\"#cb12-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    dataloader <span class=\"op\">=</span> torch.utils.data.DataLoader(dataset,batch_size<span class=\"op\">=</span>batch_size,</span>\n<span id=\"cb12-18\"><a href=\"#cb12-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                            drop_last<span class=\"op\">=</span><span class=\"va\">True</span>, shuffle<span class=\"op\">=</span>is_train,</span>\n<span id=\"cb12-19\"><a href=\"#cb12-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                             num_workers <span class=\"op\">=</span> <span class=\"dv\">0</span>)</span>\n<span id=\"cb12-20\"><a href=\"#cb12-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> dataloader</span></code></pre></div>\n<ul>\n<li>将训练时的dataloader实例化</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb13\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb13-1\"><a href=\"#cb13-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>data_loader <span class=\"op\">=</span> get_dataset(args.data_dir,</span>\n<span id=\"cb13-2\"><a href=\"#cb13-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>                          patch_size<span class=\"op\">=</span>args.patch_size,</span>\n<span id=\"cb13-3\"><a href=\"#cb13-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>                          batch_size<span class=\"op\">=</span> args.batch_size,</span>\n<span id=\"cb13-4\"><a href=\"#cb13-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>                          n_threads<span class=\"op\">=</span> args.n_threads,</span>\n<span id=\"cb13-5\"><a href=\"#cb13-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>                          is_train<span class=\"op\">=</span><span class=\"va\">True</span>,</span>\n<span id=\"cb13-6\"><a href=\"#cb13-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>                          multi <span class=\"op\">=</span> args.multi</span>\n<span id=\"cb13-7\"><a href=\"#cb13-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>                         )</span></code></pre></div>\n<pre><code>[&#39;GOPR0372_07_00&#39;, &#39;GOPR0372_07_01&#39;, &#39;GOPR0374_11_00&#39;, &#39;GOPR0374_11_01&#39;, &#39;GOPR0374_11_02&#39;, &#39;GOPR0374_11_03&#39;, &#39;GOPR0378_13_00&#39;, &#39;GOPR0379_11_00&#39;, &#39;GOPR0380_11_00&#39;, &#39;GOPR0384_11_01&#39;, &#39;GOPR0384_11_02&#39;, &#39;GOPR0384_11_03&#39;, &#39;GOPR0384_11_04&#39;, &#39;GOPR0385_11_00&#39;, &#39;GOPR0386_11_00&#39;, &#39;GOPR0477_11_00&#39;, &#39;GOPR0857_11_00&#39;, &#39;GOPR0868_11_01&#39;, &#39;GOPR0868_11_02&#39;, &#39;GOPR0871_11_01&#39;, &#39;GOPR0881_11_00&#39;, &#39;GOPR0884_11_00&#39;]</code></pre>\n<h2 id=\"模型构建\">模型构建</h2>\n<ul>\n<li>模型介绍</li>\n<li>模型定义</li>\n<li>实例化模型</li>\n<li>损失函数和优化器</li>\n</ul>\n<figure>\n<img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222025823.png\" alt=\"image-20211120222025823\">\n<figcaption aria-hidden=\"true\">image-20211120222025823</figcaption>\n</figure>\n<p>CONV 表示卷积层， ResBlock 表示残差模块， Upconv\n表示上采样（也可以用反卷积代替）。 从图中可以看出，该模型使用了\n“multi-scale” 的结构， 在输入和输出部分都都采用了高斯金字塔（Gaussian\npyramid）的形式（即对原图像进行不同尺度的下采样，从而获得处于不同分辨率的图像）</p>\n<figure>\n<img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222042862.png\" alt=\"image-20211120222042862\">\n<figcaption aria-hidden=\"true\">image-20211120222042862</figcaption>\n</figure>\n<h3 id=\"模型定义\">模型定义</h3>\n<ul>\n<li>default_conv 是模型采用的默认卷积层，</li>\n<li>UpConv 用于上采样卷积，</li>\n<li>ResidualBlock 是模型使用的残差模块，</li>\n<li>SingleScaleNet 是单个尺度网络，</li>\n<li>MultiScaleNet 将几个 SingleScaleNet\n整合成了最终的多尺度网络模型</li>\n</ul>\n<p><em>具体作用</em></p>\n<ul>\n<li>default_conv : 网络中默认采用的卷积层，定义之后，避免重复代码</li>\n<li>UpConv : 上卷积，对应上图中的 Up\nConv，将图像的尺度扩大，输入到另一个单尺度网络</li>\n<li>ResidualBlock :\n残差模块，网络模型中采用的残差模块，之所以采用残差模块，是因为网络“只需要需要模糊图像与去模糊图像之间的差异即可”</li>\n<li>SingleScaleNet : 单尺度模型，一个尺度对应一个单尺度模型实例</li>\n<li>MultiScaleNet :\n多尺度模型，将多个单尺度模型实例组合即可得到上图所示的多尺度去模糊网络</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb15\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb15-1\"><a href=\"#cb15-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> default_conv(in_channels,out_channels, kernel_size, bias):</span>\n<span id=\"cb15-2\"><a href=\"#cb15-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> nn.Conv2d(in_channels,</span>\n<span id=\"cb15-3\"><a href=\"#cb15-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>                    out_channels,</span>\n<span id=\"cb15-4\"><a href=\"#cb15-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>                    kernel_size,</span>\n<span id=\"cb15-5\"><a href=\"#cb15-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>                    padding<span class=\"op\">=</span>(kernel_size <span class=\"op\">//</span> <span class=\"dv\">2</span>),</span>\n<span id=\"cb15-6\"><a href=\"#cb15-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>                    bias<span class=\"op\">=</span>bias)</span>\n<span id=\"cb15-7\"><a href=\"#cb15-7\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb15-8\"><a href=\"#cb15-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> UpConv(nn.Module):</span>\n<span id=\"cb15-9\"><a href=\"#cb15-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>):</span>\n<span id=\"cb15-10\"><a href=\"#cb15-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">super</span>(UpConv, <span class=\"va\">self</span>).<span class=\"fu\">__init__</span>()</span>\n<span id=\"cb15-11\"><a href=\"#cb15-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.body <span class=\"op\">=</span> nn.Sequential(default_conv(<span class=\"dv\">3</span>,<span class=\"dv\">12</span>,<span class=\"dv\">3</span>,<span class=\"va\">True</span>),</span>\n<span id=\"cb15-12\"><a href=\"#cb15-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                 nn.PixelShuffle(<span class=\"dv\">2</span>),</span>\n<span id=\"cb15-13\"><a href=\"#cb15-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                 nn.ReLU(inplace<span class=\"op\">=</span><span class=\"va\">True</span>))</span>\n<span id=\"cb15-14\"><a href=\"#cb15-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> forward(<span class=\"va\">self</span>,x):</span>\n<span id=\"cb15-15\"><a href=\"#cb15-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">return</span> <span class=\"va\">self</span>.body(x)</span>\n<span id=\"cb15-16\"><a href=\"#cb15-16\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb15-17\"><a href=\"#cb15-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> ResidualBlock(nn.Module):</span>\n<span id=\"cb15-18\"><a href=\"#cb15-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>,n_feats):</span>\n<span id=\"cb15-19\"><a href=\"#cb15-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">super</span>(ResidualBlock,<span class=\"va\">self</span>).<span class=\"fu\">__init__</span>()</span>\n<span id=\"cb15-20\"><a href=\"#cb15-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-21\"><a href=\"#cb15-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>        modules_body <span class=\"op\">=</span> [</span>\n<span id=\"cb15-22\"><a href=\"#cb15-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>            default_conv(n_feats, n_feats, <span class=\"dv\">3</span>, bias<span class=\"op\">=</span><span class=\"va\">True</span>),</span>\n<span id=\"cb15-23\"><a href=\"#cb15-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>            nn.ReLU(inplace<span class=\"op\">=</span><span class=\"va\">True</span>),</span>\n<span id=\"cb15-24\"><a href=\"#cb15-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>            default_conv(n_feats,n_feats,<span class=\"dv\">3</span>,bias<span class=\"op\">=</span><span class=\"va\">True</span>)</span>\n<span id=\"cb15-25\"><a href=\"#cb15-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>        ]</span>\n<span id=\"cb15-26\"><a href=\"#cb15-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-27\"><a href=\"#cb15-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.body <span class=\"op\">=</span> nn.Sequential(<span class=\"op\">*</span>modules_body)</span>\n<span id=\"cb15-28\"><a href=\"#cb15-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-29\"><a href=\"#cb15-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> forward(<span class=\"va\">self</span>,x):</span>\n<span id=\"cb15-30\"><a href=\"#cb15-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>        res<span class=\"op\">=</span> <span class=\"va\">self</span>.body(x)</span>\n<span id=\"cb15-31\"><a href=\"#cb15-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>        res <span class=\"op\">+=</span> x</span>\n<span id=\"cb15-32\"><a href=\"#cb15-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> res</span>\n<span id=\"cb15-33\"><a href=\"#cb15-33\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb15-34\"><a href=\"#cb15-34\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> SingleScaleNet(nn.Module):</span>\n<span id=\"cb15-35\"><a href=\"#cb15-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>,n_feats,n_resblocks, is_skip, n_channels<span class=\"op\">=</span><span class=\"dv\">3</span>):</span>\n<span id=\"cb15-36\"><a href=\"#cb15-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">super</span>(SingleScaleNet, <span class=\"va\">self</span>).<span class=\"fu\">__init__</span>()</span>\n<span id=\"cb15-37\"><a href=\"#cb15-37\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.is_skip <span class=\"op\">=</span> is_skip</span>\n<span id=\"cb15-38\"><a href=\"#cb15-38\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-39\"><a href=\"#cb15-39\" aria-hidden=\"true\" tabindex=\"-1\"></a>        modules_head <span class=\"op\">=</span> [</span>\n<span id=\"cb15-40\"><a href=\"#cb15-40\" aria-hidden=\"true\" tabindex=\"-1\"></a>            default_conv(n_channels,n_feats,<span class=\"dv\">5</span>,bias<span class=\"op\">=</span><span class=\"va\">True</span>),</span>\n<span id=\"cb15-41\"><a href=\"#cb15-41\" aria-hidden=\"true\" tabindex=\"-1\"></a>            nn.ReLU(inplace<span class=\"op\">=</span><span class=\"va\">True</span>)</span>\n<span id=\"cb15-42\"><a href=\"#cb15-42\" aria-hidden=\"true\" tabindex=\"-1\"></a>        ]</span>\n<span id=\"cb15-43\"><a href=\"#cb15-43\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-44\"><a href=\"#cb15-44\" aria-hidden=\"true\" tabindex=\"-1\"></a>        modules_body <span class=\"op\">=</span> [ResidualBlock(n_feats) <span class=\"cf\">for</span> _ <span class=\"kw\">in</span> <span class=\"bu\">range</span>(n_resblocks)]</span>\n<span id=\"cb15-45\"><a href=\"#cb15-45\" aria-hidden=\"true\" tabindex=\"-1\"></a>        modules_tail <span class=\"op\">=</span> [default_conv(n_feats, <span class=\"dv\">3</span>,<span class=\"dv\">5</span>,bias<span class=\"op\">=</span><span class=\"va\">True</span>)]</span>\n<span id=\"cb15-46\"><a href=\"#cb15-46\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-47\"><a href=\"#cb15-47\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.head <span class=\"op\">=</span> nn.Sequential(<span class=\"op\">*</span>modules_head)</span>\n<span id=\"cb15-48\"><a href=\"#cb15-48\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.body <span class=\"op\">=</span> nn.Sequential(<span class=\"op\">*</span>modules_body)</span>\n<span id=\"cb15-49\"><a href=\"#cb15-49\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.tail <span class=\"op\">=</span> nn.Sequential(<span class=\"op\">*</span>modules_tail)</span>\n<span id=\"cb15-50\"><a href=\"#cb15-50\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-51\"><a href=\"#cb15-51\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> forward(<span class=\"va\">self</span>,x):</span>\n<span id=\"cb15-52\"><a href=\"#cb15-52\" aria-hidden=\"true\" tabindex=\"-1\"></a>        x<span class=\"op\">=</span> <span class=\"va\">self</span>.head(x)</span>\n<span id=\"cb15-53\"><a href=\"#cb15-53\" aria-hidden=\"true\" tabindex=\"-1\"></a>        res<span class=\"op\">=</span> <span class=\"va\">self</span>.body(x)</span>\n<span id=\"cb15-54\"><a href=\"#cb15-54\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"va\">self</span>.is_skip:</span>\n<span id=\"cb15-55\"><a href=\"#cb15-55\" aria-hidden=\"true\" tabindex=\"-1\"></a>            res <span class=\"op\">+=</span> x</span>\n<span id=\"cb15-56\"><a href=\"#cb15-56\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-57\"><a href=\"#cb15-57\" aria-hidden=\"true\" tabindex=\"-1\"></a>        res <span class=\"op\">=</span> <span class=\"va\">self</span>.tail(res)</span>\n<span id=\"cb15-58\"><a href=\"#cb15-58\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> res</span>\n<span id=\"cb15-59\"><a href=\"#cb15-59\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb15-60\"><a href=\"#cb15-60\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> MultiScaleNet(nn.Module):</span>\n<span id=\"cb15-61\"><a href=\"#cb15-61\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>,n_feats, n_resblocks ,is_skip):</span>\n<span id=\"cb15-62\"><a href=\"#cb15-62\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">super</span>(MultiScaleNet,<span class=\"va\">self</span>).<span class=\"fu\">__init__</span>()</span>\n<span id=\"cb15-63\"><a href=\"#cb15-63\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-64\"><a href=\"#cb15-64\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.scale3_net <span class=\"op\">=</span> SingleScaleNet(n_feats,</span>\n<span id=\"cb15-65\"><a href=\"#cb15-65\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                         n_resblocks,</span>\n<span id=\"cb15-66\"><a href=\"#cb15-66\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                         is_skip,</span>\n<span id=\"cb15-67\"><a href=\"#cb15-67\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                         n_channels<span class=\"op\">=</span><span class=\"dv\">3</span>)</span>\n<span id=\"cb15-68\"><a href=\"#cb15-68\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.upconv3 <span class=\"op\">=</span> UpConv()</span>\n<span id=\"cb15-69\"><a href=\"#cb15-69\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.scale2_net <span class=\"op\">=</span> SingleScaleNet(n_feats,</span>\n<span id=\"cb15-70\"><a href=\"#cb15-70\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                         n_resblocks,</span>\n<span id=\"cb15-71\"><a href=\"#cb15-71\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                         is_skip,</span>\n<span id=\"cb15-72\"><a href=\"#cb15-72\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                         n_channels<span class=\"op\">=</span><span class=\"dv\">6</span>)</span>\n<span id=\"cb15-73\"><a href=\"#cb15-73\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.upconv2 <span class=\"op\">=</span> UpConv()</span>\n<span id=\"cb15-74\"><a href=\"#cb15-74\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-75\"><a href=\"#cb15-75\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.scale1_net <span class=\"op\">=</span> SingleScaleNet(n_feats,</span>\n<span id=\"cb15-76\"><a href=\"#cb15-76\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                        n_resblocks,</span>\n<span id=\"cb15-77\"><a href=\"#cb15-77\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                        is_skip,</span>\n<span id=\"cb15-78\"><a href=\"#cb15-78\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                        n_channels<span class=\"op\">=</span><span class=\"dv\">6</span>)</span>\n<span id=\"cb15-79\"><a href=\"#cb15-79\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-80\"><a href=\"#cb15-80\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> forward(<span class=\"va\">self</span>,mulscale_input):</span>\n<span id=\"cb15-81\"><a href=\"#cb15-81\" aria-hidden=\"true\" tabindex=\"-1\"></a>        input_b1, input_b2,input_b3 <span class=\"op\">=</span> mulscale_input</span>\n<span id=\"cb15-82\"><a href=\"#cb15-82\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-83\"><a href=\"#cb15-83\" aria-hidden=\"true\" tabindex=\"-1\"></a>        output_l3 <span class=\"op\">=</span> <span class=\"va\">self</span>.scale3_net(input_b3)</span>\n<span id=\"cb15-84\"><a href=\"#cb15-84\" aria-hidden=\"true\" tabindex=\"-1\"></a>        output_l3_up <span class=\"op\">=</span> <span class=\"va\">self</span>.upconv3(output_l3)</span>\n<span id=\"cb15-85\"><a href=\"#cb15-85\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-86\"><a href=\"#cb15-86\" aria-hidden=\"true\" tabindex=\"-1\"></a>        output_l2 <span class=\"op\">=</span> <span class=\"va\">self</span>.scale2_net(torch.cat((input_b2,output_l3_up),<span class=\"dv\">1</span>))</span>\n<span id=\"cb15-87\"><a href=\"#cb15-87\" aria-hidden=\"true\" tabindex=\"-1\"></a>        output_l2_up <span class=\"op\">=</span> <span class=\"va\">self</span>.upconv2(output_l2)</span>\n<span id=\"cb15-88\"><a href=\"#cb15-88\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-89\"><a href=\"#cb15-89\" aria-hidden=\"true\" tabindex=\"-1\"></a>        output_l1 <span class=\"op\">=</span> <span class=\"va\">self</span>.scale2_net(torch.cat((input_b1,output_l2_up),<span class=\"dv\">1</span>))</span>\n<span id=\"cb15-90\"><a href=\"#cb15-90\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-91\"><a href=\"#cb15-91\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> output_l1,output_l2,output_l3</span></code></pre></div>\n<h3 id=\"模型实例化\">模型实例化</h3>\n<div class=\"sourceCode\" id=\"cb16\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb16-1\"><a href=\"#cb16-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">if</span> args.multi:</span>\n<span id=\"cb16-2\"><a href=\"#cb16-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    my_model <span class=\"op\">=</span> MultiScaleNet(n_feats<span class=\"op\">=</span>args.n_feats,</span>\n<span id=\"cb16-3\"><a href=\"#cb16-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>                            n_resblocks <span class=\"op\">=</span> args.n_resblocks,</span>\n<span id=\"cb16-4\"><a href=\"#cb16-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>                            is_skip<span class=\"op\">=</span> args.skip)</span>\n<span id=\"cb16-5\"><a href=\"#cb16-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">else</span>:</span>\n<span id=\"cb16-6\"><a href=\"#cb16-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    my_model <span class=\"op\">=</span> SingleScaleNet(n_feats<span class=\"op\">=</span>args.n_feats,</span>\n<span id=\"cb16-7\"><a href=\"#cb16-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>                             n_resblocks<span class=\"op\">=</span>args.n_resblocks,</span>\n<span id=\"cb16-8\"><a href=\"#cb16-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>                             is_skip <span class=\"op\">=</span> args.skip)</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb17\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb17-1\"><a href=\"#cb17-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">if</span> torch.cuda.is_available():</span>\n<span id=\"cb17-2\"><a href=\"#cb17-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    my_model.cuda()</span>\n<span id=\"cb17-3\"><a href=\"#cb17-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    loss_function <span class=\"op\">=</span> nn.MSELoss().cuda()</span>\n<span id=\"cb17-4\"><a href=\"#cb17-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">else</span>:</span>\n<span id=\"cb17-5\"><a href=\"#cb17-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    loss_function <span class=\"op\">=</span> nn.MSELoss()</span>\n<span id=\"cb17-6\"><a href=\"#cb17-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb17-7\"><a href=\"#cb17-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>optimizer <span class=\"op\">=</span> optim.Adam(my_model.parameters(),lr<span class=\"op\">=</span>args.lr)</span>\n<span id=\"cb17-8\"><a href=\"#cb17-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(my_model)</span>\n<span id=\"cb17-9\"><a href=\"#cb17-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(loss_function)</span></code></pre></div>\n<pre><code>MultiScaleNet(\n  (scale3_net): SingleScaleNet(\n    (head): Sequential(\n      (0): Conv2d(3, 8, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n      (1): ReLU(inplace=True)\n    )\n    (body): Sequential(\n      (0): ResidualBlock(\n        (body): Sequential(\n          (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (1): ReLU(inplace=True)\n          (2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        )\n      )\n      (1): ResidualBlock(\n        (body): Sequential(\n          (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (1): ReLU(inplace=True)\n          (2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        )\n      )\n      (2): ResidualBlock(\n        (body): Sequential(\n          (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (1): ReLU(inplace=True)\n          (2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        )\n      )\n    )\n    (tail): Sequential(\n      (0): Conv2d(8, 3, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    )\n  )\n  (upconv3): UpConv(\n    (body): Sequential(\n      (0): Conv2d(3, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): PixelShuffle(upscale_factor=2)\n      (2): ReLU(inplace=True)\n    )\n  )\n  (scale2_net): SingleScaleNet(\n    (head): Sequential(\n      (0): Conv2d(6, 8, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n      (1): ReLU(inplace=True)\n    )\n    (body): Sequential(\n      (0): ResidualBlock(\n        (body): Sequential(\n          (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (1): ReLU(inplace=True)\n          (2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        )\n      )\n      (1): ResidualBlock(\n        (body): Sequential(\n          (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (1): ReLU(inplace=True)\n          (2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        )\n      )\n      (2): ResidualBlock(\n        (body): Sequential(\n          (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (1): ReLU(inplace=True)\n          (2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        )\n      )\n    )\n    (tail): Sequential(\n      (0): Conv2d(8, 3, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    )\n  )\n  (upconv2): UpConv(\n    (body): Sequential(\n      (0): Conv2d(3, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): PixelShuffle(upscale_factor=2)\n      (2): ReLU(inplace=True)\n    )\n  )\n  (scale1_net): SingleScaleNet(\n    (head): Sequential(\n      (0): Conv2d(6, 8, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n      (1): ReLU(inplace=True)\n    )\n    (body): Sequential(\n      (0): ResidualBlock(\n        (body): Sequential(\n          (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (1): ReLU(inplace=True)\n          (2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        )\n      )\n      (1): ResidualBlock(\n        (body): Sequential(\n          (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (1): ReLU(inplace=True)\n          (2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        )\n      )\n      (2): ResidualBlock(\n        (body): Sequential(\n          (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (1): ReLU(inplace=True)\n          (2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        )\n      )\n    )\n    (tail): Sequential(\n      (0): Conv2d(8, 3, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    )\n  )\n)\nMSELoss()</code></pre>\n<h3 id=\"损失函数和优化器\">损失函数和优化器</h3>\n<ul>\n<li>Adam 优化器，初始学习率为 lr，其相对于\nSGD，更自动化，实际中需要调整的参数较少，但需要注意的是，其使用内存也比\nSGD 要高。</li>\n<li>损失函数使用最常见的均方损失函数（MSELoss）: <img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222105417.png\" alt=\"image-20211120222105417\"> 其中 <span class=\"math inline\">\\(f^{\\prime}(i,j)\\)</span> 和 <span class=\"math inline\">\\(f(i,j)\\)</span>\n分别为模型输出结果图和非模糊图上坐标为 <span class=\"math inline\">\\((i,j)\\)</span>\n的像素，M,N分别表示图片的长与宽。</li>\n<li>具体的，本文所用的多尺度损失函数为： <img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222124809.png\" alt=\"image-20211120222124809\"> <span class=\"math inline\">\\(f^{\\prime}_k\\)</span> 和 <span class=\"math inline\">\\(f_k\\)</span> 分别表示第 <span class=\"math inline\">\\(k\\)</span> 个尺度上的输出结果图和非模糊图。</li>\n</ul>\n<h2 id=\"模型训练\">模型训练</h2>\n<ol type=\"1\">\n<li>训练策略</li>\n<li>训练模型</li>\n<li>训练过程可视化</li>\n</ol>\n<h3 id=\"训练策略\">训练策略</h3>\n<ul>\n<li>在模型训练过程中，随着训练的进行，更新网络参数的步进（学习率）应该越来越小，整体训练过程应该满足\n“先粗调后细调”，这就是常说的学习率策略。</li>\n<li>本次训练采用的学习率优化策略为 lr_scheduler.StepLR，步进为\nlr_step_size，学习率每隔 lr_step_size 个 epoch 乘以 lr_gamma</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb19\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb19-1\"><a href=\"#cb19-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>scheduler <span class=\"op\">=</span> lr_scheduler.StepLR(optimizer,args.lr_step_size,args.lr_gamma)</span>\n<span id=\"cb19-2\"><a href=\"#cb19-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb19-3\"><a href=\"#cb19-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>scheduler</span></code></pre></div>\n<pre><code>&lt;torch.optim.lr_scheduler.StepLR at 0x290378a0198&gt;</code></pre>\n<h3 id=\"训练模型\">训练模型</h3>\n<p>在训练开始之前，要先创建一个\nSummaryWriter，用来记录和可视化训练过程</p>\n<div class=\"sourceCode\" id=\"cb21\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb21-1\"><a href=\"#cb21-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>writer <span class=\"op\">=</span> SummaryWriter(os.path.join(args.save_dir,<span class=\"st\">&quot;temp/logs/&quot;</span>))</span>\n<span id=\"cb21-2\"><a href=\"#cb21-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb21-3\"><a href=\"#cb21-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>writer</span></code></pre></div>\n<pre><code>&lt;tensorboardX.writer.SummaryWriter at 0x290378d6e10&gt;</code></pre>\n<ul>\n<li>在命令行运行 tensorboard --logdir=experiment/logs\n来启动tensorboard。</li>\n<li>在训练模型时，每训练完一个 epoch\n将模型的参数保存下来，防止训练被意外中断以及方便测试，如果需要不断更新最新的一次训练的参数，可以取消最后一行的注释。</li>\n<li>训练过程中，使用 tqdm 的进度条来观察训练过程</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb23\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb23-1\"><a href=\"#cb23-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>bar_format <span class=\"op\">=</span> <span class=\"st\">&#39;</span><span class=\"sc\">&#123;desc&#125;&#123;percentage:3.0f&#125;</span><span class=\"st\">% | [</span><span class=\"sc\">&#123;elapsed&#125;</span><span class=\"st\">&lt;</span><span class=\"sc\">&#123;remaining&#125;</span><span class=\"st\">,</span><span class=\"sc\">&#123;rate_fmt&#125;</span><span class=\"st\">]&#39;</span> <span class=\"co\"># 进度条格式</span></span>\n<span id=\"cb23-2\"><a href=\"#cb23-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-3\"><a href=\"#cb23-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">for</span> epoch <span class=\"kw\">in</span> <span class=\"bu\">range</span>(args.epochs):</span>\n<span id=\"cb23-4\"><a href=\"#cb23-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    total_loss <span class=\"op\">=</span> <span class=\"dv\">0</span></span>\n<span id=\"cb23-5\"><a href=\"#cb23-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    batch_bar <span class=\"op\">=</span>  tqdm(data_loader, bar_format<span class=\"op\">=</span>bar_format) <span class=\"co\"># 利用tqdm动态显示训练过程</span></span>\n<span id=\"cb23-6\"><a href=\"#cb23-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> batch,images <span class=\"kw\">in</span> <span class=\"bu\">enumerate</span>(batch_bar):</span>\n<span id=\"cb23-7\"><a href=\"#cb23-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        my_model.train()</span>\n<span id=\"cb23-8\"><a href=\"#cb23-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        curr_batch <span class=\"op\">=</span> epoch <span class=\"op\">*</span> data_loader.<span class=\"fu\">__len__</span>() <span class=\"op\">+</span> batch <span class=\"co\"># 当前batch在整个训练过程中的索引</span></span>\n<span id=\"cb23-9\"><a href=\"#cb23-9\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-10\"><a href=\"#cb23-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>        input_b1 <span class=\"op\">=</span> images[<span class=\"st\">&#39;input_b1&#39;</span>].to(device) <span class=\"co\"># 原始输入图像</span></span>\n<span id=\"cb23-11\"><a href=\"#cb23-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        target_s1 <span class=\"op\">=</span> images[<span class=\"st\">&#39;target_s1&#39;</span>].to(device) <span class=\"co\"># 目标非模糊图片</span></span>\n<span id=\"cb23-12\"><a href=\"#cb23-12\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-13\"><a href=\"#cb23-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> args.multi:</span>\n<span id=\"cb23-14\"><a href=\"#cb23-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>            input_b2 <span class=\"op\">=</span> images[<span class=\"st\">&#39;input_b2&#39;</span>].to(device)  <span class=\"co\"># level-2 尺度</span></span>\n<span id=\"cb23-15\"><a href=\"#cb23-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>            target_s2 <span class=\"op\">=</span> images[<span class=\"st\">&#39;target_s2&#39;</span>].to(device)</span>\n<span id=\"cb23-16\"><a href=\"#cb23-16\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-17\"><a href=\"#cb23-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>            input_b3 <span class=\"op\">=</span> images[<span class=\"st\">&#39;input_b3&#39;</span>].to(device)  <span class=\"co\"># level-3 尺度</span></span>\n<span id=\"cb23-18\"><a href=\"#cb23-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>            target_s3 <span class=\"op\">=</span> images[<span class=\"st\">&#39;target_s3&#39;</span>].to(device)</span>\n<span id=\"cb23-19\"><a href=\"#cb23-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>            output_l1, output_l2, output_l3 <span class=\"op\">=</span> my_model((input_b1,input_b2,input_b3))</span>\n<span id=\"cb23-20\"><a href=\"#cb23-20\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-21\"><a href=\"#cb23-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"co\"># 损失函数</span></span>\n<span id=\"cb23-22\"><a href=\"#cb23-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>            loss <span class=\"op\">=</span> (loss_function(output_l1,target_s1) <span class=\"op\">+</span> loss_function(output_l2,target_s2) <span class=\"op\">+</span> loss_function(output_l3, target_s3)) <span class=\"op\">/</span><span class=\"dv\">3</span> </span>\n<span id=\"cb23-23\"><a href=\"#cb23-23\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-24\"><a href=\"#cb23-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">else</span>:</span>\n<span id=\"cb23-25\"><a href=\"#cb23-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>            output_l1 <span class=\"op\">=</span> my_model(input_b1)</span>\n<span id=\"cb23-26\"><a href=\"#cb23-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>            loss <span class=\"op\">=</span> loss_function(output_l1,target_s1)</span>\n<span id=\"cb23-27\"><a href=\"#cb23-27\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-28\"><a href=\"#cb23-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>        my_model.zero_grad()</span>\n<span id=\"cb23-29\"><a href=\"#cb23-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>        loss.backward()  <span class=\"co\">#反向传播</span></span>\n<span id=\"cb23-30\"><a href=\"#cb23-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>        optimizer.step() <span class=\"co\"># 更新权值</span></span>\n<span id=\"cb23-31\"><a href=\"#cb23-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>        total_loss <span class=\"op\">+=</span> loss.item()</span>\n<span id=\"cb23-32\"><a href=\"#cb23-32\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-33\"><a href=\"#cb23-33\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-34\"><a href=\"#cb23-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>        print_str <span class=\"op\">=</span> <span class=\"st\">&quot;|&quot;</span>.join([</span>\n<span id=\"cb23-35\"><a href=\"#cb23-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"st\">&quot;epoch:</span><span class=\"sc\">%3d</span><span class=\"st\">/</span><span class=\"sc\">%3d</span><span class=\"st\">&quot;</span> <span class=\"op\">%</span> (epoch <span class=\"op\">+</span> <span class=\"dv\">1</span>, args.epochs),</span>\n<span id=\"cb23-36\"><a href=\"#cb23-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"st\">&quot;batch:</span><span class=\"sc\">%3d</span><span class=\"st\">/</span><span class=\"sc\">%3d</span><span class=\"st\">&quot;</span> <span class=\"op\">%</span> (batch <span class=\"op\">+</span> <span class=\"dv\">1</span>, data_loader.<span class=\"fu\">__len__</span>()),</span>\n<span id=\"cb23-37\"><a href=\"#cb23-37\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"st\">&quot;loss:</span><span class=\"sc\">%.5f</span><span class=\"st\">&quot;</span> <span class=\"op\">%</span> (loss.item()),</span>\n<span id=\"cb23-38\"><a href=\"#cb23-38\" aria-hidden=\"true\" tabindex=\"-1\"></a>        ])</span>\n<span id=\"cb23-39\"><a href=\"#cb23-39\" aria-hidden=\"true\" tabindex=\"-1\"></a>        batch_bar.set_description(print_str,refresh<span class=\"op\">=</span><span class=\"va\">True</span>)  <span class=\"co\"># 更新进度条</span></span>\n<span id=\"cb23-40\"><a href=\"#cb23-40\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-41\"><a href=\"#cb23-41\" aria-hidden=\"true\" tabindex=\"-1\"></a>        writer.add_scalar(<span class=\"st\">&#39;train/batch_loss&#39;</span>, loss.item(), curr_batch)</span>\n<span id=\"cb23-42\"><a href=\"#cb23-42\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-43\"><a href=\"#cb23-43\" aria-hidden=\"true\" tabindex=\"-1\"></a>    batch_bar.close()</span>\n<span id=\"cb23-44\"><a href=\"#cb23-44\" aria-hidden=\"true\" tabindex=\"-1\"></a>    scheduler.step() <span class=\"co\">#调整学习率</span></span>\n<span id=\"cb23-45\"><a href=\"#cb23-45\" aria-hidden=\"true\" tabindex=\"-1\"></a>    loss <span class=\"op\">=</span> total_loss <span class=\"op\">/</span> (batch <span class=\"op\">+</span><span class=\"dv\">1</span>)</span>\n<span id=\"cb23-46\"><a href=\"#cb23-46\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-47\"><a href=\"#cb23-47\" aria-hidden=\"true\" tabindex=\"-1\"></a>    writer.add_scalar(<span class=\"st\">&#39;train/batch_loss&#39;</span>,loss,epoch)</span>\n<span id=\"cb23-48\"><a href=\"#cb23-48\" aria-hidden=\"true\" tabindex=\"-1\"></a>    torch.save(my_model.state_dict(),os.path.join(args.save_cp_dir, <span class=\"ss\">f&#39;Epoch_</span><span class=\"sc\">&#123;</span>epoch<span class=\"sc\">&#125;</span><span class=\"ss\">.pt&#39;</span>)) <span class=\"co\"># 保存每个 epoch 的参数</span></span>\n<span id=\"cb23-49\"><a href=\"#cb23-49\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#     torch.save(my_model.state_dict(),os.path.join(args.save_cp_dir, f&#39;Epoch_lastest.pt&#39;)) # 保存最新的参数</span></span></code></pre></div>\n<figure>\n<img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222241087.png\" alt=\"image-20211120222241087\">\n<figcaption aria-hidden=\"true\">image-20211120222241087</figcaption>\n</figure>\n<h2 id=\"模型评估\">模型评估</h2>\n<ol type=\"1\">\n<li>指标介绍</li>\n<li>指标实现</li>\n</ol>\n<h3 id=\"指标介绍\">指标介绍</h3>\n<p>为了评估模型的效果如何，我们通过计算 峰值信噪比（Peak Signal-to-Noise\nRatio, PSNR）， 结构相似性（Structural Similarity, SSIM）和 多尺度的\nSSIM（Multi-Scale SSIM，MSSIM）三个指标来对结果进行分析</p>\n<h5 id=\"psnr\">PSNR</h5>\n<p>PSNR 的定义如下： <img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222352850.png\" alt=\"image-20211120222352850\"> 其中，<span class=\"math inline\">\\(M A\nX_{I}\\)</span>表示图像点颜色的最大数值，如果每个采样点用 8\n位表示，则最大数值为 255，<span class=\"math inline\">\\(MSE\\)</span>是两个图像之间的均方误差。\nPSNR值越大代表模糊图像与参考图像越接近，即去模糊效果越好。</p>\n<h5 id=\"ssim\">SSIM</h5>\n<p>SSIM也是衡量两幅图片相似性的指标，其定义如下： <img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222344621.png\" alt=\"image-20211120222344621\"> SSIM由模型输出图像 <span class=\"math inline\">\\(x\\)</span> 和参考图像 <span class=\"math inline\">\\(y\\)</span> 之间的亮度对比（$ l(, )<span class=\"math inline\">\\(）、对比度对比（\\)</span>c(, )<span class=\"math inline\">\\(）和结构对比（\\)</span>s(, ) <span class=\"math inline\">\\(）三部分组成，\\)</span><span class=\"math inline\">\\(，\\)</span>$ 和 <span class=\"math inline\">\\(\\gamma\\)</span>是各自的权重因子，一般都取为 1：\n<img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222325752.png\" alt=\"image-20211120222325752\"> 其中，<span class=\"math inline\">\\(C_{1}\\)</span>，<span class=\"math inline\">\\(C_{2}\\)</span>和<span class=\"math inline\">\\(C_{3}\\)</span>为常数，是为了避免分母接近于0时造成的不稳定性。<span class=\"math inline\">\\(\\mu_{x}\\)</span> 和 <span class=\"math inline\">\\(\\mu_{y}\\)</span>\n分别为模型输出图像和参考图像的均值。<span class=\"math inline\">\\(\\sigma_{x}\\)</span> 和 <span class=\"math inline\">\\(\\sigma_{y}\\)</span>\n分别为模型输出图像和参考图像的标准差。通常取 <span class=\"math inline\">\\(C1=(K1*L)^2\\)</span>，<span class=\"math inline\">\\(C2=(K2*L)^2\\)</span>，<span class=\"math inline\">\\(C3=C2/2\\)</span>，一般地<span class=\"math inline\">\\(K1=0.01\\)</span>， <span class=\"math inline\">\\(K2=0.03\\)</span>, <span class=\"math inline\">\\(L=255\\)</span>（ <span class=\"math inline\">\\(L\\)</span>是像素值的动态范围，一般都取为255）。\n输出图片和目标图片的结构相似值越大，则表示相似性越高，图像去模糊效果越好。\nSSIM是一种符合人类直觉的图像质量评价标准。从名字上我们不难发现，这种指标是在致力于向人类的真实感知看齐，详细细节可以参考<a href=\"https://www.cns.nyu.edu/pub/lcv/wang03-preprint.pdf\">原论文</a></p>\n<h5 id=\"mssim\">MSSIM</h5>\n<p>MSSIM相当于是在多个尺度上来进行SSIM指标的测试，相对于SSIM，其能更好的衡量图像到观看者的距离、像素信息密集程度等因素对观看者给出的主观评价所产生的影响。\n论文中给出的一个例子是，观看者给一个分辨率为1080p的较为模糊的画面的评分可能会比分辨率为720p的较为锐利的画面的评分高。因此在评价图像质量的时候不考虑尺度因素可能会导致得出片面的结果。\nMSSIM提出在不同分辨率（尺度）下多次计算结构相似度后综合结果得到最终的评价数值。其计算过程框图如下所示\n<img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222301708.png\" alt=\"image-20211120222301708\"></p>\n<p>MSSIM 的详细细节可以参考<a href=\"https://ece.uwaterloo.ca/~z70wang/publications/msssim.pdf\">原论文</a></p>\n<h3 id=\"指标实现\">指标实现</h3>\n<div class=\"sourceCode\" id=\"cb24\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb24-1\"><a href=\"#cb24-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># class PSNR(nn.Module):</span></span>\n<span id=\"cb24-2\"><a href=\"#cb24-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> PSNR(nn.Module):</span>\n<span id=\"cb24-3\"><a href=\"#cb24-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> forward(<span class=\"va\">self</span>,img1,img2):</span>\n<span id=\"cb24-4\"><a href=\"#cb24-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>        mse <span class=\"op\">=</span> ((img1 <span class=\"op\">-</span> img2) <span class=\"op\">**</span> <span class=\"dv\">2</span>).mean() <span class=\"co\"># 输出图像和参考图像的 MSE</span></span>\n<span id=\"cb24-5\"><a href=\"#cb24-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>        psnr <span class=\"op\">=</span> <span class=\"dv\">10</span> <span class=\"op\">*</span> torch.log10(<span class=\"fl\">1.0</span> <span class=\"op\">*</span> <span class=\"fl\">1.0</span> <span class=\"op\">/</span> (mse <span class=\"op\">+</span> <span class=\"dv\">10</span> <span class=\"op\">**</span> (<span class=\"op\">-</span><span class=\"dv\">10</span>)))</span>\n<span id=\"cb24-6\"><a href=\"#cb24-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> psnr</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb25\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb25-1\"><a href=\"#cb25-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># SSIM 和 MSSIM 的计算较为复杂，在这里，我们直接调用 pytorch-msssim 的接口来进行计算</span></span>\n<span id=\"cb25-2\"><a href=\"#cb25-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>ssim <span class=\"op\">=</span> pytorch_msssim.SSIM(data_range<span class=\"op\">=</span><span class=\"fl\">1.0</span>, size_average<span class=\"op\">=</span><span class=\"va\">True</span>, channel<span class=\"op\">=</span><span class=\"dv\">3</span>)</span>\n<span id=\"cb25-3\"><a href=\"#cb25-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>mssim <span class=\"op\">=</span> pytorch_msssim.MS_SSIM(data_range<span class=\"op\">=</span><span class=\"fl\">1.0</span>, size_average<span class=\"op\">=</span><span class=\"va\">True</span>, channel<span class=\"op\">=</span><span class=\"dv\">3</span>)</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb26\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb26-1\"><a href=\"#cb26-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># 实例化</span></span>\n<span id=\"cb26-2\"><a href=\"#cb26-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>ssim <span class=\"op\">=</span> pytorch_msssim.SSIM(data_range<span class=\"op\">=</span><span class=\"fl\">1.0</span>, size_average<span class=\"op\">=</span><span class=\"va\">True</span>, channel<span class=\"op\">=</span><span class=\"dv\">3</span>)</span>\n<span id=\"cb26-3\"><a href=\"#cb26-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>mssim <span class=\"op\">=</span> pytorch_msssim.MS_SSIM(data_range<span class=\"op\">=</span><span class=\"fl\">1.0</span>, size_average<span class=\"op\">=</span><span class=\"va\">True</span>, channel<span class=\"op\">=</span><span class=\"dv\">3</span>)</span>\n<span id=\"cb26-4\"><a href=\"#cb26-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>psnr <span class=\"op\">=</span> PSNR()</span></code></pre></div>\n<h2 id=\"模型预测\">模型预测</h2>\n<ol type=\"1\">\n<li>绘图函数定义</li>\n<li>模型加载</li>\n<li>数据加载</li>\n<li>模型预测与指标分析</li>\n<li>结果展示与保存</li>\n</ol>\n<h3 id=\"绘图函数定义\">绘图函数定义</h3>\n<div class=\"sourceCode\" id=\"cb27\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb27-1\"><a href=\"#cb27-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> plot_tensor(tensor):</span>\n<span id=\"cb27-2\"><a href=\"#cb27-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> tensor.dim() <span class=\"op\">==</span> <span class=\"dv\">4</span>:</span>\n<span id=\"cb27-3\"><a href=\"#cb27-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>        tensor <span class=\"op\">=</span> tensor.squeeze(<span class=\"dv\">0</span>)</span>\n<span id=\"cb27-4\"><a href=\"#cb27-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    ret <span class=\"op\">=</span> transforms.ToPILImage()(tensor.squeeze(<span class=\"dv\">0</span>))</span>\n<span id=\"cb27-5\"><a href=\"#cb27-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.imshow(ret)</span>\n<span id=\"cb27-6\"><a href=\"#cb27-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span></span></code></pre></div>\n<h3 id=\"模型加载\">模型加载</h3>\n<p>训练过程中我们保存了多个 checkpoint\n，现在对其进行加载和测试。这里我们提供了两种选择 checkpoint\n的方式，一种是选择指定 checkpoint，一种是选择最新的\ncheckpoint。在这里我们以最新的 checkpoint 为例进行测试</p>\n<div class=\"sourceCode\" id=\"cb28\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb28-1\"><a href=\"#cb28-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># option-A ：测试指定epoch</span></span>\n<span id=\"cb28-2\"><a href=\"#cb28-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># best_epoch = 100 </span></span>\n<span id=\"cb28-3\"><a href=\"#cb28-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># best_cp = f&quot;&#123;args.save_cp_dir&#125;/Epoch_&#123;best_epoch&#125;.pt&quot;</span></span>\n<span id=\"cb28-4\"><a href=\"#cb28-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb28-5\"><a href=\"#cb28-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># option-B ：测试最终epoch</span></span>\n<span id=\"cb28-6\"><a href=\"#cb28-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># best_cp = f&quot;&#123;args.save_cp_dir&#125;/Epoch_lastest.pt&quot;</span></span>\n<span id=\"cb28-7\"><a href=\"#cb28-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>best_cp <span class=\"op\">=</span> <span class=\"ss\">f&quot;</span><span class=\"sc\">&#123;</span>args<span class=\"sc\">.</span>save_cp_dir<span class=\"sc\">&#125;</span><span class=\"ss\">/Epoch_3.pt&quot;</span></span>\n<span id=\"cb28-8\"><a href=\"#cb28-8\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb28-9\"><a href=\"#cb28-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>my_model.to(<span class=\"st\">&quot;cuda&quot;</span>).load_state_dict(torch.load(best_cp))</span>\n<span id=\"cb28-10\"><a href=\"#cb28-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>my_model <span class=\"op\">=</span> my_model.<span class=\"bu\">eval</span>()</span></code></pre></div>\n<h3 id=\"数据加载\">数据加载</h3>\n<div class=\"sourceCode\" id=\"cb29\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb29-1\"><a href=\"#cb29-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># 由于此模型采用的是多尺度训练，因此对于单张输入图像，需要对其进行处理，定义加载图像的函数 load_images 为</span></span>\n<span id=\"cb29-2\"><a href=\"#cb29-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> load_images(blur_img_path,multi):</span>\n<span id=\"cb29-3\"><a href=\"#cb29-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    target_s1 <span class=\"op\">=</span> <span class=\"va\">None</span></span>\n<span id=\"cb29-4\"><a href=\"#cb29-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    sharp_img_path <span class=\"op\">=</span> blur_img_path.replace(<span class=\"st\">&quot;blur&quot;</span>,<span class=\"st\">&quot;sharp&quot;</span>)</span>\n<span id=\"cb29-5\"><a href=\"#cb29-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> os.path.exists(sharp_img_path):</span>\n<span id=\"cb29-6\"><a href=\"#cb29-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        img_target <span class=\"op\">=</span> Image.<span class=\"bu\">open</span>(sharp_img_path).convert(<span class=\"st\">&#39;RGB&#39;</span>)</span>\n<span id=\"cb29-7\"><a href=\"#cb29-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        target_s1 <span class=\"op\">=</span> transforms.ToTensor()(img_target).unsqueeze(<span class=\"dv\">0</span>)</span>\n<span id=\"cb29-8\"><a href=\"#cb29-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb29-9\"><a href=\"#cb29-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    img_input <span class=\"op\">=</span> Image.<span class=\"bu\">open</span>(blur_img_path).convert(<span class=\"st\">&#39;RGB&#39;</span>)  <span class=\"co\"># 转换为image类型 方便进行resize</span></span>\n<span id=\"cb29-10\"><a href=\"#cb29-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    input_b1 <span class=\"op\">=</span> transforms.ToTensor()(img_input)</span>\n<span id=\"cb29-11\"><a href=\"#cb29-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb29-12\"><a href=\"#cb29-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> multi:</span>\n<span id=\"cb29-13\"><a href=\"#cb29-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>        H <span class=\"op\">=</span> input_b1.size()[<span class=\"dv\">1</span>]</span>\n<span id=\"cb29-14\"><a href=\"#cb29-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>        W <span class=\"op\">=</span> input_b1.size()[<span class=\"dv\">2</span>]</span>\n<span id=\"cb29-15\"><a href=\"#cb29-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb29-16\"><a href=\"#cb29-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>        input_b1 <span class=\"op\">=</span> transforms.ToPILImage()(input_b1)</span>\n<span id=\"cb29-17\"><a href=\"#cb29-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>        input_b2 <span class=\"op\">=</span> transforms.ToTensor()(transforms.Resize([<span class=\"bu\">int</span>(H<span class=\"op\">/</span><span class=\"dv\">2</span>), <span class=\"bu\">int</span>(W<span class=\"op\">/</span><span class=\"dv\">2</span>)])(input_b1)).unsqueeze(<span class=\"dv\">0</span>)</span>\n<span id=\"cb29-18\"><a href=\"#cb29-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>        input_b3 <span class=\"op\">=</span> transforms.ToTensor()(transforms.Resize([<span class=\"bu\">int</span>(H<span class=\"op\">/</span><span class=\"dv\">4</span>), <span class=\"bu\">int</span>(W<span class=\"op\">/</span><span class=\"dv\">4</span>)])(input_b1)).unsqueeze(<span class=\"dv\">0</span>)</span>\n<span id=\"cb29-19\"><a href=\"#cb29-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb29-20\"><a href=\"#cb29-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>        input_b1 <span class=\"op\">=</span> transforms.ToTensor()(input_b1).unsqueeze(<span class=\"dv\">0</span>)</span>\n<span id=\"cb29-21\"><a href=\"#cb29-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb29-22\"><a href=\"#cb29-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> &#123;<span class=\"st\">&#39;input_b1&#39;</span>:input_b1, <span class=\"st\">&#39;input_b2&#39;</span>:input_b2, <span class=\"st\">&#39;input_b3&#39;</span>:input_b3, <span class=\"st\">&#39;target_s1&#39;</span>:target_s1&#125;</span>\n<span id=\"cb29-23\"><a href=\"#cb29-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">else</span>:</span>\n<span id=\"cb29-24\"><a href=\"#cb29-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> &#123;<span class=\"st\">&#39;input_b1&#39;</span>:unsqueeze(<span class=\"dv\">0</span>), <span class=\"st\">&#39;target_s1&#39;</span>:target_s1&#125;</span></code></pre></div>\n<h2 id=\"模型预测与指标分析\">模型预测与指标分析</h2>\n<h3 id=\"模型预测-1\">模型预测</h3>\n<div class=\"sourceCode\" id=\"cb30\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb30-1\"><a href=\"#cb30-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#目录一</span></span>\n<span id=\"cb30-2\"><a href=\"#cb30-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># idx = 1</span></span>\n<span id=\"cb30-3\"><a href=\"#cb30-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># blur_img_path = f&quot;datasets/pictures/blur/test&#123;idx&#125;.png&quot;  </span></span>\n<span id=\"cb30-4\"><a href=\"#cb30-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb30-5\"><a href=\"#cb30-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># 目录二</span></span>\n<span id=\"cb30-6\"><a href=\"#cb30-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>idx<span class=\"op\">=</span><span class=\"st\">&#39;000001&#39;</span></span>\n<span id=\"cb30-7\"><a href=\"#cb30-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>blur_img_path <span class=\"op\">=</span><span class=\"ss\">f&quot;datasets/test/GOPR0384_11_00/blur/</span><span class=\"sc\">&#123;</span>idx<span class=\"sc\">&#125;</span><span class=\"ss\">.png&quot;</span></span>\n<span id=\"cb30-8\"><a href=\"#cb30-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>item <span class=\"op\">=</span> load_images(blur_img_path,args.multi)</span>\n<span id=\"cb30-9\"><a href=\"#cb30-9\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb30-10\"><a href=\"#cb30-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>input_b1 <span class=\"op\">=</span> item[<span class=\"st\">&#39;input_b1&#39;</span>].to(device) </span>\n<span id=\"cb30-11\"><a href=\"#cb30-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>input_b2 <span class=\"op\">=</span> item[<span class=\"st\">&#39;input_b2&#39;</span>].to(device) </span>\n<span id=\"cb30-12\"><a href=\"#cb30-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>input_b3 <span class=\"op\">=</span> item[<span class=\"st\">&#39;input_b3&#39;</span>].to(device) </span>\n<span id=\"cb30-13\"><a href=\"#cb30-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>target_s1 <span class=\"op\">=</span> item[<span class=\"st\">&#39;target_s1&#39;</span>].to(device) </span>\n<span id=\"cb30-14\"><a href=\"#cb30-14\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb30-15\"><a href=\"#cb30-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>output_l1,_,_ <span class=\"op\">=</span> my_model((input_b1,input_b2,input_b3))</span></code></pre></div>\n<h3 id=\"指标分析\">指标分析</h3>\n<p>原始模糊图片与不模糊图片之间的指标计算</p>\n<div class=\"sourceCode\" id=\"cb31\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb31-1\"><a href=\"#cb31-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>blur_psnr <span class=\"op\">=</span> psnr(input_b1,target_s1)</span>\n<span id=\"cb31-2\"><a href=\"#cb31-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>blur_ssim <span class=\"op\">=</span> ssim(input_b1,target_s1)</span>\n<span id=\"cb31-3\"><a href=\"#cb31-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>blur_mssim <span class=\"op\">=</span> mssim(input_b1,target_s1)</span>\n<span id=\"cb31-4\"><a href=\"#cb31-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb31-5\"><a href=\"#cb31-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(<span class=\"ss\">f&quot;原始模糊图片:PSNR=</span><span class=\"sc\">&#123;</span>blur_psnr<span class=\"sc\">.</span><span class=\"bu\">float</span>()<span class=\"sc\">&#125;</span><span class=\"ss\">, SSIM=</span><span class=\"sc\">&#123;</span>blur_ssim<span class=\"sc\">.</span><span class=\"bu\">float</span>()<span class=\"sc\">&#125;</span><span class=\"ss\">, MSSIM=</span><span class=\"sc\">&#123;</span>blur_mssim<span class=\"sc\">.</span><span class=\"bu\">float</span>()<span class=\"sc\">&#125;</span><span class=\"ss\">&quot;</span>)</span></code></pre></div>\n<pre><code>原始模糊图片:PSNR=24.050003051757812, SSIM=0.716961145401001, MSSIM=0.840461015701294</code></pre>\n<p>去模糊图片与不模糊的图片之间的指标计算</p>\n<div class=\"sourceCode\" id=\"cb33\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb33-1\"><a href=\"#cb33-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>output_psnr <span class=\"op\">=</span> psnr(output_l1,target_s1)</span>\n<span id=\"cb33-2\"><a href=\"#cb33-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>output_ssim <span class=\"op\">=</span> ssim(output_l1,target_s1)</span>\n<span id=\"cb33-3\"><a href=\"#cb33-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>output_mssim <span class=\"op\">=</span> mssim(output_l1,target_s1)</span>\n<span id=\"cb33-4\"><a href=\"#cb33-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb33-5\"><a href=\"#cb33-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(<span class=\"ss\">f&quot;网络输出图片:PSNR=</span><span class=\"sc\">&#123;</span>output_psnr<span class=\"sc\">.</span><span class=\"bu\">float</span>()<span class=\"sc\">&#125;</span><span class=\"ss\">, SSIM=</span><span class=\"sc\">&#123;</span>output_ssim<span class=\"sc\">.</span><span class=\"bu\">float</span>()<span class=\"sc\">&#125;</span><span class=\"ss\">, MSSIM=</span><span class=\"sc\">&#123;</span>output_mssim<span class=\"sc\">.</span><span class=\"bu\">float</span>()<span class=\"sc\">&#125;</span><span class=\"ss\">&quot;</span>)</span></code></pre></div>\n<pre><code>网络输出图片:PSNR=24.012224197387695, SSIM=0.7089502811431885, MSSIM=0.8413411974906921</code></pre>\n<h3 id=\"结果展示\">结果展示</h3>\n<div class=\"sourceCode\" id=\"cb35\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb35-1\"><a href=\"#cb35-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.figure(figsize<span class=\"op\">=</span>(<span class=\"dv\">6</span>,<span class=\"dv\">10</span>))</span>\n<span id=\"cb35-2\"><a href=\"#cb35-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.subplot(<span class=\"dv\">311</span>)</span>\n<span id=\"cb35-3\"><a href=\"#cb35-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>plot_tensor(input_b1)</span>\n<span id=\"cb35-4\"><a href=\"#cb35-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.subplot(<span class=\"dv\">312</span>)</span>\n<span id=\"cb35-5\"><a href=\"#cb35-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>plot_tensor(output_l1)</span>\n<span id=\"cb35-6\"><a href=\"#cb35-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.subplot(<span class=\"dv\">313</span>)</span>\n<span id=\"cb35-7\"><a href=\"#cb35-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>plot_tensor(target_s1)</span></code></pre></div>\n<figure>\n<img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222412395.png\" alt=\"image-20211120222412395\">\n<figcaption aria-hidden=\"true\">image-20211120222412395</figcaption>\n</figure>\n<div class=\"sourceCode\" id=\"cb36\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb36-1\"><a href=\"#cb36-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># 将结果保存</span></span>\n<span id=\"cb36-2\"><a href=\"#cb36-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>save_name <span class=\"op\">=</span> blur_img_path.split(<span class=\"st\">&quot;/&quot;</span>)[<span class=\"op\">-</span><span class=\"dv\">1</span>]</span>\n<span id=\"cb36-3\"><a href=\"#cb36-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>save_path <span class=\"op\">=</span> os.path.join(args.save_dir,save_name)</span>\n<span id=\"cb36-4\"><a href=\"#cb36-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>save_img <span class=\"op\">=</span> transforms.ToPILImage()(output_l1.squeeze(<span class=\"dv\">0</span>))</span>\n<span id=\"cb36-5\"><a href=\"#cb36-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>save_img.save(save_path)</span></code></pre></div>\n<hr>\n<h3 id=\"about-me\">About ME</h3>\n<h5 id=\"读书城南-在未来面前我们都是孩子\">👋 读书城南，🤔\n在未来面前，我们都是孩子～</h5>\n<ul>\n<li>📙\n一个热衷于探索学习新方向、新事物的智能产品经理，闲暇时间喜欢coding💻、画图🎨、音乐🎵、学习ing~</li>\n</ul>\n<h5 id=\"social-media\">👋 Social Media</h5>\n<ul>\n<li><p>🛠️ Blog: <a href=\"http://oceaneyes.top\">http://oceaneyes.top</a></p></li>\n<li><p>⚡ PM导航: <a href=\"https://pmhub.oceangzy.top\">https://pmhub.oceangzy.top</a></p></li>\n<li><p>☘️ CNBLOG: <a href=\"https://www.cnblogs.com/oceaneyes-gzy/\">https://www.cnblogs.com/oceaneyes-gzy/</a></p></li>\n<li><p>🌱 AI PRJ自己部署的一些算法demo: <a href=\"http://ai.oceangzy.top/\">http://ai.oceangzy.top/</a></p></li>\n<li><p>📫 Email: 1450136519@qq.com</p></li>\n<li><p>💬 WeChat: <a href=\"https://oceaneyes.top/img/wechatqrcode.jpg\">OCEANGZY</a></p></li>\n<li><p>💬 公众号: <a href=\"https://oceaneyes.top/img/wechatgzh.jpeg\">UncleJoker-GZY</a></p></li>\n</ul>\n<h5 id=\"加入小组\">👋 加入小组~</h5>\n<p><img src=\"https://oceaneyes.top/img/zhishigroup.jpg\" title=\"加入组织\" alt width=\"240\"></p>\n<h5 id=\"感谢打赏\">👋 感谢打赏~</h5>\n<p><img src=\"https://oceaneyes.top/img/alipay.jpg\" title=\"支付宝打赏\" alt width=\"140\">\n<img src=\"https://oceaneyes.top/img/wechatpay.jpg\" title=\"微信打赏\" alt width=\"140\"></p>\n","more":"<h2 id=\"基于pytorch实现图像去模糊-学习\">基于PyTorch实现图像去模糊-学习</h2>\n<h2 id=\"任务描述\">任务描述</h2>\n<ul>\n<li>相机的抖动、快速运动的物体都会导致拍摄出模糊的图像，景深变化也会使图像进一步模糊。</li>\n<li>对于传统方法来说，要想估计出每个像素点对应的 “blur kernel”\n几乎是不可行的。因此，传统方法常常需要对模糊源作出假设，将 “blur kernel”\n参数化。显然，这类方法不足以解决实际中各种复杂因素引起的图像模糊。</li>\n<li>卷积神经网络能够从图像中提取出复杂的特征，从而使得模型能够适应各种场景。<br>\n</li>\n<li>本教程以 CVPR2017 的 《Deep Multi-scale Convolutional Neural Network\nfor Dynamic Scene Deblurring》 为例，来完成图像去模糊的任务。</li>\n</ul>\n<h3 id=\"方法概述\">方法概述</h3>\n<ul>\n<li>利用pytorch深度学习工具实现一个端到端的图像去模糊模型，通过参数设置、加载数据、构建模型、训练模型和测试用例依次实现一个图像去模糊工具，在训练和预处理过程中通过可视化监督训练过程。</li>\n<li>模型采用了残差形式的CNN，输入和输出都采用高斯金字塔（Gaussian\npyramid）的形式。</li>\n<li>整个网络结构由三个相似的CNN构成，分别对应输入金字塔中的每一层。网络最前面是分辨率最低的子网络（coarest\nlevel network），在这个子网络最后，是“upconvolution\nlayer”，将重建的低分辨率图像放大为高分辨率图像，然后和高一层的子网络的输入连接在一起，作为上层网络的输入。</li>\n</ul>\n<figure>\n<img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120221821489.png\" alt=\"image-20211120221821489\">\n<figcaption aria-hidden=\"true\">image-20211120221821489</figcaption>\n</figure>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">%</span>config Completer.use_jedi <span class=\"op\">=</span> <span class=\"va\">False</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#!pip install pytorch_msssim -i https://pypi.tuna.tsinghua.edu.cn/simple</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># !jupyter nbextension enable --py widgetsnbextension</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> torch</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> numpy <span class=\"im\">as</span> np</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> os</span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> random</span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> matplotlib.pyplot <span class=\"im\">as</span> plt</span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> torch.nn <span class=\"im\">as</span> nn</span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> torch.optim <span class=\"im\">as</span> optim</span>\n<span id=\"cb3-10\"><a href=\"#cb3-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> PIL <span class=\"im\">import</span> Image</span>\n<span id=\"cb3-11\"><a href=\"#cb3-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> tensorboardX <span class=\"im\">import</span> SummaryWriter</span>\n<span id=\"cb3-12\"><a href=\"#cb3-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> torchsummary <span class=\"im\">import</span> summary</span>\n<span id=\"cb3-13\"><a href=\"#cb3-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> torch.optim <span class=\"im\">import</span> lr_scheduler</span>\n<span id=\"cb3-14\"><a href=\"#cb3-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> torch.utils <span class=\"im\">import</span> data</span>\n<span id=\"cb3-15\"><a href=\"#cb3-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> torchvision <span class=\"im\">import</span> transforms</span>\n<span id=\"cb3-16\"><a href=\"#cb3-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> tqdm.notebook <span class=\"im\">import</span> tqdm</span>\n<span id=\"cb3-17\"><a href=\"#cb3-17\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-18\"><a href=\"#cb3-18\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-19\"><a href=\"#cb3-19\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> pytorch_msssim <span class=\"co\"># 用于计算指标 ssim 和 mssim</span></span>\n<span id=\"cb3-20\"><a href=\"#cb3-20\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-21\"><a href=\"#cb3-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>device <span class=\"op\">=</span> torch.device(<span class=\"st\">&quot;cuda:0&quot;</span> <span class=\"cf\">if</span> torch.cuda.is_available() <span class=\"cf\">else</span> <span class=\"st\">&quot;cpu&quot;</span>)</span></code></pre></div>\n<h2 id=\"参数设置\">参数设置</h2>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> Config():</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>,name<span class=\"op\">=</span><span class=\"st\">&quot;Configs&quot;</span>):</span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"co\"># train set</span></span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.data_dir <span class=\"op\">=</span> <span class=\"st\">&#39;datasets/train&#39;</span> <span class=\"co\"># 训练集目录</span></span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.patch_size <span class=\"op\">=</span> <span class=\"dv\">256</span>  <span class=\"co\"># 输入模型的patch的尺寸</span></span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.batch_size<span class=\"op\">=</span> <span class=\"dv\">2</span> <span class=\"co\">#16 # 训练时每个batch中的样本个数</span></span>\n<span id=\"cb4-7\"><a href=\"#cb4-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.n_threads <span class=\"op\">=</span> <span class=\"dv\">1</span> <span class=\"co\"># 用于加载数据的线程数</span></span>\n<span id=\"cb4-8\"><a href=\"#cb4-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb4-9\"><a href=\"#cb4-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"co\"># test set</span></span>\n<span id=\"cb4-10\"><a href=\"#cb4-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.test_data_dir <span class=\"op\">=</span> <span class=\"st\">&#39;datasets/test&#39;</span> <span class=\"co\"># 测试集目录</span></span>\n<span id=\"cb4-11\"><a href=\"#cb4-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.test_batch_size<span class=\"op\">=</span><span class=\"dv\">1</span> <span class=\"co\"># 测试时的 batch_size</span></span>\n<span id=\"cb4-12\"><a href=\"#cb4-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb4-13\"><a href=\"#cb4-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"co\"># model</span></span>\n<span id=\"cb4-14\"><a href=\"#cb4-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.multi <span class=\"op\">=</span> <span class=\"va\">True</span> <span class=\"co\"># 模型采用多尺度方法True</span></span>\n<span id=\"cb4-15\"><a href=\"#cb4-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.skip <span class=\"op\">=</span> <span class=\"va\">True</span> <span class=\"co\"># 模型采用滑动连接方法</span></span>\n<span id=\"cb4-16\"><a href=\"#cb4-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.n_resblocks <span class=\"op\">=</span> <span class=\"dv\">3</span> <span class=\"co\">#9  # resblock的个数</span></span>\n<span id=\"cb4-17\"><a href=\"#cb4-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.n_feats <span class=\"op\">=</span> <span class=\"dv\">8</span> <span class=\"co\">#64  #feature map的个数</span></span>\n<span id=\"cb4-18\"><a href=\"#cb4-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb4-19\"><a href=\"#cb4-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"co\"># optimization </span></span>\n<span id=\"cb4-20\"><a href=\"#cb4-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.lr <span class=\"op\">=</span> <span class=\"fl\">1e-4</span>  <span class=\"co\"># 初始学习率</span></span>\n<span id=\"cb4-21\"><a href=\"#cb4-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.epochs <span class=\"op\">=</span><span class=\"dv\">5</span> <span class=\"co\">#800 # 训练epoch的数目</span></span>\n<span id=\"cb4-22\"><a href=\"#cb4-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.lr_step_size <span class=\"op\">=</span> <span class=\"dv\">600</span> <span class=\"co\">#采用步进学习率策略所用的 step_size</span></span>\n<span id=\"cb4-23\"><a href=\"#cb4-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.lr_gamma <span class=\"op\">=</span> <span class=\"fl\">0.1</span> <span class=\"co\">#每 lr_step_size后，学习率变成 lr * lr_gamma</span></span>\n<span id=\"cb4-24\"><a href=\"#cb4-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb4-25\"><a href=\"#cb4-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"co\"># global</span></span>\n<span id=\"cb4-26\"><a href=\"#cb4-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.name <span class=\"op\">=</span> name <span class=\"co\">#配置的名称</span></span>\n<span id=\"cb4-27\"><a href=\"#cb4-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.save_dir <span class=\"op\">=</span> <span class=\"st\">&#39;temp/result&#39;</span>  <span class=\"co\"># 保存训练过程中所产生数据的目录</span></span>\n<span id=\"cb4-28\"><a href=\"#cb4-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.save_cp_dir <span class=\"op\">=</span> <span class=\"st\">&#39;temp/models&#39;</span>  <span class=\"co\"># 保存 checkpoint的目录</span></span>\n<span id=\"cb4-29\"><a href=\"#cb4-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.imgs_dir <span class=\"op\">=</span> <span class=\"st\">&#39;datasets/pictures&#39;</span>  <span class=\"co\"># 此 notebook所需的图片目录</span></span>\n<span id=\"cb4-30\"><a href=\"#cb4-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb4-31\"><a href=\"#cb4-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb4-32\"><a href=\"#cb4-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"kw\">not</span> os.path.exists(<span class=\"va\">self</span>.save_dir):</span>\n<span id=\"cb4-33\"><a href=\"#cb4-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>            os.makedirs(<span class=\"va\">self</span>.save_dir)</span>\n<span id=\"cb4-34\"><a href=\"#cb4-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"kw\">not</span> os.path.exists(<span class=\"va\">self</span>.save_cp_dir):</span>\n<span id=\"cb4-35\"><a href=\"#cb4-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>            os.makedirs(<span class=\"va\">self</span>.save_cp_dir)</span>\n<span id=\"cb4-36\"><a href=\"#cb4-36\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#         if not os.path.exists(self.data_dir):</span></span>\n<span id=\"cb4-37\"><a href=\"#cb4-37\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#             os.makedirs(self.data_dir)</span></span>\n<span id=\"cb4-38\"><a href=\"#cb4-38\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#         if not os.path.exists(self.test_data_dir):</span></span>\n<span id=\"cb4-39\"><a href=\"#cb4-39\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#             os.makedirs(self.test_data_dir)</span></span>\n<span id=\"cb4-40\"><a href=\"#cb4-40\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb4-41\"><a href=\"#cb4-41\" aria-hidden=\"true\" tabindex=\"-1\"></a>args <span class=\"op\">=</span>  Config(name<span class=\"op\">=</span><span class=\"st\">&quot;image-deblurring&quot;</span>)</span></code></pre></div>\n<h2 id=\"数据准备\">数据准备</h2>\n<ul>\n<li>数据集展示</li>\n<li>数据增强</li>\n<li>构造 dataset类</li>\n<li>数据加载 dataloader</li>\n</ul>\n<h3 id=\"数据集展示\">数据集展示</h3>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>sample_idx <span class=\"op\">=</span> <span class=\"dv\">1</span> <span class=\"co\"># 样本编号</span></span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>blur_path <span class=\"op\">=</span> os.path.join(args.imgs_dir,<span class=\"ss\">f&quot;blur/test</span><span class=\"sc\">&#123;</span>sample_idx<span class=\"sc\">&#125;</span><span class=\"ss\">.png&quot;</span>)  <span class=\"co\"># 模糊图片</span></span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>sharp_path <span class=\"op\">=</span> os.path.join(args.imgs_dir,<span class=\"ss\">f&quot;sharp/test</span><span class=\"sc\">&#123;</span>sample_idx<span class=\"sc\">&#125;</span><span class=\"ss\">.png&quot;</span>) <span class=\"co\"># 去模糊图片</span></span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>blur_img <span class=\"op\">=</span> plt.imread(blur_path)</span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>sharp_img <span class=\"op\">=</span> plt.imread(sharp_path)</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb6-1\"><a href=\"#cb6-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.figure(figsize<span class=\"op\">=</span>(<span class=\"dv\">10</span>,<span class=\"dv\">4</span>))</span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.subplot(<span class=\"dv\">121</span>)</span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.imshow(blur_img)</span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.subplot(<span class=\"dv\">122</span>)</span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.imshow(sharp_img)</span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.show()</span></code></pre></div>\n<figure>\n<img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120221933618.png\" alt=\"image-20211120221933618\">\n<figcaption aria-hidden=\"true\">image-20211120221933618</figcaption>\n</figure>\n<h3 id=\"数据增强\">数据增强</h3>\n<p>为了防止过拟合，需要对数据集进行数据增强，增强方式如下所示，对每一个输入图像，都将其进行随机角度旋转，旋转的角度在\n[0, 90, 180, 270] 中随机选取。除此之外，考虑到图像质量下降，对 HSV\n颜色空间的饱和度乘以 0.8 到 1.2 内的随机数</p>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb7-1\"><a href=\"#cb7-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> augment(img_input, img_target):</span>\n<span id=\"cb7-2\"><a href=\"#cb7-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    degree <span class=\"op\">=</span> random.choice([<span class=\"dv\">0</span>,<span class=\"dv\">90</span>,<span class=\"dv\">180</span>,<span class=\"dv\">270</span>])</span>\n<span id=\"cb7-3\"><a href=\"#cb7-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    img_input <span class=\"op\">=</span> transforms.functional.rotate(img_input,degree)</span>\n<span id=\"cb7-4\"><a href=\"#cb7-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    img_target <span class=\"op\">=</span> transforms.functional.rotate(img_target,degree)</span>\n<span id=\"cb7-5\"><a href=\"#cb7-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb7-6\"><a href=\"#cb7-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\"># color augmentation</span></span>\n<span id=\"cb7-7\"><a href=\"#cb7-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    img_input <span class=\"op\">=</span> transforms.functional.adjust_gamma(img_input,<span class=\"dv\">1</span>)</span>\n<span id=\"cb7-8\"><a href=\"#cb7-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    img_target <span class=\"op\">=</span> transforms.functional.adjust_gamma(img_target,<span class=\"dv\">1</span>)</span>\n<span id=\"cb7-9\"><a href=\"#cb7-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    sat_factor <span class=\"op\">=</span> <span class=\"dv\">1</span> <span class=\"op\">+</span> (<span class=\"fl\">0.2</span> <span class=\"op\">-</span> <span class=\"fl\">0.4</span><span class=\"op\">*</span> np.random.rand())</span>\n<span id=\"cb7-10\"><a href=\"#cb7-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    img_input <span class=\"op\">=</span> transforms.functional.adjust_saturation(img_input,sat_factor)</span>\n<span id=\"cb7-11\"><a href=\"#cb7-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    img_target <span class=\"op\">=</span> transforms.functional.adjust_saturation(img_target,sat_factor)</span>\n<span id=\"cb7-12\"><a href=\"#cb7-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb7-13\"><a href=\"#cb7-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> img_input,img_target</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb8-1\"><a href=\"#cb8-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>img_input <span class=\"op\">=</span> Image.<span class=\"bu\">open</span>(blur_path)</span>\n<span id=\"cb8-2\"><a href=\"#cb8-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>img_target <span class=\"op\">=</span> Image.<span class=\"bu\">open</span>(sharp_path)</span>\n<span id=\"cb8-3\"><a href=\"#cb8-3\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb8-4\"><a href=\"#cb8-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>img_aug_input,img_aug_target <span class=\"op\">=</span> augment(img_input,img_target)</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb9-1\"><a href=\"#cb9-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.figure(figsize<span class=\"op\">=</span>(<span class=\"dv\">10</span>,<span class=\"dv\">5</span>))</span>\n<span id=\"cb9-2\"><a href=\"#cb9-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.subplot(<span class=\"dv\">121</span>)</span>\n<span id=\"cb9-3\"><a href=\"#cb9-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.imshow(img_aug_input)</span>\n<span id=\"cb9-4\"><a href=\"#cb9-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.subplot(<span class=\"dv\">122</span>)</span>\n<span id=\"cb9-5\"><a href=\"#cb9-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.imshow(img_aug_target)</span>\n<span id=\"cb9-6\"><a href=\"#cb9-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.show()</span></code></pre></div>\n<figure>\n<img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120221955392.png\" alt=\"image-20211120221955392\">\n<figcaption aria-hidden=\"true\">image-20211120221955392</figcaption>\n</figure>\n<h3 id=\"构造-dataset类\">构造 dataset类</h3>\n<p>对每一个输入图像，对齐进行随机裁剪，得到patch_size大小的输入</p>\n<div class=\"sourceCode\" id=\"cb10\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb10-1\"><a href=\"#cb10-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> getPatch(img_input,img_target,patch_size):</span>\n<span id=\"cb10-2\"><a href=\"#cb10-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    w,h <span class=\"op\">=</span> img_input.size</span>\n<span id=\"cb10-3\"><a href=\"#cb10-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    p <span class=\"op\">=</span> patch_size</span>\n<span id=\"cb10-4\"><a href=\"#cb10-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    x <span class=\"op\">=</span> random.randrange(<span class=\"dv\">0</span>,w<span class=\"op\">-</span>p <span class=\"op\">+</span><span class=\"dv\">1</span>)</span>\n<span id=\"cb10-5\"><a href=\"#cb10-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    y <span class=\"op\">=</span> random.randrange(<span class=\"dv\">0</span>,h <span class=\"op\">-</span>p <span class=\"op\">+</span><span class=\"dv\">1</span>)</span>\n<span id=\"cb10-6\"><a href=\"#cb10-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb10-7\"><a href=\"#cb10-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    img_input <span class=\"op\">=</span> img_input.crop((x,y,x<span class=\"op\">+</span>p,y<span class=\"op\">+</span>p))</span>\n<span id=\"cb10-8\"><a href=\"#cb10-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    img_target <span class=\"op\">=</span> img_target.crop((x,y,x<span class=\"op\">+</span>p,y<span class=\"op\">+</span>p))</span>\n<span id=\"cb10-9\"><a href=\"#cb10-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb10-10\"><a href=\"#cb10-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> img_input,img_target</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb11-1\"><a href=\"#cb11-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> ImgMission(data.Dataset):</span>\n<span id=\"cb11-2\"><a href=\"#cb11-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>,data_dir, patch_size<span class=\"op\">=</span><span class=\"dv\">256</span>, is_train<span class=\"op\">=</span> <span class=\"va\">False</span>, multi<span class=\"op\">=</span><span class=\"va\">True</span>):</span>\n<span id=\"cb11-3\"><a href=\"#cb11-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">super</span>(ImgMission,<span class=\"va\">self</span>).<span class=\"fu\">__init__</span>()</span>\n<span id=\"cb11-4\"><a href=\"#cb11-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb11-5\"><a href=\"#cb11-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.is_train <span class=\"op\">=</span> is_train  <span class=\"co\">#是否是训练集</span></span>\n<span id=\"cb11-6\"><a href=\"#cb11-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.patch_size <span class=\"op\">=</span> patch_size <span class=\"co\"># 训练时 patch的尺寸</span></span>\n<span id=\"cb11-7\"><a href=\"#cb11-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.multi <span class=\"op\">=</span> multi  <span class=\"co\"># 是否采用多尺度因子，默认采用</span></span>\n<span id=\"cb11-8\"><a href=\"#cb11-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb11-9\"><a href=\"#cb11-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.sharp_file_paths <span class=\"op\">=</span> []</span>\n<span id=\"cb11-10\"><a href=\"#cb11-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>        sub_folders <span class=\"op\">=</span> os.listdir(data_dir)</span>\n<span id=\"cb11-11\"><a href=\"#cb11-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">print</span>(sub_folders)</span>\n<span id=\"cb11-12\"><a href=\"#cb11-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb11-13\"><a href=\"#cb11-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">for</span> folder_name <span class=\"kw\">in</span> sub_folders:</span>\n<span id=\"cb11-14\"><a href=\"#cb11-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>            sharp_sub_folder <span class=\"op\">=</span> os.path.join(data_dir,folder_name,<span class=\"st\">&#39;sharp&#39;</span>)</span>\n<span id=\"cb11-15\"><a href=\"#cb11-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>            sharp_file_names <span class=\"op\">=</span> os.listdir(sharp_sub_folder)</span>\n<span id=\"cb11-16\"><a href=\"#cb11-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"co\"># print(sharp_file_names)</span></span>\n<span id=\"cb11-17\"><a href=\"#cb11-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">for</span> file_name <span class=\"kw\">in</span> sharp_file_names:</span>\n<span id=\"cb11-18\"><a href=\"#cb11-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>                sharp_file_path <span class=\"op\">=</span> os.path.join(sharp_sub_folder,file_name)</span>\n<span id=\"cb11-19\"><a href=\"#cb11-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>                <span class=\"co\"># print(sharp_file_path)</span></span>\n<span id=\"cb11-20\"><a href=\"#cb11-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>                <span class=\"va\">self</span>.sharp_file_paths.append(sharp_file_path)</span>\n<span id=\"cb11-21\"><a href=\"#cb11-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>                </span>\n<span id=\"cb11-22\"><a href=\"#cb11-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.n_samples <span class=\"op\">=</span> <span class=\"bu\">len</span>(<span class=\"va\">self</span>.sharp_file_paths)</span>\n<span id=\"cb11-23\"><a href=\"#cb11-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb11-24\"><a href=\"#cb11-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> get_img_pair(<span class=\"va\">self</span>,idx):</span>\n<span id=\"cb11-25\"><a href=\"#cb11-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>        sharp_file_path <span class=\"op\">=</span> <span class=\"va\">self</span>.sharp_file_paths[idx]</span>\n<span id=\"cb11-26\"><a href=\"#cb11-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>        blur_file_path <span class=\"op\">=</span> sharp_file_path.replace(<span class=\"st\">&quot;sharp&quot;</span>,<span class=\"st\">&quot;blur&quot;</span>)</span>\n<span id=\"cb11-27\"><a href=\"#cb11-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"co\"># print(blur_file_path)</span></span>\n<span id=\"cb11-28\"><a href=\"#cb11-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>        img_input <span class=\"op\">=</span> Image.<span class=\"bu\">open</span>(blur_file_path).convert(<span class=\"st\">&#39;RGB&#39;</span>)</span>\n<span id=\"cb11-29\"><a href=\"#cb11-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>        img_target <span class=\"op\">=</span> Image.<span class=\"bu\">open</span>(sharp_file_path).convert(<span class=\"st\">&#39;RGB&#39;</span>)</span>\n<span id=\"cb11-30\"><a href=\"#cb11-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb11-31\"><a href=\"#cb11-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> img_input,img_target</span>\n<span id=\"cb11-32\"><a href=\"#cb11-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb11-33\"><a href=\"#cb11-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__getitem__</span>(<span class=\"va\">self</span>,idx):</span>\n<span id=\"cb11-34\"><a href=\"#cb11-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>        img_input,img_target <span class=\"op\">=</span> <span class=\"va\">self</span>.get_img_pair(idx)</span>\n<span id=\"cb11-35\"><a href=\"#cb11-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb11-36\"><a href=\"#cb11-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"va\">self</span>.is_train:</span>\n<span id=\"cb11-37\"><a href=\"#cb11-37\" aria-hidden=\"true\" tabindex=\"-1\"></a>            img_input,img_target <span class=\"op\">=</span> getPatch(img_input,img_target, <span class=\"va\">self</span>.patch_size)</span>\n<span id=\"cb11-38\"><a href=\"#cb11-38\" aria-hidden=\"true\" tabindex=\"-1\"></a>            img_input,img_target<span class=\"op\">=</span>  augment(img_input,img_target)</span>\n<span id=\"cb11-39\"><a href=\"#cb11-39\" aria-hidden=\"true\" tabindex=\"-1\"></a>            </span>\n<span id=\"cb11-40\"><a href=\"#cb11-40\" aria-hidden=\"true\" tabindex=\"-1\"></a>            </span>\n<span id=\"cb11-41\"><a href=\"#cb11-41\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"co\"># 转换为 tensor类型</span></span>\n<span id=\"cb11-42\"><a href=\"#cb11-42\" aria-hidden=\"true\" tabindex=\"-1\"></a>        input_b1 <span class=\"op\">=</span> transforms.ToTensor()(img_input)</span>\n<span id=\"cb11-43\"><a href=\"#cb11-43\" aria-hidden=\"true\" tabindex=\"-1\"></a>        target_s1 <span class=\"op\">=</span> transforms.ToTensor()(img_target)</span>\n<span id=\"cb11-44\"><a href=\"#cb11-44\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb11-45\"><a href=\"#cb11-45\" aria-hidden=\"true\" tabindex=\"-1\"></a>        H <span class=\"op\">=</span> input_b1.size()[<span class=\"dv\">1</span>]</span>\n<span id=\"cb11-46\"><a href=\"#cb11-46\" aria-hidden=\"true\" tabindex=\"-1\"></a>        W<span class=\"op\">=</span> input_b1.size()[<span class=\"dv\">2</span>]</span>\n<span id=\"cb11-47\"><a href=\"#cb11-47\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb11-48\"><a href=\"#cb11-48\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"va\">self</span>.multi:</span>\n<span id=\"cb11-49\"><a href=\"#cb11-49\" aria-hidden=\"true\" tabindex=\"-1\"></a>            input_b1 <span class=\"op\">=</span> transforms.ToPILImage()(input_b1)</span>\n<span id=\"cb11-50\"><a href=\"#cb11-50\" aria-hidden=\"true\" tabindex=\"-1\"></a>            target_s1 <span class=\"op\">=</span> transforms.ToPILImage()(target_s1)</span>\n<span id=\"cb11-51\"><a href=\"#cb11-51\" aria-hidden=\"true\" tabindex=\"-1\"></a>            </span>\n<span id=\"cb11-52\"><a href=\"#cb11-52\" aria-hidden=\"true\" tabindex=\"-1\"></a>            input_b2 <span class=\"op\">=</span> transforms.ToTensor()(transforms.Resize([<span class=\"bu\">int</span>(H<span class=\"op\">/</span><span class=\"dv\">2</span>), <span class=\"bu\">int</span>(W<span class=\"op\">/</span><span class=\"dv\">2</span>)])(input_b1))</span>\n<span id=\"cb11-53\"><a href=\"#cb11-53\" aria-hidden=\"true\" tabindex=\"-1\"></a>            input_b3 <span class=\"op\">=</span> transforms.ToTensor()(transforms.Resize([<span class=\"bu\">int</span>(H<span class=\"op\">/</span><span class=\"dv\">4</span>), <span class=\"bu\">int</span>(W<span class=\"op\">/</span><span class=\"dv\">4</span>)])(input_b1))</span>\n<span id=\"cb11-54\"><a href=\"#cb11-54\" aria-hidden=\"true\" tabindex=\"-1\"></a>            </span>\n<span id=\"cb11-55\"><a href=\"#cb11-55\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"co\"># 只对训练集进行数据增强</span></span>\n<span id=\"cb11-56\"><a href=\"#cb11-56\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">if</span> <span class=\"va\">self</span>.is_train:</span>\n<span id=\"cb11-57\"><a href=\"#cb11-57\" aria-hidden=\"true\" tabindex=\"-1\"></a>                target_s2 <span class=\"op\">=</span> transforms.ToTensor()(transforms.Resize([<span class=\"bu\">int</span>(H<span class=\"op\">/</span><span class=\"dv\">2</span>), <span class=\"bu\">int</span>(W<span class=\"op\">/</span><span class=\"dv\">2</span>)])(target_s1))</span>\n<span id=\"cb11-58\"><a href=\"#cb11-58\" aria-hidden=\"true\" tabindex=\"-1\"></a>                target_s3 <span class=\"op\">=</span> transforms.ToTensor()(transforms.Resize([<span class=\"bu\">int</span>(H<span class=\"op\">/</span><span class=\"dv\">4</span>), <span class=\"bu\">int</span>(W<span class=\"op\">/</span><span class=\"dv\">4</span>)])(target_s1))</span>\n<span id=\"cb11-59\"><a href=\"#cb11-59\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">else</span>:</span>\n<span id=\"cb11-60\"><a href=\"#cb11-60\" aria-hidden=\"true\" tabindex=\"-1\"></a>                target_s2 <span class=\"op\">=</span> []</span>\n<span id=\"cb11-61\"><a href=\"#cb11-61\" aria-hidden=\"true\" tabindex=\"-1\"></a>                target_s3 <span class=\"op\">=</span> []</span>\n<span id=\"cb11-62\"><a href=\"#cb11-62\" aria-hidden=\"true\" tabindex=\"-1\"></a>                </span>\n<span id=\"cb11-63\"><a href=\"#cb11-63\" aria-hidden=\"true\" tabindex=\"-1\"></a>            input_b1 <span class=\"op\">=</span> transforms.ToTensor()(input_b1)</span>\n<span id=\"cb11-64\"><a href=\"#cb11-64\" aria-hidden=\"true\" tabindex=\"-1\"></a>            target_s1 <span class=\"op\">=</span> transforms.ToTensor()(target_s1)</span>\n<span id=\"cb11-65\"><a href=\"#cb11-65\" aria-hidden=\"true\" tabindex=\"-1\"></a>            </span>\n<span id=\"cb11-66\"><a href=\"#cb11-66\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">return</span> &#123;</span>\n<span id=\"cb11-67\"><a href=\"#cb11-67\" aria-hidden=\"true\" tabindex=\"-1\"></a>                <span class=\"st\">&#39;input_b1&#39;</span>: input_b1, <span class=\"co\"># 参照下文的网络结构，输入图像的尺度 1</span></span>\n<span id=\"cb11-68\"><a href=\"#cb11-68\" aria-hidden=\"true\" tabindex=\"-1\"></a>                <span class=\"st\">&#39;input_b2&#39;</span>: input_b2, <span class=\"co\"># 输入图像的尺度 2</span></span>\n<span id=\"cb11-69\"><a href=\"#cb11-69\" aria-hidden=\"true\" tabindex=\"-1\"></a>                <span class=\"st\">&#39;input_b3&#39;</span>: input_b3, <span class=\"co\"># 输入图像的尺度 3</span></span>\n<span id=\"cb11-70\"><a href=\"#cb11-70\" aria-hidden=\"true\" tabindex=\"-1\"></a>                <span class=\"st\">&#39;target_s1&#39;</span>: target_s1, <span class=\"co\"># 目标图像的尺度 1</span></span>\n<span id=\"cb11-71\"><a href=\"#cb11-71\" aria-hidden=\"true\" tabindex=\"-1\"></a>                <span class=\"st\">&#39;target_s2&#39;</span>: target_s2, <span class=\"co\"># 目标图像的尺度 2</span></span>\n<span id=\"cb11-72\"><a href=\"#cb11-72\" aria-hidden=\"true\" tabindex=\"-1\"></a>                <span class=\"st\">&#39;target_s3&#39;</span>: target_s3 <span class=\"co\"># 目标图像的尺度 3</span></span>\n<span id=\"cb11-73\"><a href=\"#cb11-73\" aria-hidden=\"true\" tabindex=\"-1\"></a>            &#125;</span>\n<span id=\"cb11-74\"><a href=\"#cb11-74\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">else</span>:</span>\n<span id=\"cb11-75\"><a href=\"#cb11-75\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">return</span> &#123;<span class=\"st\">&#39;input_b1&#39;</span>: input_b1, <span class=\"st\">&#39;target_s1&#39;</span>: target_s1&#125;</span>\n<span id=\"cb11-76\"><a href=\"#cb11-76\" aria-hidden=\"true\" tabindex=\"-1\"></a>            </span>\n<span id=\"cb11-77\"><a href=\"#cb11-77\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb11-78\"><a href=\"#cb11-78\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb11-79\"><a href=\"#cb11-79\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__len__</span>(<span class=\"va\">self</span>):</span>\n<span id=\"cb11-80\"><a href=\"#cb11-80\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> <span class=\"va\">self</span>.n_samples</span></code></pre></div>\n<h3 id=\"数据加载-dataloader\">数据加载 dataloader</h3>\n<div class=\"sourceCode\" id=\"cb12\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb12-1\"><a href=\"#cb12-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> get_dataset(data_dir,patch_size<span class=\"op\">=</span><span class=\"va\">None</span>, </span>\n<span id=\"cb12-2\"><a href=\"#cb12-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>                batch_size<span class=\"op\">=</span><span class=\"dv\">1</span>, n_threads<span class=\"op\">=</span><span class=\"dv\">1</span>, </span>\n<span id=\"cb12-3\"><a href=\"#cb12-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>                is_train<span class=\"op\">=</span><span class=\"va\">False</span>,multi<span class=\"op\">=</span><span class=\"va\">False</span>):</span>\n<span id=\"cb12-4\"><a href=\"#cb12-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\"># Dataset实例化</span></span>\n<span id=\"cb12-5\"><a href=\"#cb12-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb12-6\"><a href=\"#cb12-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#     print(data_dir)</span></span>\n<span id=\"cb12-7\"><a href=\"#cb12-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#     print(patch_size)</span></span>\n<span id=\"cb12-8\"><a href=\"#cb12-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#     print(is_train)</span></span>\n<span id=\"cb12-9\"><a href=\"#cb12-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#     print(multi)</span></span>\n<span id=\"cb12-10\"><a href=\"#cb12-10\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb12-11\"><a href=\"#cb12-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    dataset <span class=\"op\">=</span> ImgMission(data_dir,patch_size<span class=\"op\">=</span>patch_size,</span>\n<span id=\"cb12-12\"><a href=\"#cb12-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>                    is_train<span class=\"op\">=</span>is_train,multi<span class=\"op\">=</span>multi)</span>\n<span id=\"cb12-13\"><a href=\"#cb12-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb12-14\"><a href=\"#cb12-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\"># print(dataset)</span></span>\n<span id=\"cb12-15\"><a href=\"#cb12-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\"># 利用封装好的 dataloader 接口定义训练过程的迭代器</span></span>\n<span id=\"cb12-16\"><a href=\"#cb12-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\"># 参数num_workers表示进程个数，在jupyter下改为0</span></span>\n<span id=\"cb12-17\"><a href=\"#cb12-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    dataloader <span class=\"op\">=</span> torch.utils.data.DataLoader(dataset,batch_size<span class=\"op\">=</span>batch_size,</span>\n<span id=\"cb12-18\"><a href=\"#cb12-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                            drop_last<span class=\"op\">=</span><span class=\"va\">True</span>, shuffle<span class=\"op\">=</span>is_train,</span>\n<span id=\"cb12-19\"><a href=\"#cb12-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                             num_workers <span class=\"op\">=</span> <span class=\"dv\">0</span>)</span>\n<span id=\"cb12-20\"><a href=\"#cb12-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> dataloader</span></code></pre></div>\n<ul>\n<li>将训练时的dataloader实例化</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb13\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb13-1\"><a href=\"#cb13-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>data_loader <span class=\"op\">=</span> get_dataset(args.data_dir,</span>\n<span id=\"cb13-2\"><a href=\"#cb13-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>                          patch_size<span class=\"op\">=</span>args.patch_size,</span>\n<span id=\"cb13-3\"><a href=\"#cb13-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>                          batch_size<span class=\"op\">=</span> args.batch_size,</span>\n<span id=\"cb13-4\"><a href=\"#cb13-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>                          n_threads<span class=\"op\">=</span> args.n_threads,</span>\n<span id=\"cb13-5\"><a href=\"#cb13-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>                          is_train<span class=\"op\">=</span><span class=\"va\">True</span>,</span>\n<span id=\"cb13-6\"><a href=\"#cb13-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>                          multi <span class=\"op\">=</span> args.multi</span>\n<span id=\"cb13-7\"><a href=\"#cb13-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>                         )</span></code></pre></div>\n<pre><code>[&#39;GOPR0372_07_00&#39;, &#39;GOPR0372_07_01&#39;, &#39;GOPR0374_11_00&#39;, &#39;GOPR0374_11_01&#39;, &#39;GOPR0374_11_02&#39;, &#39;GOPR0374_11_03&#39;, &#39;GOPR0378_13_00&#39;, &#39;GOPR0379_11_00&#39;, &#39;GOPR0380_11_00&#39;, &#39;GOPR0384_11_01&#39;, &#39;GOPR0384_11_02&#39;, &#39;GOPR0384_11_03&#39;, &#39;GOPR0384_11_04&#39;, &#39;GOPR0385_11_00&#39;, &#39;GOPR0386_11_00&#39;, &#39;GOPR0477_11_00&#39;, &#39;GOPR0857_11_00&#39;, &#39;GOPR0868_11_01&#39;, &#39;GOPR0868_11_02&#39;, &#39;GOPR0871_11_01&#39;, &#39;GOPR0881_11_00&#39;, &#39;GOPR0884_11_00&#39;]</code></pre>\n<h2 id=\"模型构建\">模型构建</h2>\n<ul>\n<li>模型介绍</li>\n<li>模型定义</li>\n<li>实例化模型</li>\n<li>损失函数和优化器</li>\n</ul>\n<figure>\n<img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222025823.png\" alt=\"image-20211120222025823\">\n<figcaption aria-hidden=\"true\">image-20211120222025823</figcaption>\n</figure>\n<p>CONV 表示卷积层， ResBlock 表示残差模块， Upconv\n表示上采样（也可以用反卷积代替）。 从图中可以看出，该模型使用了\n“multi-scale” 的结构， 在输入和输出部分都都采用了高斯金字塔（Gaussian\npyramid）的形式（即对原图像进行不同尺度的下采样，从而获得处于不同分辨率的图像）</p>\n<figure>\n<img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222042862.png\" alt=\"image-20211120222042862\">\n<figcaption aria-hidden=\"true\">image-20211120222042862</figcaption>\n</figure>\n<h3 id=\"模型定义\">模型定义</h3>\n<ul>\n<li>default_conv 是模型采用的默认卷积层，</li>\n<li>UpConv 用于上采样卷积，</li>\n<li>ResidualBlock 是模型使用的残差模块，</li>\n<li>SingleScaleNet 是单个尺度网络，</li>\n<li>MultiScaleNet 将几个 SingleScaleNet\n整合成了最终的多尺度网络模型</li>\n</ul>\n<p><em>具体作用</em></p>\n<ul>\n<li>default_conv : 网络中默认采用的卷积层，定义之后，避免重复代码</li>\n<li>UpConv : 上卷积，对应上图中的 Up\nConv，将图像的尺度扩大，输入到另一个单尺度网络</li>\n<li>ResidualBlock :\n残差模块，网络模型中采用的残差模块，之所以采用残差模块，是因为网络“只需要需要模糊图像与去模糊图像之间的差异即可”</li>\n<li>SingleScaleNet : 单尺度模型，一个尺度对应一个单尺度模型实例</li>\n<li>MultiScaleNet :\n多尺度模型，将多个单尺度模型实例组合即可得到上图所示的多尺度去模糊网络</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb15\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb15-1\"><a href=\"#cb15-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> default_conv(in_channels,out_channels, kernel_size, bias):</span>\n<span id=\"cb15-2\"><a href=\"#cb15-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> nn.Conv2d(in_channels,</span>\n<span id=\"cb15-3\"><a href=\"#cb15-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>                    out_channels,</span>\n<span id=\"cb15-4\"><a href=\"#cb15-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>                    kernel_size,</span>\n<span id=\"cb15-5\"><a href=\"#cb15-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>                    padding<span class=\"op\">=</span>(kernel_size <span class=\"op\">//</span> <span class=\"dv\">2</span>),</span>\n<span id=\"cb15-6\"><a href=\"#cb15-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>                    bias<span class=\"op\">=</span>bias)</span>\n<span id=\"cb15-7\"><a href=\"#cb15-7\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb15-8\"><a href=\"#cb15-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> UpConv(nn.Module):</span>\n<span id=\"cb15-9\"><a href=\"#cb15-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>):</span>\n<span id=\"cb15-10\"><a href=\"#cb15-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">super</span>(UpConv, <span class=\"va\">self</span>).<span class=\"fu\">__init__</span>()</span>\n<span id=\"cb15-11\"><a href=\"#cb15-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.body <span class=\"op\">=</span> nn.Sequential(default_conv(<span class=\"dv\">3</span>,<span class=\"dv\">12</span>,<span class=\"dv\">3</span>,<span class=\"va\">True</span>),</span>\n<span id=\"cb15-12\"><a href=\"#cb15-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                 nn.PixelShuffle(<span class=\"dv\">2</span>),</span>\n<span id=\"cb15-13\"><a href=\"#cb15-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                 nn.ReLU(inplace<span class=\"op\">=</span><span class=\"va\">True</span>))</span>\n<span id=\"cb15-14\"><a href=\"#cb15-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> forward(<span class=\"va\">self</span>,x):</span>\n<span id=\"cb15-15\"><a href=\"#cb15-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">return</span> <span class=\"va\">self</span>.body(x)</span>\n<span id=\"cb15-16\"><a href=\"#cb15-16\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb15-17\"><a href=\"#cb15-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> ResidualBlock(nn.Module):</span>\n<span id=\"cb15-18\"><a href=\"#cb15-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>,n_feats):</span>\n<span id=\"cb15-19\"><a href=\"#cb15-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">super</span>(ResidualBlock,<span class=\"va\">self</span>).<span class=\"fu\">__init__</span>()</span>\n<span id=\"cb15-20\"><a href=\"#cb15-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-21\"><a href=\"#cb15-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>        modules_body <span class=\"op\">=</span> [</span>\n<span id=\"cb15-22\"><a href=\"#cb15-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>            default_conv(n_feats, n_feats, <span class=\"dv\">3</span>, bias<span class=\"op\">=</span><span class=\"va\">True</span>),</span>\n<span id=\"cb15-23\"><a href=\"#cb15-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>            nn.ReLU(inplace<span class=\"op\">=</span><span class=\"va\">True</span>),</span>\n<span id=\"cb15-24\"><a href=\"#cb15-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>            default_conv(n_feats,n_feats,<span class=\"dv\">3</span>,bias<span class=\"op\">=</span><span class=\"va\">True</span>)</span>\n<span id=\"cb15-25\"><a href=\"#cb15-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>        ]</span>\n<span id=\"cb15-26\"><a href=\"#cb15-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-27\"><a href=\"#cb15-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.body <span class=\"op\">=</span> nn.Sequential(<span class=\"op\">*</span>modules_body)</span>\n<span id=\"cb15-28\"><a href=\"#cb15-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-29\"><a href=\"#cb15-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> forward(<span class=\"va\">self</span>,x):</span>\n<span id=\"cb15-30\"><a href=\"#cb15-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>        res<span class=\"op\">=</span> <span class=\"va\">self</span>.body(x)</span>\n<span id=\"cb15-31\"><a href=\"#cb15-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>        res <span class=\"op\">+=</span> x</span>\n<span id=\"cb15-32\"><a href=\"#cb15-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> res</span>\n<span id=\"cb15-33\"><a href=\"#cb15-33\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb15-34\"><a href=\"#cb15-34\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> SingleScaleNet(nn.Module):</span>\n<span id=\"cb15-35\"><a href=\"#cb15-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>,n_feats,n_resblocks, is_skip, n_channels<span class=\"op\">=</span><span class=\"dv\">3</span>):</span>\n<span id=\"cb15-36\"><a href=\"#cb15-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">super</span>(SingleScaleNet, <span class=\"va\">self</span>).<span class=\"fu\">__init__</span>()</span>\n<span id=\"cb15-37\"><a href=\"#cb15-37\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.is_skip <span class=\"op\">=</span> is_skip</span>\n<span id=\"cb15-38\"><a href=\"#cb15-38\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-39\"><a href=\"#cb15-39\" aria-hidden=\"true\" tabindex=\"-1\"></a>        modules_head <span class=\"op\">=</span> [</span>\n<span id=\"cb15-40\"><a href=\"#cb15-40\" aria-hidden=\"true\" tabindex=\"-1\"></a>            default_conv(n_channels,n_feats,<span class=\"dv\">5</span>,bias<span class=\"op\">=</span><span class=\"va\">True</span>),</span>\n<span id=\"cb15-41\"><a href=\"#cb15-41\" aria-hidden=\"true\" tabindex=\"-1\"></a>            nn.ReLU(inplace<span class=\"op\">=</span><span class=\"va\">True</span>)</span>\n<span id=\"cb15-42\"><a href=\"#cb15-42\" aria-hidden=\"true\" tabindex=\"-1\"></a>        ]</span>\n<span id=\"cb15-43\"><a href=\"#cb15-43\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-44\"><a href=\"#cb15-44\" aria-hidden=\"true\" tabindex=\"-1\"></a>        modules_body <span class=\"op\">=</span> [ResidualBlock(n_feats) <span class=\"cf\">for</span> _ <span class=\"kw\">in</span> <span class=\"bu\">range</span>(n_resblocks)]</span>\n<span id=\"cb15-45\"><a href=\"#cb15-45\" aria-hidden=\"true\" tabindex=\"-1\"></a>        modules_tail <span class=\"op\">=</span> [default_conv(n_feats, <span class=\"dv\">3</span>,<span class=\"dv\">5</span>,bias<span class=\"op\">=</span><span class=\"va\">True</span>)]</span>\n<span id=\"cb15-46\"><a href=\"#cb15-46\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-47\"><a href=\"#cb15-47\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.head <span class=\"op\">=</span> nn.Sequential(<span class=\"op\">*</span>modules_head)</span>\n<span id=\"cb15-48\"><a href=\"#cb15-48\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.body <span class=\"op\">=</span> nn.Sequential(<span class=\"op\">*</span>modules_body)</span>\n<span id=\"cb15-49\"><a href=\"#cb15-49\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.tail <span class=\"op\">=</span> nn.Sequential(<span class=\"op\">*</span>modules_tail)</span>\n<span id=\"cb15-50\"><a href=\"#cb15-50\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-51\"><a href=\"#cb15-51\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> forward(<span class=\"va\">self</span>,x):</span>\n<span id=\"cb15-52\"><a href=\"#cb15-52\" aria-hidden=\"true\" tabindex=\"-1\"></a>        x<span class=\"op\">=</span> <span class=\"va\">self</span>.head(x)</span>\n<span id=\"cb15-53\"><a href=\"#cb15-53\" aria-hidden=\"true\" tabindex=\"-1\"></a>        res<span class=\"op\">=</span> <span class=\"va\">self</span>.body(x)</span>\n<span id=\"cb15-54\"><a href=\"#cb15-54\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"va\">self</span>.is_skip:</span>\n<span id=\"cb15-55\"><a href=\"#cb15-55\" aria-hidden=\"true\" tabindex=\"-1\"></a>            res <span class=\"op\">+=</span> x</span>\n<span id=\"cb15-56\"><a href=\"#cb15-56\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-57\"><a href=\"#cb15-57\" aria-hidden=\"true\" tabindex=\"-1\"></a>        res <span class=\"op\">=</span> <span class=\"va\">self</span>.tail(res)</span>\n<span id=\"cb15-58\"><a href=\"#cb15-58\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> res</span>\n<span id=\"cb15-59\"><a href=\"#cb15-59\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb15-60\"><a href=\"#cb15-60\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> MultiScaleNet(nn.Module):</span>\n<span id=\"cb15-61\"><a href=\"#cb15-61\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>,n_feats, n_resblocks ,is_skip):</span>\n<span id=\"cb15-62\"><a href=\"#cb15-62\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">super</span>(MultiScaleNet,<span class=\"va\">self</span>).<span class=\"fu\">__init__</span>()</span>\n<span id=\"cb15-63\"><a href=\"#cb15-63\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-64\"><a href=\"#cb15-64\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.scale3_net <span class=\"op\">=</span> SingleScaleNet(n_feats,</span>\n<span id=\"cb15-65\"><a href=\"#cb15-65\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                         n_resblocks,</span>\n<span id=\"cb15-66\"><a href=\"#cb15-66\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                         is_skip,</span>\n<span id=\"cb15-67\"><a href=\"#cb15-67\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                         n_channels<span class=\"op\">=</span><span class=\"dv\">3</span>)</span>\n<span id=\"cb15-68\"><a href=\"#cb15-68\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.upconv3 <span class=\"op\">=</span> UpConv()</span>\n<span id=\"cb15-69\"><a href=\"#cb15-69\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.scale2_net <span class=\"op\">=</span> SingleScaleNet(n_feats,</span>\n<span id=\"cb15-70\"><a href=\"#cb15-70\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                         n_resblocks,</span>\n<span id=\"cb15-71\"><a href=\"#cb15-71\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                         is_skip,</span>\n<span id=\"cb15-72\"><a href=\"#cb15-72\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                         n_channels<span class=\"op\">=</span><span class=\"dv\">6</span>)</span>\n<span id=\"cb15-73\"><a href=\"#cb15-73\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.upconv2 <span class=\"op\">=</span> UpConv()</span>\n<span id=\"cb15-74\"><a href=\"#cb15-74\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-75\"><a href=\"#cb15-75\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.scale1_net <span class=\"op\">=</span> SingleScaleNet(n_feats,</span>\n<span id=\"cb15-76\"><a href=\"#cb15-76\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                        n_resblocks,</span>\n<span id=\"cb15-77\"><a href=\"#cb15-77\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                        is_skip,</span>\n<span id=\"cb15-78\"><a href=\"#cb15-78\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                        n_channels<span class=\"op\">=</span><span class=\"dv\">6</span>)</span>\n<span id=\"cb15-79\"><a href=\"#cb15-79\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-80\"><a href=\"#cb15-80\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> forward(<span class=\"va\">self</span>,mulscale_input):</span>\n<span id=\"cb15-81\"><a href=\"#cb15-81\" aria-hidden=\"true\" tabindex=\"-1\"></a>        input_b1, input_b2,input_b3 <span class=\"op\">=</span> mulscale_input</span>\n<span id=\"cb15-82\"><a href=\"#cb15-82\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-83\"><a href=\"#cb15-83\" aria-hidden=\"true\" tabindex=\"-1\"></a>        output_l3 <span class=\"op\">=</span> <span class=\"va\">self</span>.scale3_net(input_b3)</span>\n<span id=\"cb15-84\"><a href=\"#cb15-84\" aria-hidden=\"true\" tabindex=\"-1\"></a>        output_l3_up <span class=\"op\">=</span> <span class=\"va\">self</span>.upconv3(output_l3)</span>\n<span id=\"cb15-85\"><a href=\"#cb15-85\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-86\"><a href=\"#cb15-86\" aria-hidden=\"true\" tabindex=\"-1\"></a>        output_l2 <span class=\"op\">=</span> <span class=\"va\">self</span>.scale2_net(torch.cat((input_b2,output_l3_up),<span class=\"dv\">1</span>))</span>\n<span id=\"cb15-87\"><a href=\"#cb15-87\" aria-hidden=\"true\" tabindex=\"-1\"></a>        output_l2_up <span class=\"op\">=</span> <span class=\"va\">self</span>.upconv2(output_l2)</span>\n<span id=\"cb15-88\"><a href=\"#cb15-88\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-89\"><a href=\"#cb15-89\" aria-hidden=\"true\" tabindex=\"-1\"></a>        output_l1 <span class=\"op\">=</span> <span class=\"va\">self</span>.scale2_net(torch.cat((input_b1,output_l2_up),<span class=\"dv\">1</span>))</span>\n<span id=\"cb15-90\"><a href=\"#cb15-90\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb15-91\"><a href=\"#cb15-91\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> output_l1,output_l2,output_l3</span></code></pre></div>\n<h3 id=\"模型实例化\">模型实例化</h3>\n<div class=\"sourceCode\" id=\"cb16\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb16-1\"><a href=\"#cb16-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">if</span> args.multi:</span>\n<span id=\"cb16-2\"><a href=\"#cb16-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    my_model <span class=\"op\">=</span> MultiScaleNet(n_feats<span class=\"op\">=</span>args.n_feats,</span>\n<span id=\"cb16-3\"><a href=\"#cb16-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>                            n_resblocks <span class=\"op\">=</span> args.n_resblocks,</span>\n<span id=\"cb16-4\"><a href=\"#cb16-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>                            is_skip<span class=\"op\">=</span> args.skip)</span>\n<span id=\"cb16-5\"><a href=\"#cb16-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">else</span>:</span>\n<span id=\"cb16-6\"><a href=\"#cb16-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    my_model <span class=\"op\">=</span> SingleScaleNet(n_feats<span class=\"op\">=</span>args.n_feats,</span>\n<span id=\"cb16-7\"><a href=\"#cb16-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>                             n_resblocks<span class=\"op\">=</span>args.n_resblocks,</span>\n<span id=\"cb16-8\"><a href=\"#cb16-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>                             is_skip <span class=\"op\">=</span> args.skip)</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb17\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb17-1\"><a href=\"#cb17-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">if</span> torch.cuda.is_available():</span>\n<span id=\"cb17-2\"><a href=\"#cb17-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    my_model.cuda()</span>\n<span id=\"cb17-3\"><a href=\"#cb17-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    loss_function <span class=\"op\">=</span> nn.MSELoss().cuda()</span>\n<span id=\"cb17-4\"><a href=\"#cb17-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">else</span>:</span>\n<span id=\"cb17-5\"><a href=\"#cb17-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    loss_function <span class=\"op\">=</span> nn.MSELoss()</span>\n<span id=\"cb17-6\"><a href=\"#cb17-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb17-7\"><a href=\"#cb17-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>optimizer <span class=\"op\">=</span> optim.Adam(my_model.parameters(),lr<span class=\"op\">=</span>args.lr)</span>\n<span id=\"cb17-8\"><a href=\"#cb17-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(my_model)</span>\n<span id=\"cb17-9\"><a href=\"#cb17-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(loss_function)</span></code></pre></div>\n<pre><code>MultiScaleNet(\n  (scale3_net): SingleScaleNet(\n    (head): Sequential(\n      (0): Conv2d(3, 8, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n      (1): ReLU(inplace=True)\n    )\n    (body): Sequential(\n      (0): ResidualBlock(\n        (body): Sequential(\n          (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (1): ReLU(inplace=True)\n          (2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        )\n      )\n      (1): ResidualBlock(\n        (body): Sequential(\n          (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (1): ReLU(inplace=True)\n          (2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        )\n      )\n      (2): ResidualBlock(\n        (body): Sequential(\n          (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (1): ReLU(inplace=True)\n          (2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        )\n      )\n    )\n    (tail): Sequential(\n      (0): Conv2d(8, 3, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    )\n  )\n  (upconv3): UpConv(\n    (body): Sequential(\n      (0): Conv2d(3, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): PixelShuffle(upscale_factor=2)\n      (2): ReLU(inplace=True)\n    )\n  )\n  (scale2_net): SingleScaleNet(\n    (head): Sequential(\n      (0): Conv2d(6, 8, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n      (1): ReLU(inplace=True)\n    )\n    (body): Sequential(\n      (0): ResidualBlock(\n        (body): Sequential(\n          (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (1): ReLU(inplace=True)\n          (2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        )\n      )\n      (1): ResidualBlock(\n        (body): Sequential(\n          (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (1): ReLU(inplace=True)\n          (2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        )\n      )\n      (2): ResidualBlock(\n        (body): Sequential(\n          (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (1): ReLU(inplace=True)\n          (2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        )\n      )\n    )\n    (tail): Sequential(\n      (0): Conv2d(8, 3, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    )\n  )\n  (upconv2): UpConv(\n    (body): Sequential(\n      (0): Conv2d(3, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): PixelShuffle(upscale_factor=2)\n      (2): ReLU(inplace=True)\n    )\n  )\n  (scale1_net): SingleScaleNet(\n    (head): Sequential(\n      (0): Conv2d(6, 8, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n      (1): ReLU(inplace=True)\n    )\n    (body): Sequential(\n      (0): ResidualBlock(\n        (body): Sequential(\n          (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (1): ReLU(inplace=True)\n          (2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        )\n      )\n      (1): ResidualBlock(\n        (body): Sequential(\n          (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (1): ReLU(inplace=True)\n          (2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        )\n      )\n      (2): ResidualBlock(\n        (body): Sequential(\n          (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (1): ReLU(inplace=True)\n          (2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        )\n      )\n    )\n    (tail): Sequential(\n      (0): Conv2d(8, 3, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    )\n  )\n)\nMSELoss()</code></pre>\n<h3 id=\"损失函数和优化器\">损失函数和优化器</h3>\n<ul>\n<li>Adam 优化器，初始学习率为 lr，其相对于\nSGD，更自动化，实际中需要调整的参数较少，但需要注意的是，其使用内存也比\nSGD 要高。</li>\n<li>损失函数使用最常见的均方损失函数（MSELoss）: <img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222105417.png\" alt=\"image-20211120222105417\"> 其中 <span class=\"math inline\">\\(f^{\\prime}(i,j)\\)</span> 和 <span class=\"math inline\">\\(f(i,j)\\)</span>\n分别为模型输出结果图和非模糊图上坐标为 <span class=\"math inline\">\\((i,j)\\)</span>\n的像素，M,N分别表示图片的长与宽。</li>\n<li>具体的，本文所用的多尺度损失函数为： <img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222124809.png\" alt=\"image-20211120222124809\"> <span class=\"math inline\">\\(f^{\\prime}_k\\)</span> 和 <span class=\"math inline\">\\(f_k\\)</span> 分别表示第 <span class=\"math inline\">\\(k\\)</span> 个尺度上的输出结果图和非模糊图。</li>\n</ul>\n<h2 id=\"模型训练\">模型训练</h2>\n<ol type=\"1\">\n<li>训练策略</li>\n<li>训练模型</li>\n<li>训练过程可视化</li>\n</ol>\n<h3 id=\"训练策略\">训练策略</h3>\n<ul>\n<li>在模型训练过程中，随着训练的进行，更新网络参数的步进（学习率）应该越来越小，整体训练过程应该满足\n“先粗调后细调”，这就是常说的学习率策略。</li>\n<li>本次训练采用的学习率优化策略为 lr_scheduler.StepLR，步进为\nlr_step_size，学习率每隔 lr_step_size 个 epoch 乘以 lr_gamma</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb19\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb19-1\"><a href=\"#cb19-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>scheduler <span class=\"op\">=</span> lr_scheduler.StepLR(optimizer,args.lr_step_size,args.lr_gamma)</span>\n<span id=\"cb19-2\"><a href=\"#cb19-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb19-3\"><a href=\"#cb19-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>scheduler</span></code></pre></div>\n<pre><code>&lt;torch.optim.lr_scheduler.StepLR at 0x290378a0198&gt;</code></pre>\n<h3 id=\"训练模型\">训练模型</h3>\n<p>在训练开始之前，要先创建一个\nSummaryWriter，用来记录和可视化训练过程</p>\n<div class=\"sourceCode\" id=\"cb21\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb21-1\"><a href=\"#cb21-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>writer <span class=\"op\">=</span> SummaryWriter(os.path.join(args.save_dir,<span class=\"st\">&quot;temp/logs/&quot;</span>))</span>\n<span id=\"cb21-2\"><a href=\"#cb21-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb21-3\"><a href=\"#cb21-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>writer</span></code></pre></div>\n<pre><code>&lt;tensorboardX.writer.SummaryWriter at 0x290378d6e10&gt;</code></pre>\n<ul>\n<li>在命令行运行 tensorboard --logdir=experiment/logs\n来启动tensorboard。</li>\n<li>在训练模型时，每训练完一个 epoch\n将模型的参数保存下来，防止训练被意外中断以及方便测试，如果需要不断更新最新的一次训练的参数，可以取消最后一行的注释。</li>\n<li>训练过程中，使用 tqdm 的进度条来观察训练过程</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb23\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb23-1\"><a href=\"#cb23-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>bar_format <span class=\"op\">=</span> <span class=\"st\">&#39;</span><span class=\"sc\">&#123;desc&#125;&#123;percentage:3.0f&#125;</span><span class=\"st\">% | [</span><span class=\"sc\">&#123;elapsed&#125;</span><span class=\"st\">&lt;</span><span class=\"sc\">&#123;remaining&#125;</span><span class=\"st\">,</span><span class=\"sc\">&#123;rate_fmt&#125;</span><span class=\"st\">]&#39;</span> <span class=\"co\"># 进度条格式</span></span>\n<span id=\"cb23-2\"><a href=\"#cb23-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-3\"><a href=\"#cb23-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">for</span> epoch <span class=\"kw\">in</span> <span class=\"bu\">range</span>(args.epochs):</span>\n<span id=\"cb23-4\"><a href=\"#cb23-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    total_loss <span class=\"op\">=</span> <span class=\"dv\">0</span></span>\n<span id=\"cb23-5\"><a href=\"#cb23-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    batch_bar <span class=\"op\">=</span>  tqdm(data_loader, bar_format<span class=\"op\">=</span>bar_format) <span class=\"co\"># 利用tqdm动态显示训练过程</span></span>\n<span id=\"cb23-6\"><a href=\"#cb23-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> batch,images <span class=\"kw\">in</span> <span class=\"bu\">enumerate</span>(batch_bar):</span>\n<span id=\"cb23-7\"><a href=\"#cb23-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        my_model.train()</span>\n<span id=\"cb23-8\"><a href=\"#cb23-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        curr_batch <span class=\"op\">=</span> epoch <span class=\"op\">*</span> data_loader.<span class=\"fu\">__len__</span>() <span class=\"op\">+</span> batch <span class=\"co\"># 当前batch在整个训练过程中的索引</span></span>\n<span id=\"cb23-9\"><a href=\"#cb23-9\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-10\"><a href=\"#cb23-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>        input_b1 <span class=\"op\">=</span> images[<span class=\"st\">&#39;input_b1&#39;</span>].to(device) <span class=\"co\"># 原始输入图像</span></span>\n<span id=\"cb23-11\"><a href=\"#cb23-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        target_s1 <span class=\"op\">=</span> images[<span class=\"st\">&#39;target_s1&#39;</span>].to(device) <span class=\"co\"># 目标非模糊图片</span></span>\n<span id=\"cb23-12\"><a href=\"#cb23-12\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-13\"><a href=\"#cb23-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> args.multi:</span>\n<span id=\"cb23-14\"><a href=\"#cb23-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>            input_b2 <span class=\"op\">=</span> images[<span class=\"st\">&#39;input_b2&#39;</span>].to(device)  <span class=\"co\"># level-2 尺度</span></span>\n<span id=\"cb23-15\"><a href=\"#cb23-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>            target_s2 <span class=\"op\">=</span> images[<span class=\"st\">&#39;target_s2&#39;</span>].to(device)</span>\n<span id=\"cb23-16\"><a href=\"#cb23-16\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-17\"><a href=\"#cb23-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>            input_b3 <span class=\"op\">=</span> images[<span class=\"st\">&#39;input_b3&#39;</span>].to(device)  <span class=\"co\"># level-3 尺度</span></span>\n<span id=\"cb23-18\"><a href=\"#cb23-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>            target_s3 <span class=\"op\">=</span> images[<span class=\"st\">&#39;target_s3&#39;</span>].to(device)</span>\n<span id=\"cb23-19\"><a href=\"#cb23-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>            output_l1, output_l2, output_l3 <span class=\"op\">=</span> my_model((input_b1,input_b2,input_b3))</span>\n<span id=\"cb23-20\"><a href=\"#cb23-20\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-21\"><a href=\"#cb23-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"co\"># 损失函数</span></span>\n<span id=\"cb23-22\"><a href=\"#cb23-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>            loss <span class=\"op\">=</span> (loss_function(output_l1,target_s1) <span class=\"op\">+</span> loss_function(output_l2,target_s2) <span class=\"op\">+</span> loss_function(output_l3, target_s3)) <span class=\"op\">/</span><span class=\"dv\">3</span> </span>\n<span id=\"cb23-23\"><a href=\"#cb23-23\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-24\"><a href=\"#cb23-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">else</span>:</span>\n<span id=\"cb23-25\"><a href=\"#cb23-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>            output_l1 <span class=\"op\">=</span> my_model(input_b1)</span>\n<span id=\"cb23-26\"><a href=\"#cb23-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>            loss <span class=\"op\">=</span> loss_function(output_l1,target_s1)</span>\n<span id=\"cb23-27\"><a href=\"#cb23-27\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-28\"><a href=\"#cb23-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>        my_model.zero_grad()</span>\n<span id=\"cb23-29\"><a href=\"#cb23-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>        loss.backward()  <span class=\"co\">#反向传播</span></span>\n<span id=\"cb23-30\"><a href=\"#cb23-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>        optimizer.step() <span class=\"co\"># 更新权值</span></span>\n<span id=\"cb23-31\"><a href=\"#cb23-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>        total_loss <span class=\"op\">+=</span> loss.item()</span>\n<span id=\"cb23-32\"><a href=\"#cb23-32\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-33\"><a href=\"#cb23-33\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-34\"><a href=\"#cb23-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>        print_str <span class=\"op\">=</span> <span class=\"st\">&quot;|&quot;</span>.join([</span>\n<span id=\"cb23-35\"><a href=\"#cb23-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"st\">&quot;epoch:</span><span class=\"sc\">%3d</span><span class=\"st\">/</span><span class=\"sc\">%3d</span><span class=\"st\">&quot;</span> <span class=\"op\">%</span> (epoch <span class=\"op\">+</span> <span class=\"dv\">1</span>, args.epochs),</span>\n<span id=\"cb23-36\"><a href=\"#cb23-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"st\">&quot;batch:</span><span class=\"sc\">%3d</span><span class=\"st\">/</span><span class=\"sc\">%3d</span><span class=\"st\">&quot;</span> <span class=\"op\">%</span> (batch <span class=\"op\">+</span> <span class=\"dv\">1</span>, data_loader.<span class=\"fu\">__len__</span>()),</span>\n<span id=\"cb23-37\"><a href=\"#cb23-37\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"st\">&quot;loss:</span><span class=\"sc\">%.5f</span><span class=\"st\">&quot;</span> <span class=\"op\">%</span> (loss.item()),</span>\n<span id=\"cb23-38\"><a href=\"#cb23-38\" aria-hidden=\"true\" tabindex=\"-1\"></a>        ])</span>\n<span id=\"cb23-39\"><a href=\"#cb23-39\" aria-hidden=\"true\" tabindex=\"-1\"></a>        batch_bar.set_description(print_str,refresh<span class=\"op\">=</span><span class=\"va\">True</span>)  <span class=\"co\"># 更新进度条</span></span>\n<span id=\"cb23-40\"><a href=\"#cb23-40\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-41\"><a href=\"#cb23-41\" aria-hidden=\"true\" tabindex=\"-1\"></a>        writer.add_scalar(<span class=\"st\">&#39;train/batch_loss&#39;</span>, loss.item(), curr_batch)</span>\n<span id=\"cb23-42\"><a href=\"#cb23-42\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-43\"><a href=\"#cb23-43\" aria-hidden=\"true\" tabindex=\"-1\"></a>    batch_bar.close()</span>\n<span id=\"cb23-44\"><a href=\"#cb23-44\" aria-hidden=\"true\" tabindex=\"-1\"></a>    scheduler.step() <span class=\"co\">#调整学习率</span></span>\n<span id=\"cb23-45\"><a href=\"#cb23-45\" aria-hidden=\"true\" tabindex=\"-1\"></a>    loss <span class=\"op\">=</span> total_loss <span class=\"op\">/</span> (batch <span class=\"op\">+</span><span class=\"dv\">1</span>)</span>\n<span id=\"cb23-46\"><a href=\"#cb23-46\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-47\"><a href=\"#cb23-47\" aria-hidden=\"true\" tabindex=\"-1\"></a>    writer.add_scalar(<span class=\"st\">&#39;train/batch_loss&#39;</span>,loss,epoch)</span>\n<span id=\"cb23-48\"><a href=\"#cb23-48\" aria-hidden=\"true\" tabindex=\"-1\"></a>    torch.save(my_model.state_dict(),os.path.join(args.save_cp_dir, <span class=\"ss\">f&#39;Epoch_</span><span class=\"sc\">&#123;</span>epoch<span class=\"sc\">&#125;</span><span class=\"ss\">.pt&#39;</span>)) <span class=\"co\"># 保存每个 epoch 的参数</span></span>\n<span id=\"cb23-49\"><a href=\"#cb23-49\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#     torch.save(my_model.state_dict(),os.path.join(args.save_cp_dir, f&#39;Epoch_lastest.pt&#39;)) # 保存最新的参数</span></span></code></pre></div>\n<figure>\n<img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222241087.png\" alt=\"image-20211120222241087\">\n<figcaption aria-hidden=\"true\">image-20211120222241087</figcaption>\n</figure>\n<h2 id=\"模型评估\">模型评估</h2>\n<ol type=\"1\">\n<li>指标介绍</li>\n<li>指标实现</li>\n</ol>\n<h3 id=\"指标介绍\">指标介绍</h3>\n<p>为了评估模型的效果如何，我们通过计算 峰值信噪比（Peak Signal-to-Noise\nRatio, PSNR）， 结构相似性（Structural Similarity, SSIM）和 多尺度的\nSSIM（Multi-Scale SSIM，MSSIM）三个指标来对结果进行分析</p>\n<h5 id=\"psnr\">PSNR</h5>\n<p>PSNR 的定义如下： <img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222352850.png\" alt=\"image-20211120222352850\"> 其中，<span class=\"math inline\">\\(M A\nX_{I}\\)</span>表示图像点颜色的最大数值，如果每个采样点用 8\n位表示，则最大数值为 255，<span class=\"math inline\">\\(MSE\\)</span>是两个图像之间的均方误差。\nPSNR值越大代表模糊图像与参考图像越接近，即去模糊效果越好。</p>\n<h5 id=\"ssim\">SSIM</h5>\n<p>SSIM也是衡量两幅图片相似性的指标，其定义如下： <img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222344621.png\" alt=\"image-20211120222344621\"> SSIM由模型输出图像 <span class=\"math inline\">\\(x\\)</span> 和参考图像 <span class=\"math inline\">\\(y\\)</span> 之间的亮度对比（$ l(, )<span class=\"math inline\">\\(）、对比度对比（\\)</span>c(, )<span class=\"math inline\">\\(）和结构对比（\\)</span>s(, ) <span class=\"math inline\">\\(）三部分组成，\\)</span><span class=\"math inline\">\\(，\\)</span>$ 和 <span class=\"math inline\">\\(\\gamma\\)</span>是各自的权重因子，一般都取为 1：\n<img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222325752.png\" alt=\"image-20211120222325752\"> 其中，<span class=\"math inline\">\\(C_{1}\\)</span>，<span class=\"math inline\">\\(C_{2}\\)</span>和<span class=\"math inline\">\\(C_{3}\\)</span>为常数，是为了避免分母接近于0时造成的不稳定性。<span class=\"math inline\">\\(\\mu_{x}\\)</span> 和 <span class=\"math inline\">\\(\\mu_{y}\\)</span>\n分别为模型输出图像和参考图像的均值。<span class=\"math inline\">\\(\\sigma_{x}\\)</span> 和 <span class=\"math inline\">\\(\\sigma_{y}\\)</span>\n分别为模型输出图像和参考图像的标准差。通常取 <span class=\"math inline\">\\(C1=(K1*L)^2\\)</span>，<span class=\"math inline\">\\(C2=(K2*L)^2\\)</span>，<span class=\"math inline\">\\(C3=C2/2\\)</span>，一般地<span class=\"math inline\">\\(K1=0.01\\)</span>， <span class=\"math inline\">\\(K2=0.03\\)</span>, <span class=\"math inline\">\\(L=255\\)</span>（ <span class=\"math inline\">\\(L\\)</span>是像素值的动态范围，一般都取为255）。\n输出图片和目标图片的结构相似值越大，则表示相似性越高，图像去模糊效果越好。\nSSIM是一种符合人类直觉的图像质量评价标准。从名字上我们不难发现，这种指标是在致力于向人类的真实感知看齐，详细细节可以参考<a href=\"https://www.cns.nyu.edu/pub/lcv/wang03-preprint.pdf\">原论文</a></p>\n<h5 id=\"mssim\">MSSIM</h5>\n<p>MSSIM相当于是在多个尺度上来进行SSIM指标的测试，相对于SSIM，其能更好的衡量图像到观看者的距离、像素信息密集程度等因素对观看者给出的主观评价所产生的影响。\n论文中给出的一个例子是，观看者给一个分辨率为1080p的较为模糊的画面的评分可能会比分辨率为720p的较为锐利的画面的评分高。因此在评价图像质量的时候不考虑尺度因素可能会导致得出片面的结果。\nMSSIM提出在不同分辨率（尺度）下多次计算结构相似度后综合结果得到最终的评价数值。其计算过程框图如下所示\n<img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222301708.png\" alt=\"image-20211120222301708\"></p>\n<p>MSSIM 的详细细节可以参考<a href=\"https://ece.uwaterloo.ca/~z70wang/publications/msssim.pdf\">原论文</a></p>\n<h3 id=\"指标实现\">指标实现</h3>\n<div class=\"sourceCode\" id=\"cb24\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb24-1\"><a href=\"#cb24-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># class PSNR(nn.Module):</span></span>\n<span id=\"cb24-2\"><a href=\"#cb24-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> PSNR(nn.Module):</span>\n<span id=\"cb24-3\"><a href=\"#cb24-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> forward(<span class=\"va\">self</span>,img1,img2):</span>\n<span id=\"cb24-4\"><a href=\"#cb24-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>        mse <span class=\"op\">=</span> ((img1 <span class=\"op\">-</span> img2) <span class=\"op\">**</span> <span class=\"dv\">2</span>).mean() <span class=\"co\"># 输出图像和参考图像的 MSE</span></span>\n<span id=\"cb24-5\"><a href=\"#cb24-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>        psnr <span class=\"op\">=</span> <span class=\"dv\">10</span> <span class=\"op\">*</span> torch.log10(<span class=\"fl\">1.0</span> <span class=\"op\">*</span> <span class=\"fl\">1.0</span> <span class=\"op\">/</span> (mse <span class=\"op\">+</span> <span class=\"dv\">10</span> <span class=\"op\">**</span> (<span class=\"op\">-</span><span class=\"dv\">10</span>)))</span>\n<span id=\"cb24-6\"><a href=\"#cb24-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> psnr</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb25\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb25-1\"><a href=\"#cb25-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># SSIM 和 MSSIM 的计算较为复杂，在这里，我们直接调用 pytorch-msssim 的接口来进行计算</span></span>\n<span id=\"cb25-2\"><a href=\"#cb25-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>ssim <span class=\"op\">=</span> pytorch_msssim.SSIM(data_range<span class=\"op\">=</span><span class=\"fl\">1.0</span>, size_average<span class=\"op\">=</span><span class=\"va\">True</span>, channel<span class=\"op\">=</span><span class=\"dv\">3</span>)</span>\n<span id=\"cb25-3\"><a href=\"#cb25-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>mssim <span class=\"op\">=</span> pytorch_msssim.MS_SSIM(data_range<span class=\"op\">=</span><span class=\"fl\">1.0</span>, size_average<span class=\"op\">=</span><span class=\"va\">True</span>, channel<span class=\"op\">=</span><span class=\"dv\">3</span>)</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb26\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb26-1\"><a href=\"#cb26-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># 实例化</span></span>\n<span id=\"cb26-2\"><a href=\"#cb26-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>ssim <span class=\"op\">=</span> pytorch_msssim.SSIM(data_range<span class=\"op\">=</span><span class=\"fl\">1.0</span>, size_average<span class=\"op\">=</span><span class=\"va\">True</span>, channel<span class=\"op\">=</span><span class=\"dv\">3</span>)</span>\n<span id=\"cb26-3\"><a href=\"#cb26-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>mssim <span class=\"op\">=</span> pytorch_msssim.MS_SSIM(data_range<span class=\"op\">=</span><span class=\"fl\">1.0</span>, size_average<span class=\"op\">=</span><span class=\"va\">True</span>, channel<span class=\"op\">=</span><span class=\"dv\">3</span>)</span>\n<span id=\"cb26-4\"><a href=\"#cb26-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>psnr <span class=\"op\">=</span> PSNR()</span></code></pre></div>\n<h2 id=\"模型预测\">模型预测</h2>\n<ol type=\"1\">\n<li>绘图函数定义</li>\n<li>模型加载</li>\n<li>数据加载</li>\n<li>模型预测与指标分析</li>\n<li>结果展示与保存</li>\n</ol>\n<h3 id=\"绘图函数定义\">绘图函数定义</h3>\n<div class=\"sourceCode\" id=\"cb27\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb27-1\"><a href=\"#cb27-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> plot_tensor(tensor):</span>\n<span id=\"cb27-2\"><a href=\"#cb27-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> tensor.dim() <span class=\"op\">==</span> <span class=\"dv\">4</span>:</span>\n<span id=\"cb27-3\"><a href=\"#cb27-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>        tensor <span class=\"op\">=</span> tensor.squeeze(<span class=\"dv\">0</span>)</span>\n<span id=\"cb27-4\"><a href=\"#cb27-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    ret <span class=\"op\">=</span> transforms.ToPILImage()(tensor.squeeze(<span class=\"dv\">0</span>))</span>\n<span id=\"cb27-5\"><a href=\"#cb27-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.imshow(ret)</span>\n<span id=\"cb27-6\"><a href=\"#cb27-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span></span></code></pre></div>\n<h3 id=\"模型加载\">模型加载</h3>\n<p>训练过程中我们保存了多个 checkpoint\n，现在对其进行加载和测试。这里我们提供了两种选择 checkpoint\n的方式，一种是选择指定 checkpoint，一种是选择最新的\ncheckpoint。在这里我们以最新的 checkpoint 为例进行测试</p>\n<div class=\"sourceCode\" id=\"cb28\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb28-1\"><a href=\"#cb28-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># option-A ：测试指定epoch</span></span>\n<span id=\"cb28-2\"><a href=\"#cb28-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># best_epoch = 100 </span></span>\n<span id=\"cb28-3\"><a href=\"#cb28-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># best_cp = f&quot;&#123;args.save_cp_dir&#125;/Epoch_&#123;best_epoch&#125;.pt&quot;</span></span>\n<span id=\"cb28-4\"><a href=\"#cb28-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb28-5\"><a href=\"#cb28-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># option-B ：测试最终epoch</span></span>\n<span id=\"cb28-6\"><a href=\"#cb28-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># best_cp = f&quot;&#123;args.save_cp_dir&#125;/Epoch_lastest.pt&quot;</span></span>\n<span id=\"cb28-7\"><a href=\"#cb28-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>best_cp <span class=\"op\">=</span> <span class=\"ss\">f&quot;</span><span class=\"sc\">&#123;</span>args<span class=\"sc\">.</span>save_cp_dir<span class=\"sc\">&#125;</span><span class=\"ss\">/Epoch_3.pt&quot;</span></span>\n<span id=\"cb28-8\"><a href=\"#cb28-8\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb28-9\"><a href=\"#cb28-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>my_model.to(<span class=\"st\">&quot;cuda&quot;</span>).load_state_dict(torch.load(best_cp))</span>\n<span id=\"cb28-10\"><a href=\"#cb28-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>my_model <span class=\"op\">=</span> my_model.<span class=\"bu\">eval</span>()</span></code></pre></div>\n<h3 id=\"数据加载\">数据加载</h3>\n<div class=\"sourceCode\" id=\"cb29\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb29-1\"><a href=\"#cb29-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># 由于此模型采用的是多尺度训练，因此对于单张输入图像，需要对其进行处理，定义加载图像的函数 load_images 为</span></span>\n<span id=\"cb29-2\"><a href=\"#cb29-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> load_images(blur_img_path,multi):</span>\n<span id=\"cb29-3\"><a href=\"#cb29-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    target_s1 <span class=\"op\">=</span> <span class=\"va\">None</span></span>\n<span id=\"cb29-4\"><a href=\"#cb29-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    sharp_img_path <span class=\"op\">=</span> blur_img_path.replace(<span class=\"st\">&quot;blur&quot;</span>,<span class=\"st\">&quot;sharp&quot;</span>)</span>\n<span id=\"cb29-5\"><a href=\"#cb29-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> os.path.exists(sharp_img_path):</span>\n<span id=\"cb29-6\"><a href=\"#cb29-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        img_target <span class=\"op\">=</span> Image.<span class=\"bu\">open</span>(sharp_img_path).convert(<span class=\"st\">&#39;RGB&#39;</span>)</span>\n<span id=\"cb29-7\"><a href=\"#cb29-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        target_s1 <span class=\"op\">=</span> transforms.ToTensor()(img_target).unsqueeze(<span class=\"dv\">0</span>)</span>\n<span id=\"cb29-8\"><a href=\"#cb29-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb29-9\"><a href=\"#cb29-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    img_input <span class=\"op\">=</span> Image.<span class=\"bu\">open</span>(blur_img_path).convert(<span class=\"st\">&#39;RGB&#39;</span>)  <span class=\"co\"># 转换为image类型 方便进行resize</span></span>\n<span id=\"cb29-10\"><a href=\"#cb29-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    input_b1 <span class=\"op\">=</span> transforms.ToTensor()(img_input)</span>\n<span id=\"cb29-11\"><a href=\"#cb29-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb29-12\"><a href=\"#cb29-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> multi:</span>\n<span id=\"cb29-13\"><a href=\"#cb29-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>        H <span class=\"op\">=</span> input_b1.size()[<span class=\"dv\">1</span>]</span>\n<span id=\"cb29-14\"><a href=\"#cb29-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>        W <span class=\"op\">=</span> input_b1.size()[<span class=\"dv\">2</span>]</span>\n<span id=\"cb29-15\"><a href=\"#cb29-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb29-16\"><a href=\"#cb29-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>        input_b1 <span class=\"op\">=</span> transforms.ToPILImage()(input_b1)</span>\n<span id=\"cb29-17\"><a href=\"#cb29-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>        input_b2 <span class=\"op\">=</span> transforms.ToTensor()(transforms.Resize([<span class=\"bu\">int</span>(H<span class=\"op\">/</span><span class=\"dv\">2</span>), <span class=\"bu\">int</span>(W<span class=\"op\">/</span><span class=\"dv\">2</span>)])(input_b1)).unsqueeze(<span class=\"dv\">0</span>)</span>\n<span id=\"cb29-18\"><a href=\"#cb29-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>        input_b3 <span class=\"op\">=</span> transforms.ToTensor()(transforms.Resize([<span class=\"bu\">int</span>(H<span class=\"op\">/</span><span class=\"dv\">4</span>), <span class=\"bu\">int</span>(W<span class=\"op\">/</span><span class=\"dv\">4</span>)])(input_b1)).unsqueeze(<span class=\"dv\">0</span>)</span>\n<span id=\"cb29-19\"><a href=\"#cb29-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb29-20\"><a href=\"#cb29-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>        input_b1 <span class=\"op\">=</span> transforms.ToTensor()(input_b1).unsqueeze(<span class=\"dv\">0</span>)</span>\n<span id=\"cb29-21\"><a href=\"#cb29-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>        </span>\n<span id=\"cb29-22\"><a href=\"#cb29-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> &#123;<span class=\"st\">&#39;input_b1&#39;</span>:input_b1, <span class=\"st\">&#39;input_b2&#39;</span>:input_b2, <span class=\"st\">&#39;input_b3&#39;</span>:input_b3, <span class=\"st\">&#39;target_s1&#39;</span>:target_s1&#125;</span>\n<span id=\"cb29-23\"><a href=\"#cb29-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">else</span>:</span>\n<span id=\"cb29-24\"><a href=\"#cb29-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> &#123;<span class=\"st\">&#39;input_b1&#39;</span>:unsqueeze(<span class=\"dv\">0</span>), <span class=\"st\">&#39;target_s1&#39;</span>:target_s1&#125;</span></code></pre></div>\n<h2 id=\"模型预测与指标分析\">模型预测与指标分析</h2>\n<h3 id=\"模型预测-1\">模型预测</h3>\n<div class=\"sourceCode\" id=\"cb30\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb30-1\"><a href=\"#cb30-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#目录一</span></span>\n<span id=\"cb30-2\"><a href=\"#cb30-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># idx = 1</span></span>\n<span id=\"cb30-3\"><a href=\"#cb30-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># blur_img_path = f&quot;datasets/pictures/blur/test&#123;idx&#125;.png&quot;  </span></span>\n<span id=\"cb30-4\"><a href=\"#cb30-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb30-5\"><a href=\"#cb30-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># 目录二</span></span>\n<span id=\"cb30-6\"><a href=\"#cb30-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>idx<span class=\"op\">=</span><span class=\"st\">&#39;000001&#39;</span></span>\n<span id=\"cb30-7\"><a href=\"#cb30-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>blur_img_path <span class=\"op\">=</span><span class=\"ss\">f&quot;datasets/test/GOPR0384_11_00/blur/</span><span class=\"sc\">&#123;</span>idx<span class=\"sc\">&#125;</span><span class=\"ss\">.png&quot;</span></span>\n<span id=\"cb30-8\"><a href=\"#cb30-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>item <span class=\"op\">=</span> load_images(blur_img_path,args.multi)</span>\n<span id=\"cb30-9\"><a href=\"#cb30-9\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb30-10\"><a href=\"#cb30-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>input_b1 <span class=\"op\">=</span> item[<span class=\"st\">&#39;input_b1&#39;</span>].to(device) </span>\n<span id=\"cb30-11\"><a href=\"#cb30-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>input_b2 <span class=\"op\">=</span> item[<span class=\"st\">&#39;input_b2&#39;</span>].to(device) </span>\n<span id=\"cb30-12\"><a href=\"#cb30-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>input_b3 <span class=\"op\">=</span> item[<span class=\"st\">&#39;input_b3&#39;</span>].to(device) </span>\n<span id=\"cb30-13\"><a href=\"#cb30-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>target_s1 <span class=\"op\">=</span> item[<span class=\"st\">&#39;target_s1&#39;</span>].to(device) </span>\n<span id=\"cb30-14\"><a href=\"#cb30-14\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb30-15\"><a href=\"#cb30-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>output_l1,_,_ <span class=\"op\">=</span> my_model((input_b1,input_b2,input_b3))</span></code></pre></div>\n<h3 id=\"指标分析\">指标分析</h3>\n<p>原始模糊图片与不模糊图片之间的指标计算</p>\n<div class=\"sourceCode\" id=\"cb31\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb31-1\"><a href=\"#cb31-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>blur_psnr <span class=\"op\">=</span> psnr(input_b1,target_s1)</span>\n<span id=\"cb31-2\"><a href=\"#cb31-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>blur_ssim <span class=\"op\">=</span> ssim(input_b1,target_s1)</span>\n<span id=\"cb31-3\"><a href=\"#cb31-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>blur_mssim <span class=\"op\">=</span> mssim(input_b1,target_s1)</span>\n<span id=\"cb31-4\"><a href=\"#cb31-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb31-5\"><a href=\"#cb31-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(<span class=\"ss\">f&quot;原始模糊图片:PSNR=</span><span class=\"sc\">&#123;</span>blur_psnr<span class=\"sc\">.</span><span class=\"bu\">float</span>()<span class=\"sc\">&#125;</span><span class=\"ss\">, SSIM=</span><span class=\"sc\">&#123;</span>blur_ssim<span class=\"sc\">.</span><span class=\"bu\">float</span>()<span class=\"sc\">&#125;</span><span class=\"ss\">, MSSIM=</span><span class=\"sc\">&#123;</span>blur_mssim<span class=\"sc\">.</span><span class=\"bu\">float</span>()<span class=\"sc\">&#125;</span><span class=\"ss\">&quot;</span>)</span></code></pre></div>\n<pre><code>原始模糊图片:PSNR=24.050003051757812, SSIM=0.716961145401001, MSSIM=0.840461015701294</code></pre>\n<p>去模糊图片与不模糊的图片之间的指标计算</p>\n<div class=\"sourceCode\" id=\"cb33\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb33-1\"><a href=\"#cb33-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>output_psnr <span class=\"op\">=</span> psnr(output_l1,target_s1)</span>\n<span id=\"cb33-2\"><a href=\"#cb33-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>output_ssim <span class=\"op\">=</span> ssim(output_l1,target_s1)</span>\n<span id=\"cb33-3\"><a href=\"#cb33-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>output_mssim <span class=\"op\">=</span> mssim(output_l1,target_s1)</span>\n<span id=\"cb33-4\"><a href=\"#cb33-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb33-5\"><a href=\"#cb33-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(<span class=\"ss\">f&quot;网络输出图片:PSNR=</span><span class=\"sc\">&#123;</span>output_psnr<span class=\"sc\">.</span><span class=\"bu\">float</span>()<span class=\"sc\">&#125;</span><span class=\"ss\">, SSIM=</span><span class=\"sc\">&#123;</span>output_ssim<span class=\"sc\">.</span><span class=\"bu\">float</span>()<span class=\"sc\">&#125;</span><span class=\"ss\">, MSSIM=</span><span class=\"sc\">&#123;</span>output_mssim<span class=\"sc\">.</span><span class=\"bu\">float</span>()<span class=\"sc\">&#125;</span><span class=\"ss\">&quot;</span>)</span></code></pre></div>\n<pre><code>网络输出图片:PSNR=24.012224197387695, SSIM=0.7089502811431885, MSSIM=0.8413411974906921</code></pre>\n<h3 id=\"结果展示\">结果展示</h3>\n<div class=\"sourceCode\" id=\"cb35\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb35-1\"><a href=\"#cb35-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.figure(figsize<span class=\"op\">=</span>(<span class=\"dv\">6</span>,<span class=\"dv\">10</span>))</span>\n<span id=\"cb35-2\"><a href=\"#cb35-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.subplot(<span class=\"dv\">311</span>)</span>\n<span id=\"cb35-3\"><a href=\"#cb35-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>plot_tensor(input_b1)</span>\n<span id=\"cb35-4\"><a href=\"#cb35-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.subplot(<span class=\"dv\">312</span>)</span>\n<span id=\"cb35-5\"><a href=\"#cb35-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>plot_tensor(output_l1)</span>\n<span id=\"cb35-6\"><a href=\"#cb35-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.subplot(<span class=\"dv\">313</span>)</span>\n<span id=\"cb35-7\"><a href=\"#cb35-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>plot_tensor(target_s1)</span></code></pre></div>\n<figure>\n<img src=\"/.top//Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120222412395.png\" alt=\"image-20211120222412395\">\n<figcaption aria-hidden=\"true\">image-20211120222412395</figcaption>\n</figure>\n<div class=\"sourceCode\" id=\"cb36\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb36-1\"><a href=\"#cb36-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># 将结果保存</span></span>\n<span id=\"cb36-2\"><a href=\"#cb36-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>save_name <span class=\"op\">=</span> blur_img_path.split(<span class=\"st\">&quot;/&quot;</span>)[<span class=\"op\">-</span><span class=\"dv\">1</span>]</span>\n<span id=\"cb36-3\"><a href=\"#cb36-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>save_path <span class=\"op\">=</span> os.path.join(args.save_dir,save_name)</span>\n<span id=\"cb36-4\"><a href=\"#cb36-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>save_img <span class=\"op\">=</span> transforms.ToPILImage()(output_l1.squeeze(<span class=\"dv\">0</span>))</span>\n<span id=\"cb36-5\"><a href=\"#cb36-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>save_img.save(save_path)</span></code></pre></div>\n<hr>\n<h3 id=\"about-me\">About ME</h3>\n<h5 id=\"读书城南-在未来面前我们都是孩子\">👋 读书城南，🤔\n在未来面前，我们都是孩子～</h5>\n<ul>\n<li>📙\n一个热衷于探索学习新方向、新事物的智能产品经理，闲暇时间喜欢coding💻、画图🎨、音乐🎵、学习ing~</li>\n</ul>\n<h5 id=\"social-media\">👋 Social Media</h5>\n<ul>\n<li><p>🛠️ Blog: <a href=\"http://oceaneyes.top\">http://oceaneyes.top</a></p></li>\n<li><p>⚡ PM导航: <a href=\"https://pmhub.oceangzy.top\">https://pmhub.oceangzy.top</a></p></li>\n<li><p>☘️ CNBLOG: <a href=\"https://www.cnblogs.com/oceaneyes-gzy/\">https://www.cnblogs.com/oceaneyes-gzy/</a></p></li>\n<li><p>🌱 AI PRJ自己部署的一些算法demo: <a href=\"http://ai.oceangzy.top/\">http://ai.oceangzy.top/</a></p></li>\n<li><p>📫 Email: 1450136519@qq.com</p></li>\n<li><p>💬 WeChat: <a href=\"https://oceaneyes.top/img/wechatqrcode.jpg\">OCEANGZY</a></p></li>\n<li><p>💬 公众号: <a href=\"https://oceaneyes.top/img/wechatgzh.jpeg\">UncleJoker-GZY</a></p></li>\n</ul>\n<h5 id=\"加入小组\">👋 加入小组~</h5>\n<p><img src=\"https://oceaneyes.top/img/zhishigroup.jpg\" title=\"加入组织\" alt width=\"240\"></p>\n<h5 id=\"感谢打赏\">👋 感谢打赏~</h5>\n<p><img src=\"https://oceaneyes.top/img/alipay.jpg\" title=\"支付宝打赏\" alt width=\"140\">\n<img src=\"https://oceaneyes.top/img/wechatpay.jpg\" title=\"微信打赏\" alt width=\"140\"></p>\n","categories":[{"name":"Artificial Intelligence","path":"api/categories/Artificial Intelligence.json"},{"name":"Machine Learning","path":"api/categories/Machine Learning.json"},{"name":"Algorithm","path":"api/categories/Algorithm.json"},{"name":"CV","path":"api/categories/CV.json"}],"tags":[{"name":"Machine Learning","path":"api/tags/Machine Learning.json"},{"name":"Algorithm","path":"api/tags/Algorithm.json"},{"name":"PyTorch","path":"api/tags/PyTorch.json"},{"name":"CV","path":"api/tags/CV.json"}]}